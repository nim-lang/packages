[
  {
    "name": "AntTweakBar",
    "description": "nim wrapper around the AntTweakBar c library",
    "tags": [
      "gui",
      "opengl",
      "rendering"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/krux02/nimAntTweakBar",
    "url": "https://github.com/krux02/nimAntTweakBar",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "ArrayFireNim",
    "description": "A nim wrapper for ArrayFire",
    "tags": [
      "array",
      "linear",
      "algebra",
      "scientific",
      "computing"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/bitstormGER/ArrayFire-Nim",
    "url": "https://github.com/bitstormGER/ArrayFire-Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "AstroNimy",
    "description": "Astronomical library for Nim",
    "tags": [
      "science",
      "astronomy",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/super-massive-black-holes/AstroNimy",
    "url": "https://github.com/super-massive-black-holes/AstroNimy",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "BN",
    "description": "A Nim Wrapper of the imath BigNumber library.",
    "tags": [
      "bignumber",
      "multiprecision",
      "imath"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/MerosCrypto/BN",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "BipBuffer",
    "description": "A Nim implementation of Simon Cooke's Bip Buffer. A type of circular buffer ensuring contiguous blocks of memory",
    "tags": [
      "Bip Buffer",
      "Circular",
      "Ring",
      "Buffer",
      "nim"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://marcazar.github.io/BipBuffer",
    "url": "https://github.com/MarcAzar/BipBuffer",
    "long_description": "A Nim implementation of Simon Cooke’s Bip Buffer. A Bi-partite buffer is similar to a circular buffer, but where data is inserted in two revolving regions. This allows reads to return contiguous blocks of memory, even if they span a region that would normally include a wrap-around in a circular buffer. It’s especially useful for APIs requiring blocks of contiguous memory, eliminating the need to copy data into an interim buffer before use.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "BitVector",
    "description": "A high performance Nim implementation of BitVector with base SomeUnsignedInt(i.e: uint8-64) with support for slices, and seq supported operations",
    "tags": [
      "Bit",
      "Array",
      "Vector",
      "Bloom"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://marcazar.github.io/BitVector",
    "url": "https://github.com/MarcAzar/BitVector",
    "long_description": "A high performance Nim implementation of BitVector with base (uint64, uint32, uint16, or uint8), and with support for slices and other seq supported operations. BitVector format order is little endian, where Least Significant Byte has the lowest address. BitVector is an in-memory bit vector. A Bloom Fliter is also provided to demonstrate BitVector usage along with Murmur Hashing. If looking for a mmap type BitVector consider using nim-bitarray.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "DevIL",
    "description": "Wrapper for the DevIL image library",
    "tags": [
      "image",
      "library",
      "graphics",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Varriount/DevIL",
    "url": "https://github.com/Varriount/DevIL",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "Kinto",
    "description": "Kinto Client for Nim",
    "tags": [
      "mozilla",
      "kinto",
      "json",
      "storage",
      "server",
      "client"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/kinto.nim",
    "url": "https://github.com/OpenSystemsLab/kinto.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "LLVM",
    "description": "LLVM bindings for the Nim language.",
    "tags": [
      "LLVM",
      "bindings",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/FedeOmoto/llvm",
    "url": "https://github.com/FedeOmoto/llvm",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Tools",
      "Language"
    ]
  },
  {
    "name": "MiNiM",
    "description": "A tiny concatenative programming language and shell.",
    "tags": [
      "concatenative",
      "language",
      "shell"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://h3rald.com/minim",
    "url": "https://github.com/h3rald/minim",
    "long_description": "min is a functional, concatenative programming language with a minimalist syntax, a small but practical standard library, and an advanced REPL. All packed in about 1MB.\n* Entirely written in Nim. It can be easily embedded in other nim programs.\n* Follows the functional and concatenative programming paradigms.\n* Provides a wide range of combinators for advanced stack manipulation and dequoting.\n* Provides a minimal set of data types: integer, floats, strings, booleans, and quotations (lists).\n* Fully homoiconic, all code can be accessed as data via quotations.\n* Includes an advanced REPL with auto-completion and history management.\n* Provides a lightweight module system.\n* Provides sigils as syntactic sugar to access environment variables, quoting, defining and binding data, etc.\n* Includes a small, useful standard library for common tasks.\n* Self-contained, statically compiled into single file.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Language",
      "Tools"
    ]
  },
  {
    "name": "NiMPC",
    "description": "Secure multi-party computation",
    "tags": [
      "multiparty",
      "computation",
      "mpc"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/markspanbroek/nimpc",
    "url": "https://github.com/markspanbroek/nimpc",
    "long_description": "A secure multi-party computation (MPC) library for the Nim programming language. Allows you to do joint computations with multiple parties while each party keeps their inputs private. We're working towards an implementation of the SPDZ2k protocol.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Network",
      "Algorithms"
    ]
  },
  {
    "name": "NimBorg",
    "description": "High-level and low-level interfaces to python and lua",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/micklat/NimBorg",
    "url": "https://github.com/micklat/NimBorg",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "NimData",
    "description": "DataFrame API enabling fast out-of-core data analytics",
    "tags": [
      "library",
      "dataframe"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/NimData",
    "url": "https://github.com/bluenote10/NimData",
    "long_description": "NimData is inspired by frameworks like Pandas/Spark/Flink/Thrill, and sits between the Pandas and the Spark/Flink/Thrill side. Similar to Pandas, NimData is currently non-distributed, but shares the type-safe, lazy API of Spark/Flink/Thrill. Thanks to Nim, it enables elegant out-of-core processing at native speed.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Data science"
    ]
  },
  {
    "name": "Phosphor",
    "description": "Easier use of OpenGL and GLSL shaders",
    "tags": [
      "library",
      "opengl",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/Phosphor",
    "url": "https://github.com/barcharcraz/Phosphor",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Video",
      "Image"
    ]
  },
  {
    "name": "QuickJS4nim",
    "description": "A QuickJS wrapper for Nim",
    "tags": [
      "QuickJS",
      "Javascript",
      "Runtime",
      "Wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ImVexed/quickjs4nim",
    "url": "https://github.com/ImVexed/quickjs4nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Language"
    ]
  },
  {
    "name": "RC4",
    "description": "RC4 library implementation",
    "tags": [
      "RC4",
      "encryption",
      "library",
      "crypto",
      "simple"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OHermesJunior/nimRC4",
    "url": "https://github.com/OHermesJunior/nimRC4",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "Remotery",
    "description": "Nim wrapper for (and with) Celtoys's Remotery",
    "tags": [
      "wrapper",
      "opengl",
      "direct3d",
      "cuda",
      "profiler"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/Halsys/Nim-Remotery",
    "url": "https://github.com/Halsys/Nim-Remotery",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Tools"
    ]
  },
  {
    "name": "RingBuffer",
    "description": "Circular buffer implementation",
    "tags": [
      "sequence",
      "seq",
      "circular",
      "ring",
      "buffer"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/megawac/RingBuffer.nim",
    "url": "git@github.com:megawac/RingBuffer.nim.git",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "RollingHash",
    "description": "A high performance Nim implementation of a Cyclic Polynomial Hash, aka BuzHash, and the Rabin-Karp algorithm",
    "tags": [
      "Cyclic",
      "Hash",
      "BuzHash",
      "Rolling",
      "Rabin",
      "Karp",
      "CRC",
      "Fingerprint",
      "n-gram"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://marcazar.github.io/RollingHash",
    "url": "https://github.com/MarcAzar/RollingHash",
    "long_description": "A high performance nim implementation of a Cyclic Polynomial Hash, aka BuzHash, and the Rabin-Karp algorithm. A Cyclic Polynomial hash is a type of Rolling hash which avoids multiplication by using circular shifts and xoring. This implementation has type support for (uint8, uint16, uint32, and uint64). For more information regarding Cyclic Polynomial hashing please refer to wiki’s article on Rolling Hash. Also In this implementation is Rabin Karp hasing algorithm, which can be used for variable content based chunking.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "SDF",
    "description": "Signed Distance Field builder for contour texturing in Nim",
    "tags": [
      "sdf",
      "text",
      "contour",
      "texture",
      "signed",
      "distance",
      "transform"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Halsys/SDF.nim",
    "url": "https://github.com/Halsys/SDF.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Algorithms",
      "Image"
    ]
  },
  {
    "name": "WebGL",
    "description": "Experimental wrapper to webgl for Nim",
    "tags": [
      "webgl",
      "graphic",
      "js",
      "javascript",
      "wrapper",
      "3D",
      "2D"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://stisa.space/webgl/",
    "url": "https://github.com/stisa/webgl",
    "long_description": "Experimental wrapper to webgl for Nim (JS backend).\nMostly taken from mozilla webgl api.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "JS",
      "Web"
    ]
  },
  {
    "name": "XPLM-Nim",
    "description": "X-Plane XPLM SDK wrapper",
    "tags": [
      "X-Plane",
      "XPLM",
      "Plugin",
      "SDK"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/jpoirier/XPLM-Nim",
    "url": "https://github.com/jpoirier/XPLM-Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "Xors3D",
    "description": "Blitz3D-esque DX9 engine for Nim",
    "tags": [
      "3d",
      "game",
      "engine",
      "dx9",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Guevara-chan/Xors3D-for-Nim",
    "url": "https://github.com/Guevara-chan/Xors3D-for-Nim",
    "long_description": "Xors3D is an abandoned 3D graphics engine, easily accessible from almost any programming language through transparent procedural interface. It was initially developed by XorsTeam in attempt of bringing DirectX9 functionality into Blitz3D. Discounted since 2012.\nXors3D for Nim is one of aftermath wrappers, reconstructed directly from C++ headers to return Xors' legacy into present.\n* Faithful line-by-line header conversion to maximize compatibility with older code.\n* Some of 69 original Xors3D samples, translated from PureBasic wrapper to Nim.\n* Latest salvageable engine revision: 1.15.750.0",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "about",
    "description": "Executable for finding information about programs in PATH",
    "tags": [
      "cli",
      "tool"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/aleandros/about",
    "url": "https://github.com/aleandros/about",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "ad",
    "description": "A simple RPN calculator",
    "tags": [
      "calculator",
      "rpn"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/subsetpark/ad",
    "url": "https://github.com/subsetpark/ad",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "ajax",
    "description": "AJAX wrapper for nim js backend.",
    "tags": [
      "js",
      "javascripts",
      "ajax",
      "xmlhttprequest"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://stisa.space/ajax/",
    "url": "https://github.com/stisa/ajax",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "alea",
    "description": "Define and compose random variables",
    "tags": [
      "random variables",
      "distributions",
      "probability",
      "gaussian",
      "sampling"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/alea",
    "url": "https://github.com/unicredit/alea",
    "long_description": "* Random numbers\n* Random variables\n* Operations on random variables\n* Conditioning random variables\n* Statistics on random variables\n* More distributions\n* Defining custom distributions",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "algebra",
    "description": "Algebraic expression parser and evaluator",
    "tags": [
      "algebra",
      "parse",
      "evaluate",
      "mathematics"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://github.com/ijneb/nim-algebra",
    "url": "https://github.com/ijneb/nim-algebra",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "alignment",
    "description": "alignment is a library to align strings.",
    "tags": [
      "library",
      "text",
      "align",
      "string",
      "strutils"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/alignment",
    "url": "https://github.com/jiro4989/alignment",
    "long_description": "This module provides functions to align texts. The procedures consider multibyte strings (ex: あいうえお, 漢字).",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "allegro5",
    "description": "Wrapper for Allegro version 5.X",
    "tags": [
      "wrapper",
      "graphics",
      "games",
      "opengl",
      "audio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/allegro5",
    "url": "https://github.com/fowlmouth/allegro5",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "analytics",
    "description": "Allows statistics to be sent to and recorded in Google Analytics.",
    "tags": [
      "google",
      "telemetry",
      "statistics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/analytics",
    "url": "https://github.com/dom96/analytics",
    "long_description": "A Nim library for reporting events on Google Analytics.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "anybar",
    "description": "Control AnyBar instances with Nim",
    "tags": [
      "anybar",
      "menubar",
      "status",
      "indicator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/anybar.nim",
    "url": "https://github.com/ba0f3/anybar.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "ao",
    "description": "A high-level libao wrapper",
    "tags": [
      "library",
      "audio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ephja/nim-ao",
    "url": "https://github.com/ephja/nim-ao",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "aporia",
    "description": "A Nim IDE.",
    "tags": [
      "app",
      "binary",
      "ide",
      "gtk"
    ],
    "license": "GPLv2",
    "method": "git",
    "web": "https://github.com/nim-lang/Aporia",
    "url": "https://github.com/nim-lang/Aporia",
    "long_description": "Note: As of 2018 Aporia is considered obsolete. Most of the Nim community has switched to VS Code instead. Feel free to use Aporia, but know that it may not be maintained anymore.\nAporia is an IDE for the Nim programming language. Aporia uses GTK as the default toolkit, and the gtksourceview for the text editor component.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Development"
    ]
  },
  {
    "name": "appdirs",
    "description": "A utility library to find the directory you need to app in.",
    "tags": [
      "utility",
      "filesystem"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/MrJohz/appdirs",
    "url": "https://github.com/MrJohz/appdirs",
    "long_description": "Appdirs is a small module that finds the dirs for you to app in.\nMore specifically, appdirs contains a number of functions that will return the correct directory for the platform you are on. (All functions also allow you to override the platform.) Note that these directories are simply strings naming possible directories. You will need to ensure that the directory you wish to use is available yourself.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "argparse",
    "description": "WIP strongly-typed argument parser with sub command support",
    "tags": [
      "cli",
      "argparse",
      "optparse"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/iffy/nim-argparse",
    "doc": "https://www.iffycan.com/nim-argparse/argparse.html",
    "long_description": "argparse is an explicit, strongly-typed command line argument parser.\nBecause this module makes heavy use of macros, there are several exported procs, types and templates that aren't intended for direct use but which are exported because the macros make use of them. The documentation and examples should make the distinction clear.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "argument_parser",
    "description": "Provides a complex command-line parser",
    "tags": [
      "library",
      "command-line",
      "arguments",
      "switches",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Xe/argument_parser",
    "url": "https://github.com/Xe/argument_parser/",
    "long_description": "The Nim programming language provides the parseopt module to parse options from the command line. I found this module lacking, used to python modules like optparse or argparse. This module tries to provide similar functionality to prevent you from writing command line parsing and let you concentrate on providing the best possible experience for your users.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "arksys",
    "description": "An entity component system package",
    "tags": [
      "ECS",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/wolfadex/arksys",
    "url": "https://github.com/wolfadex/arksys",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "arraymancer",
    "description": "A tensor (multidimensional array) library for Nim",
    "tags": [
      "vector",
      "matrix",
      "array",
      "ndarray",
      "multidimensional-array",
      "linear-algebra",
      "tensor"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://mratsim.github.io/Arraymancer/",
    "url": "https://github.com/mratsim/Arraymancer",
    "long_description": "Arraymancer is a tensor (N-dimensional array) project in Nim. The main focus is providing a fast and ergonomic CPU and GPU ndarray library on which to build a scientific computing and in particular a deep learning ecosystem.\nThe library is inspired by Numpy and PyTorch. The library provides ergonomics very similar to Numpy, Julia and Matlab but is fully parallel and significantly faster than those libraries. It is also faster than C-based Torch.\nNote: While Nim is compiled and does not offer an interactive REPL yet (like Jupyter), it allows much faster prototyping than C++ due to extremely fast compilation times. Arraymancer compiles in about 5 seconds on my dual-core MacBook.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Data science"
    ]
  },
  {
    "name": "arraymancer_vision",
    "description": "Image transformation and visualization utilities for arraymancer",
    "tags": [
      "arraymancer",
      "image",
      "vision"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/edubart/arraymancer-vision",
    "url": "https://github.com/edubart/arraymancer-vision",
    "long_description": "Simple library for image loading, preprocessing and visualization for working with arraymancer.\n* Loading image into tensors\n* Simple image transformations like flipping, rotation, scaling\n* Saving images\n* Image convolution filters like sharpen, edges\n* Visualization of images using visdom",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Data science",
      "Image"
    ]
  },
  {
    "name": "asciigraph",
    "description": "Console ascii line charts in pure nim",
    "tags": [
      "graph",
      "plot",
      "terminal",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/KeepCoolWithCoolidge/asciigraph",
    "url": "https://github.com/KeepCoolWithCoolidge/asciigraph",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Maths",
      "Reporting"
    ]
  },
  {
    "name": "asciitables",
    "description": "terminal ascii tables for nim",
    "tags": [
      "ascii",
      "terminal",
      "tables",
      "cli"
    ],
    "license": "BSD-3-Clause",
    "method": "git",
    "web": "https://github.com/xmonader/nim-asciitables",
    "url": "https://github.com/xmonader/nim-asciitables",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Reporting"
    ]
  },
  {
    "name": "assimp",
    "description": "Wrapper for the assimp library",
    "tags": [
      "wrapper",
      "media",
      "mesh",
      "import",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/nim-assimp",
    "url": "https://github.com/barcharcraz/nim-assimp",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "ast_pattern_matching",
    "description": "a general ast pattern matching library with a focus on correctness and good error messages",
    "tags": [
      "macros",
      "pattern-matching",
      "ast"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/krux02/ast-pattern-matching",
    "url": "https://github.com/krux02/ast-pattern-matching",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Language"
    ]
  },
  {
    "name": "astar",
    "description": "A* Pathfinding",
    "tags": [
      "astar",
      "A*",
      "pathfinding",
      "algorithm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Nycto/AStarNim",
    "url": "https://github.com/Nycto/AStarNim",
    "long_description": "The classic A-Star path finding algorith built in Nim",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "asyncdocker",
    "description": "Asynchronous docker client written by Nim-lang",
    "tags": [
      "async",
      "docker"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://tulayang.github.io/asyncdocker.html",
    "url": "https://github.com/tulayang/asyncdocker",
    "long_description": "This module implements an Docker Engine client based on Docker Remotet API. It's asynchronous (non-blocking) that it can be used to write web services for deploying swarm cluster and containers automatically on cloud environment. Of course, it can also be used to write any local deployment tools.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Network"
    ]
  },
  {
    "name": "asyncevents",
    "description": "Asynchronous event loop for progaming with MVC",
    "tags": [
      "event",
      "future",
      "asyncdispatch"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tulayang/asyncevents",
    "url": "https://github.com/tulayang/asyncevents",
    "long_description": "This module implements an asynchronous event loop which can distribute and callback asyncdispatch.Future. {.async.} is effective.\nIt's expected to ease programming with MVC.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "GUI"
    ]
  },
  {
    "name": "asyncmysql",
    "description": "Asynchronous MySQL connector written in pure Nim",
    "tags": [
      "mysql",
      "async",
      "asynchronous"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tulayang/asyncmysql",
    "url": "https://github.com/tulayang/asyncmysql",
    "long_description": "AsyncMysql is an asynchronous (None-Blocking) MySQL connector written in pure Nim.\n* Execute multiple SQL statements in a single query\n* Streaming large result sets\n* Commit and rollback transaction\n* Connection pool",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "asyncpg",
    "description": "Asynchronous PostgreSQL driver for Nim Language.",
    "tags": [
      "async",
      "database",
      "postgres",
      "postgresql",
      "asyncdispatch",
      "asynchronous",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cheatfate/asyncpg",
    "url": "https://github.com/cheatfate/asyncpg",
    "long_description": "Asynchronous PostgreSQL driver\n* Pure asynchronous implementation, based on LibPQ and Nim's async core\n* Support for many SQL statements/results in one request\n* Ability to send parameters separately from query, thus avoiding the need for tedious and error-prone quoting and escaping\n* Automatic type conversion for basic Nim types\n* Sending and receiving COPY data\n* ARRAYS and JSON/JSONB support\n* Asynchronous Notification",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "asyncpythonfile",
    "description": "High level, asynchronous file API mimicking Python's file interface.",
    "tags": [
      "async",
      "asynchronous",
      "library",
      "python",
      "file",
      "files"
    ],
    "license": "ISC",
    "method": "git",
    "web": "https://github.com/fallingduck/asyncpythonfile-nim",
    "url": "https://github.com/fallingduck/asyncpythonfile-nim",
    "long_description": "A high level, asynchronous file API mimicking Python's file interface. Inspired by nim-pythonfile, but written from scratch with asyncfile and asyncdispatch.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "asynctools",
    "description": "Various asynchronous tools for Nim",
    "tags": [
      "async",
      "pipes",
      "processes",
      "ipc",
      "synchronization",
      "dns",
      "pty"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cheatfate/asynctools",
    "url": "https://github.com/cheatfate/asynctools",
    "long_description": "* asyncpipe.nim: Asynchronous pipes, using non-blocking pipe(2) on Linux/BSD/MacOS/Solaris and named pipes on Windows.\n* asyncipc.nim: Asynchronous inter-process communication, using non-blocking mkfifo(3) on Linux/BSD/MacOS/Solaris and named memory maps on Windows.\n* asyncproc.nim: Asynchronous process manipulation facility with asynchronous pipes as standart input/output/error handles, and asynchronous.\n* asyncdns.nim: Asynchronous DNS resolver, using default libresolv/libbind on Linux/BSD/MacOS/Solaris, and default dnsapi.dll on Windows.\n* asyncpty.nim: Asynchronous PTY communication, using pty mechanism of Linux/BSD/MacOS/Solaris, and named pipes on Windows.\n* asyncsync.nim: Asynchronous synchronization primitives, such as Queue, Lock and Event.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Tools",
      "Network"
    ]
  },
  {
    "name": "autome",
    "description": "Write GUI automation scripts with Nim",
    "tags": [
      "gui",
      "automation",
      "windows"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/miere43/autome",
    "url": "https://github.com/miere43/autome",
    "long_description": "Simple GUI automation tool (Windows only).\n* mouse: get/set cursor pos, emit clicks\n* keyboard: send characters (ASCII only)\n* window: get/set window pos, find, show/hide, activate/deactivate, minimize/maximize/unminimize/unmaximize, focus/unfocus\n* hotkeys: run your code when user presses certain keyboard combination.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "avbin",
    "description": "Wrapper of the AVbin library for the Nim language.",
    "tags": [
      "audio",
      "video",
      "media",
      "library",
      "wrapper"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/Vladar4/avbin",
    "url": "https://github.com/Vladar4/avbin",
    "long_description": "AVbin is a binary release of a cross-platform, thin wrapper around Libav’s video and audio decoding library, providing long-term binary compatibility for applications and languages that need it.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "awesome_rmdir",
    "description": "Command to remove acceptably empty directories.",
    "tags": [
      "rmdir",
      "awesome",
      "command-line"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/awesome_rmdir/",
    "url": "https://github.com/Araq/awesome_rmdir/",
    "long_description": "If you don't use the rmdir command you can stop reading here and go watch some kpop instead.\nBut if you use the rmdir command in a desktop like environment you may hate that it won't remove directories which contain files like .DS_Store or Thumbs.db, which modern OSes create everywhere and make you cringe every time you have to deal with them.\nThe awesome_rmdir command is a reimplementation of the trusty rmdir command in the Nimrod programming language. It first tries to remove the directory as usual, and only if normal removal fails it will scan the directory and remove these useless files, then try again the removal of the directory you specified. The end result should be that if the directory is acceptably empty it will be removed.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "awk",
    "description": "Nim for awk programmers",
    "tags": [
      "awk"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/greencardamom/awk",
    "url": "https://github.com/greencardamom/awk",
    "long_description": "A library of GNU awk functions for nim. Standard awk library functions written in and for nim.\n* Program in nim using the familair regex-enabled awk toolset.\n* For nim programers, a small set of powerful regex tools from the awk world.\n* Convert GNU awk scripts to C (and binary executable) without coding in C by using the nim macro language.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "aws_sdk",
    "description": "Library for interacting with Amazon Web Services (AWS)",
    "tags": [
      "aws",
      "amazon"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/aidansteele/aws_sdk.nim",
    "url": "https://github.com/aidansteele/aws_sdk.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Cloud"
    ]
  },
  {
    "name": "awslambda",
    "description": "A package to compile nim functions for AWS Lambda",
    "tags": [
      "aws",
      "lambda"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lambci/awslambda.nim",
    "url": "https://github.com/lambci/awslambda.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Cloud"
    ]
  },
  {
    "name": "backoff",
    "description": "Implementation of exponential backoff for nim",
    "tags": [
      "exponential-backoff",
      "backoff"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/CORDEA/backoff",
    "url": "https://github.com/CORDEA/backoff",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "baker",
    "description": "Static website generation",
    "tags": [
      "html",
      "template",
      "static",
      "blog"
    ],
    "license": "Apache-2.0",
    "method": "git",
    "web": "https://github.com/jasonrbriggs/baker",
    "url": "https://github.com/jasonrbriggs/baker",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "barbarus",
    "description": "A simple extensible i18n engine.",
    "tags": [
      "i18n",
      "internationalization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cjxgm/barbarus",
    "url": "https://github.com/cjxgm/barbarus",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "base32",
    "description": "Base32 library for Nim",
    "tags": [
      "base32",
      "encode",
      "decode"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/base32.nim",
    "url": "https://github.com/OpenSystemsLab/base32.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "base58",
    "description": "Base58 encoders and decoders for Bitcoin and CryptoNote addresses.",
    "tags": [
      "base58",
      "bitcoin",
      "cryptonote",
      "monero",
      "encoding",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ehmry/nim-base58",
    "url": "https://github.com/ehmry/nim-base58",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "base62",
    "description": "Arbitrary base encoding-decoding functions, defaulting to Base-62.",
    "tags": [
      "base62",
      "encode",
      "decode"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/singularperturbation/base62-encode",
    "url": "https://github.com/singularperturbation/base62-encode",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "basic2d",
    "description": "Deprecated module for vector/matrices operations.",
    "tags": [
      "deprecated",
      "vector",
      "stdlib",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/basic2d",
    "url": "https://github.com/nim-lang/basic2d",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Maths"
    ]
  },
  {
    "name": "basic3d",
    "description": "Deprecated module for vector/matrices operations.",
    "tags": [
      "deprecated",
      "vector",
      "stdlib",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/basic3d",
    "url": "https://github.com/nim-lang/basic3d",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Maths"
    ]
  },
  {
    "name": "bcrypt",
    "description": "Wraps the bcrypt (blowfish) library for creating encrypted hashes (useful for passwords)",
    "tags": [
      "hash",
      "crypto",
      "password",
      "bcrypt",
      "library"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://www.github.com/ithkuil/bcryptnim/",
    "url": "https://github.com/ithkuil/bcryptnim/",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "beanstalkd",
    "description": "A beanstalkd work queue client library.",
    "tags": [
      "library",
      "queue",
      "messaging"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tormaroe/beanstalkd.nim",
    "url": "https://github.com/tormaroe/beanstalkd.nim.git",
    "long_description": "This module provides a client API to a beanstalkd server for both producers and consumers.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "bearlibterminal",
    "description": "Wrapper for the C[++] library BearLibTerminal",
    "tags": [
      "roguelike",
      "terminal",
      "bearlibterminal",
      "tcod",
      "libtcod",
      "tdl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/irskep/BearLibTerminal-Nim",
    "url": "https://github.com/irskep/BearLibTerminal-Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "bencode",
    "description": "Bencode serialization/deserialization library",
    "tags": [
      "library",
      "bencode"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-bencode",
    "url": "https://github.com/FedericoCeratto/nim-bencode",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Web"
    ]
  },
  {
    "name": "bgfx",
    "description": "BGFX wrapper for the nim programming language.",
    "tags": [
      "wrapper",
      "media",
      "graphics",
      "3d",
      "rendering",
      "opengl"
    ],
    "license": "BSD2",
    "method": "git",
    "web": "https://github.com/Halsys/nim-bgfx",
    "url": "https://github.com/Halsys/nim-bgfx",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "bgfxdotnim",
    "description": "bindings to bgfx c99 api",
    "tags": [
      "bgfx",
      "3d",
      "vulkan",
      "opengl",
      "metal",
      "directx"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zacharycarter/bgfx.nim",
    "url": "https://github.com/zacharycarter/bgfx.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "biblioteca_guarrilla",
    "description": "Simple web to share books, Calibre, Jester, Spectre CSS, No JavaScript, WebP & ZIP to reduce bandwidth",
    "tags": [
      "books",
      "calibre",
      "jester"
    ],
    "license": "GPL",
    "method": "git",
    "web": "https://github.com/juancarlospaco/biblioteca-guarrilla",
    "url": "https://github.com/juancarlospaco/biblioteca-guarrilla",
    "long_description": "Simple responsive web to share books, Calibre, Nim, Jester, Spectre CSS, No JavaScript, WebP & ZIP to reduce bandwidth.\n* 1 file.\n* ~300Kb.\n* ~130 Lines of code.\n* 0 Dependencies (libzip may or may not be required depending on your system config, should be present on most OS nowadays).\n* English & Spanish supported.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web",
      "Miscellaneous"
    ]
  },
  {
    "name": "bigints",
    "description": "Arbitrary-precision integers",
    "tags": [
      "math",
      "library",
      "numbers"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/bigints",
    "url": "https://github.com/def-/bigints",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "bignum",
    "description": "Wrapper around the GMP bindings for the Nim language.",
    "tags": [
      "bignum",
      "gmp",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kaushalmodi/bignum",
    "url": "https://github.com/kaushalmodi/bignum",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "binance",
    "description": "A Nim library to access the Binance API.",
    "tags": [
      "library",
      "api",
      "binance"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/Imperator26/binance",
    "url": "https://github.com/Imperator26/binance",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Finance"
    ]
  },
  {
    "name": "binaryheap",
    "description": "Simple binary heap implementation",
    "tags": [
      "heap",
      "priority queue"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/nim-heap",
    "url": "https://github.com/bluenote10/nim-heap",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "binaryparse",
    "description": "Binary parser (and writer) in pure Nim. Generates efficient parsing procedures that handle many commonly seen patterns seen in binary files and does sub-byte field reading.",
    "tags": [
      "parsing",
      "binary"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/binaryparse",
    "url": "https://github.com/PMunch/binaryparse",
    "long_description": "This module implements a macro to create binary parsers. The parsers generated reads from a Stream and returns a tuple with each named field. The general format the macro takes is:\n`[type]<size>: <name>[options]`\nWhere optional fields are in `[]` brackets and required fields are in `<>` brackets.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "binio",
    "description": "Package for packing and unpacking byte data",
    "tags": [
      "structured",
      "byte",
      "data"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Riderfighter/binio",
    "url": "https://github.com/Riderfighter/binio",
    "long_description": "A package to write structured data to a bytes buffer, which is a technique commonly used in games where text-based protocols such as xml or json carry too much bulk to efficiently transfer data over the wire. The package is similar to Google's protocol buffers in that it is meant to be language agnostic with its intended function, but cuts out the overhead of using protocol buffers and compiling templates for each type.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Games"
    ]
  },
  {
    "name": "biscuits",
    "description": "better cookie handling",
    "tags": [
      "cookie",
      "persistence"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-biscuits",
    "url": "https://github.com/achesak/nim-biscuits",
    "long_description": "Biscuits is a Nim module for better cookie handling.\nDifferences from cookie module in standard library:\n* Better handling of multiple key-value pairs, particularly with regard to creating cookies.\n* Supports \"max-age\" cookie field.\n* Better separation of data from cookie special fields.\n* Better methods for editing cookies.\n* Object-oriented interface, if you like that kind of thing.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "bitarray",
    "description": "mmap-backed bitarray implementation in Nim.",
    "tags": [
      "Bit arrays",
      "Bit sets",
      "Bit vectors",
      "Data structures"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://www.github.com/onecodex/nim-bitarray",
    "url": "https://github.com/onecodex/nim-bitarray",
    "long_description": "An efficient bitarray implementation in Nim. Includes a demo Bloom filter in ~75 lines that also requires murmur3 >= v0.2.0.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "bitvec",
    "description": "Extensible bit vector integer encoding library",
    "tags": [
      "serialization",
      "encoding",
      "wireline"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/keyme/nim_bitvec",
    "url": "https://github.com/keyme/nim_bitvec",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "blake2",
    "description": "blake2 - cryptographic hash function",
    "tags": [
      "crypto",
      "cryptography",
      "hash",
      "security"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://github.com/narimiran/blake2",
    "url": "https://github.com/narimiran/blake2",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "blimp",
    "description": "Utility that helps with big files in git, very similar to git-fat, s3annnex etc.",
    "tags": [
      "app",
      "binary",
      "utility",
      "git",
      "git-fat"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://gitlab.3dicc.com/gokr/blimp",
    "url": "https://gitlab.3dicc.com/gokr/blimp.git",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "bloom",
    "description": "Efficient Bloom filter implementation in Nim using MurmurHash3.",
    "tags": [
      "bloom-filter",
      "bloom",
      "probabilistic",
      "data structure",
      "set membership",
      "MurmurHash",
      "MurmurHash3"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://www.github.com/boydgreenfield/nimrod-bloom",
    "url": "https://github.com/boydgreenfield/nimrod-bloom",
    "long_description": "Bloom filter implementation. Uses a C implementation of MurmurHash3 for optimal speed and numeric distribution.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "blosc",
    "description": "Bit Shuffling Block Compressor (C-Blosc)",
    "tags": [
      "blosc",
      "wrapper",
      "compression"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/Skrylar/nblosc",
    "url": "https://github.com/Skrylar/nblosc",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware"
    ]
  },
  {
    "name": "blscurve",
    "description": "Nim implementation of  Barreto-Lynn-Scott (BLS) curve BLS12-381.",
    "tags": [
      "library",
      "cryptography",
      "bls",
      "aggregated-signatures"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-blscurve",
    "url": "https://github.com/status-im/nim-blscurve",
    "long_description": "This library uses sources from AMCL.\nCurrent curve supported:\n* BLS12-381 (ZK-SNARKS)\nFor signature and verification purposes, raw messages are first hashed with SHA256 (SHA2) following Ethereum requirements 2.0",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Finance"
    ]
  },
  {
    "name": "blurhash",
    "description": "Encoder/decoder for blurhash algorithm",
    "tags": [
      "image",
      "blur",
      "hash",
      "blurhash"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/blurhash",
    "url": "https://github.com/SolitudeSF/blurhash",
    "long_description": "Pure Nim implementation of Blurhash\nBlurhash is an algorithm written by Dag Ågren for Wolt that encodes an image into a short (~20-30 byte) ASCII string. When you decode the string back into an image, you get a gradient of colors that represent the original image. This can be useful for scenarios where you want an image placeholder before loading, or even to censor the contents of an image a la Mastodon.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Image",
      "Web"
    ]
  },
  {
    "name": "bncurve",
    "description": "Nim Barreto-Naehrig pairing-friendly elliptic curve implementation",
    "tags": [
      "library",
      "cryptography",
      "barreto-naehrig",
      "eliptic-curves",
      "pairing"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-bncurve",
    "url": "https://github.com/status-im/nim-bncurve",
    "long_description": "This is a pure Nim implementation of Barreto-Naehrig pairing-friendly elliptic curve.\nThis is a pairing cryptography library written in pure Nim. It makes use of the Barreto-Naehrig (BN) curve construction from [BCTV2015] to provide two cyclic groups G1 and G2, with an efficient bilinear pairing.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "boneIO",
    "description": "A low level GPIO library for the BeagleBone board family",
    "tags": [
      "library",
      "GPIO",
      "BeagleBone"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xyz32/boneIO",
    "url": "https://github.com/xyz32/boneIO",
    "long_description": "GPIO implementation for the BeagleBone black for the Nim language. The implementation is using the sysfs to \"talk\" to the hardware.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "bped",
    "description": "Nim implementation of the Bittorrent ascii serialization protocol",
    "tags": [
      "library",
      "serialization",
      "pure"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/twist-vector/nim-bped",
    "url": "https://github.com/twist-vector/nim-bped.git",
    "long_description": "The BPED module is an implementation of the Bittorrent ascii protocol. The Bittorrent protocol uses an ASCII representation of three basic types; integers, booleans, and strings. In addition to the basic types, lists and dictionaries of the basic types are supported.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "bpg",
    "description": "BPG (Better Portable Graphics) for Nim",
    "tags": [
      "image",
      "library",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/nim-bpg",
    "url": "https://github.com/def-/nim-bpg.git",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Video",
      "Image"
    ]
  },
  {
    "name": "brainfuck",
    "description": "A brainfuck interpreter and compiler",
    "tags": [
      "library",
      "binary",
      "app",
      "interpreter",
      "compiler",
      "language"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/nim-brainfuck",
    "url": "https://github.com/def-/nim-brainfuck.git",
    "long_description": "A simple module that interprets and compiles brainfuck code. This module was created for the How I Start article on Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "breeze",
    "description": "A dsl for writing macros in Nim",
    "tags": [
      "dsl",
      "macro",
      "metaprogramming"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/alehander42/breeze",
    "url": "https://github.com/alehander42/breeze",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "bytes2human",
    "description": "Convert bytes to kilobytes, megabytes, gigabytes, etc.",
    "tags": [
      "bytes",
      "human",
      "minimalism",
      "size"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-bytes2human",
    "url": "https://github.com/juancarlospaco/nim-bytes2human",
    "long_description": "Calculate all Byte units from integer bytes positive int64, with precision from Bytes to Yottabytes, and return a human friendly string representation.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "byteutils",
    "description": "Useful utilities for manipulating and visualizing byte blobs",
    "tags": [
      "library",
      "blobs",
      "hex-dump"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-byteutils",
    "url": "https://github.com/status-im/nim-byteutils",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "c2nim",
    "description": "c2nim is a tool to translate Ansi C code to Nim.",
    "tags": [
      "app",
      "binary",
      "tool",
      "header",
      "C"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/c2nim",
    "url": "https://github.com/nim-lang/c2nim",
    "long_description": "c2nim is a tool to translate Ansi C code to Nim. The output is human-readable Nim code that is meant to be tweaked by hand after the translation process. c2nim is no real compiler!",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "c4",
    "description": "Game framework, modular and extensible",
    "tags": [
      "game",
      "framework",
      "2d",
      "3d"
    ],
    "license": "MPL-2.0",
    "method": "git",
    "web": "https://github.com/c0ntribut0r/cat-400",
    "url": "https://github.com/c0ntribut0r/cat-400",
    "doc": "https://github.com/c0ntribut0r/cat-400/tree/master/docs/tutorials",
    "long_description": "\"Cat 400\" is a cross-platform framework designed to provide nice experience in game development. Written in nim language, it benefits from the language's elegance and expressiveness, as well as compilation to fast native code.\nCore of \"Cat 400\" is platform-independent and may be run on every target platform supported by nim. However, default systems (which are optional) have external dependencies, and their officially supported platforms are Linux, Mac OS and Windows. Support for other platforms may be added later or implemented by independent contributors.\nKey features:\n* client-server architecture by default (even for single-player games) with network support\n* modularity: all code is split into \"systems\" (video/user input/networking etc) which work independently\n* systems communicate only by sending messages, which allows to avoid tangled code\n* ECS (entity-component-system) with custom user components support\n* simple overwriting of existing systems and ability to use your own systems\n* \"presets\" (aka templates) which include some reasonable defaults for specific game genre",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "c_alikes",
    "description": "Operators, commands and functions more c-like, plus a few other utilities",
    "tags": [
      "library",
      "bitwise",
      "bitops",
      "pointers",
      "shallowCopy",
      "C"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ReneSac/c_alikes",
    "url": "https://github.com/ReneSac/c_alikes",
    "long_description": "Collection of aliases and procedures that make easier to write C in nim.\nContains many aliases for the nim's keyword bitwise operators.\nNim's keyword operators don't support nim's strong-spaces feature, nor have an assigment operator version (like +=). The reuse of the logical keywords for and, or and not for the bitwise version also hinders readability somewhat and have arguably the wrong precedence. This module attempts to fix all that.\nIt also includes pointer arithmetic, some useful bitops (most were removed as we got the very nice bitops module in nim standard library!), and some misc aliases for shallowCopy.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "cairo",
    "description": "Wrapper for cairo, a vector graphics library with display and print output",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/cairo",
    "url": "https://github.com/nim-lang/cairo",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "cal",
    "description": "A simple interactive calculator",
    "tags": [
      "calculator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xflywind/cal",
    "url": "https://github.com/xflywind/cal",
    "long_description": "a simple interactive calculator\nuse Stack\nsupport `+` `-` `*` `/`\nsupport float and negative number\nsupport command `exit` and `history`",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "calibre",
    "description": "Calibre Database Lib for Nim",
    "tags": [
      "calibre",
      "ebook",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-calibre",
    "url": "https://github.com/juancarlospaco/nim-calibre",
    "long_description": "Calibre eBooks App Database Client for Nim.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "capnp",
    "description": "Cap'n Proto implementation for Nim",
    "tags": [
      "capnp",
      "serialization",
      "protocol",
      "rpc"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zielmicha/capnp.nim",
    "url": "https://github.com/zielmicha/capnp.nim",
    "long_description": "Cap'n Proto bindings for Nim\ncapnp.nim is a Nim implementation of Cap'n Proto serialization scheme and RPC protocol.\nThe serialization layer is production ready. The RPC layers is also fairly well tested, enough to be useful, but not the whole protocol is implemented.\nThe main user of this library is MetaContainer.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Cloud"
    ]
  },
  {
    "name": "cascade",
    "description": "Method & assignment cascades for Nim, inspired by Smalltalk & Dart.",
    "tags": [
      "macro",
      "cascade",
      "operator",
      "dart",
      "with"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/citycide/cascade",
    "url": "https://github.com/citycide/cascade",
    "long_description": "Method & assignment cascades for Nim, inspired by Smalltalk & Dart.\ncascade is a macro for Nim that implements method cascades, a feature originally from Smalltalk that's made its way into modern languages like Dart and Kotlin.\nIt allows you to avoid repeating an object's name for each method call or assignment. A common case is something like a button:\n```# before\nvar res = Button()\nres.text = \"ok\"\nres.width = 30\nres.color = \"#13a89e\"\nres.btnEcho()```\nWith cascade, you don't need to repeat yourself:\n```# after\nlet btn = cascade Button():\n  text = \"ok\"\n  width = 30\n  color = \"#13a89e\"\n  btnEcho()```",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "cassandra",
    "description": "Bindings to Cassandra DB driver",
    "tags": [
      "cassandra",
      "database",
      "wrapper",
      "bindings",
      "driver"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/cassandra",
    "url": "https://github.com/yglukhov/cassandra",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "cassette",
    "description": "Record and replay your HTTP sessions!",
    "tags": [
      "http",
      "network",
      "test",
      "mock",
      "requests"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LemonBoy/cassette",
    "url": "https://github.com/LemonBoy/cassette",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "cbor",
    "description": "Concise Binary Object Representation decoder (RFC7049).",
    "tags": [
      "library",
      "cbor",
      "binary",
      "encoding"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ehmry/nim-cbor",
    "url": "https://github.com/ehmry/nim-cbor",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "cello",
    "description": "String algorithms with succinct data structures",
    "tags": [
      "string",
      "succinct-data-structure",
      "rank",
      "select",
      "Burrows-Wheeler",
      "FM-index",
      "wavelet-tree"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://unicredit.github.io/cello/",
    "url": "https://github.com/unicredit/cello",
    "long_description": "Cello is a library of succinct data structures, oriented in particular for string searching and other string operations.\nUsually, searching for patterns in a string takes O(n) time, where n is the length of the string. Indices can speedup the search, but take additional space, which can be costly for very large strings. A data structure is called succinct when it takes n + o(n) space, where n is the space needed to store the data anyway. Hence succinct data structures can provide additional operations with limited space overhead.\nIt turns out that strings admit succinct indices, which do not take much more space than the string itself, but allow for O(k) substring search, where k is the length of the substring. Usually, this is much shorter, and this considerably improves search times. Cello provide such indices and many other related string operations.\nAn example of usage would be:\n```let\n  x = someLongString\n  pattern = someShortString\n  index = searchIndex(x)\n  positions = index.search(pattern)\necho positions```\nMany intermediate data structures are constructed to provide such indices, though, and as they may be of independent interest, we describe them in the following.\nNotice that a string here just stands for a (usually very long) sequence of symbols taken from a (usually small) alphabet. Prototypical examples include\n* genomic data, where the alphabet is A, C, G, T or\n* time series, where each value is represented by a symbol, such as HIGH, MEDIUM, LOW, or UP, DOWN\nwhere only two values are available, it is often convenient to store the data as bit sequences to save space.\nAt the moment all operations are implemented on\n`type AnyString = string or seq[char] or Spill[char]`\nwhere spills are just memory-mapped sequences. The library may become generic in the future, although this is not a priority.\nNotice that Cello is not Unicode-aware: think more of searching large genomic strings or symbolized time series, rather then using it for internationalized text, although I may consider Unicode operations in the future.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "chebyshev",
    "description": "Chebyshev approximation.",
    "tags": [
      "math",
      "approximation",
      "numerical"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jxy/chebyshev",
    "url": "https://github.com/jxy/chebyshev",
    "long_description": "Chebyshev approximation in Nim\nThis module implements Chebyshev polynomial approximation to an\ninterval of a function.  The approximation works for a single\nvariable, and also for large scale sparse matrix operations as\nwell.\nUser has to define a set of operations, specifically, apply,\nassign, and newOneOf, to be able to use the interface. When\nconcept in Nim matures, we will use concept to enforce those.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "chipmunk6",
    "description": "Bindings for Chipmunk2D 6.x physics library",
    "tags": [
      "library",
      "physics",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nimrod-chipmunk",
    "url": "https://github.com/fowlmouth/nimrod-chipmunk/",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "chipmunk7_demos",
    "description": "Chipmunk7 demos for Nim",
    "tags": [
      "demos",
      "physics",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/matkuki/chipmunk7_demos",
    "url": "https://github.com/matkuki/chipmunk7_demos/",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "chroma",
    "description": "Everything you want to do with colors.",
    "tags": [
      "colors",
      "cmyk",
      "hsl",
      "hsv"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/chroma",
    "url": "https://github.com/treeform/chroma",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Video",
      "Image"
    ]
  },
  {
    "name": "chronicles",
    "description": "A crafty implementation of structured logging for Nim",
    "tags": [
      "logging",
      "json"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-chronicles",
    "url": "https://github.com/status-im/nim-chronicles",
    "long_description": "Chronicles is a library for structured logging. It adheres to the philosophy that log files shouldn't be based on formatted text strings, but rather on well-defined event records with arbitrary properties that are easy to read for both humans and machines.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "chrono",
    "description": "Calendars, Timestamps and Timezones utilities.",
    "tags": [
      "library",
      "timestamp",
      "calendar",
      "timezone"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/chrono",
    "url": "https://github.com/treeform/chrono",
    "long_description": "Chrono a Timestamps, Calendars, and Timezones library for nim.\n* Works in c as well as in javascript!\n* All calendar manipulations!\n* Include only the timezones and years you need!",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "chronos",
    "description": "An efficient library for asynchronous programming",
    "tags": [
      "library",
      "networking",
      "async",
      "asynchronous",
      "eventloop",
      "timers",
      "sendfile",
      "tcp",
      "udp"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-chronos",
    "url": "https://github.com/status-im/nim-chronos",
    "long_description": "Chronos is an efficient library for asynchronous programming and an alternative to Nim's asyncdispatch.\nCore differences between the standard library asyncdispatch and Chronos:\n* Unified callback type `CallbackFunc`\n* The order of `Future[T]` completion callbacks\n* Changed the behavior of OS descriptor event callbacks\n* Removed the default timeout value for the poll() procedure, which allows incorrect usage of asyncdispatch and produces 500-ms timeouts in correct usage.\n* Changed the behavior of the scheduler in the poll() procedure.\n* Chronos no longer uses `epochTime()`.\n* Removed all IO primitives from the public API.\n* Introduced an `addTimer()` / `removeTimer()` callback interface.\n* Introduced `removeReader()` for `addReader()` and `removeWriter()` for `addWriter()`.\n* Changed the behavior of the `addReader()`, `addWriter()`, and `addTimer()` callbacks.\n* Added the support for the cross-platform `sendfile()` operation.\n* Removed the expensive `AsyncEvent` and the support for hardware timers and `addProcess`.\n* Added cheap synchronization primitives.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "circleci_client",
    "description": "CircleCI API client",
    "tags": [
      "circleci",
      "client"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-circleci",
    "url": "https://github.com/FedericoCeratto/nim-circleci",
    "long_description": "Client for the CircleCI API v1",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "cirru-parser",
    "description": "Parser for Cirru syntax",
    "tags": [
      "parser",
      "cirru"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Cirru/parser.nim",
    "url": "https://github.com/Cirru/parser.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "cittadino",
    "description": "A simple PubSub framework using STOMP.",
    "tags": [
      "pubsub",
      "stomp",
      "rabbitmq",
      "amqp"
    ],
    "license": "BSD2",
    "method": "git",
    "web": "https://github.com/makingspace/cittadino",
    "url": "https://github.com/makingspace/cittadino",
    "long_description": "cittadino is a simple, small library that implements a pubsub system over STOMP.\nIt exposes a single main object type, `PubSub`, with its constructor, `newPubSub()`, which provides two main procs: `publishModelEvent()` and `subscribe()`. These procedures take care of publishing and subscribing, respectively. Subscriber procedures can be registered with `subscribe()` to certain AMQP/STOMP-style topic patterns, and arbitrary JSON messages can be sent to routing keys with `publishModelEvent()`.\nIn order to process incoming events, call `run()` inside of a process. That process will loop and block, waiting for incoming messages. Any topics that match the patterns that were registered with `subscribe()` will have their messages passed to the handler procedures.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Algorithms"
    ]
  },
  {
    "name": "classy",
    "description": "typeclasses for Nim",
    "tags": [
      "library",
      "typeclasses",
      "macros"
    ],
    "license": "Unlicense",
    "method": "git",
    "web": "https://github.com/nigredo-tori/classy",
    "url": "https://github.com/nigredo-tori/classy",
    "long_description": "Provides ability to define and instantiate haskell-like typeclasses in Nim. Allows to instantiate collections of functions for a given type or type constructor.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "clblast",
    "description": "Wrapper for CLBlast, an OpenCL BLAS library",
    "tags": [
      "BLAS",
      "linear",
      "algebra",
      "vector",
      "matrix",
      "opencl",
      "high",
      "performance",
      "computing",
      "GPU",
      "wrapper"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/numforge/nim-clblast",
    "url": "https://github.com/numforge/nim-clblast",
    "long_description": "Nim CLBlast is a wrapper for CLBlast, an OpenCL BLAS library.\nThe wrapper exposes:\n* the core CLBlast API, this requires dealing with low-level opencl like memory allocation.\n* the Netlib API that can be used as a drop-in replacement to classic BLAS libraries like OpenBLAS (or nimblas in Nim case). This doesn't require any OpenCL knowledge or setup, everything is handled by CLBlast, however each function call will require a copy of input to the OpenCL device and a copy of the result from the OpenCL device.\nA check template is provided to automatically check the error return values of all CLBlast calls.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "clibpp",
    "description": "Easy way to 'Mock' C++ interface",
    "tags": [
      "import",
      "C++",
      "library",
      "wrap"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/onionhammer/clibpp",
    "url": "https://github.com/onionhammer/clibpp.git",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI"
    ]
  },
  {
    "name": "cligen",
    "description": "Infer & generate command-line interace/option/argument parsers",
    "tags": [
      "library",
      "command-line",
      "arguments",
      "switches",
      "parsing",
      "options"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/c-blake/cligen",
    "url": "https://github.com/c-blake/cligen.git",
    "long_description": "cligen: A Native API-Inferred Command-Line Interface Generator For Nim\nThis approach to CLIs was inspired by Andrey Mikhaylenko's nice Python module 'argh'. The basic idea is that proc signatures encode/declare almost everything needed to generate a CLI - names, types, and default values. A little reflection/introspection then suffices to generate a parser-dispatcher that translates a `seq[string]` command input into calls of a wrapped proc. In Nim, adding a CLI can be as easy as adding one line of code.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "cliptomania",
    "description": ".NET-inspired lightweight clipboard library",
    "tags": [
      "clip",
      "clipboard"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Guevara-chan/Cliptomania",
    "url": "https://github.com/Guevara-chan/Cliptomania",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "closure_compiler",
    "description": "Bindings for Closure Compiler web API.",
    "tags": [
      "binding",
      "closure",
      "compiler",
      "javascript"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/closure_compiler",
    "url": "https://github.com/yglukhov/closure_compiler.git",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": []
  },
  {
    "name": "clr",
    "description": "Get information about colors and convert them in the command line",
    "tags": [
      "command-line",
      "color",
      "rgb",
      "hsl",
      "hsv"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Calinou/clr",
    "url": "https://github.com/Calinou/clr",
    "long_description": "Get information about colors and convert them in the command line.\nUse cases:\n* As HSL colors are easier to reason about by humans, you want to use an HSL color in software that only accepts RGB colors or hexadecimal color codes.\n* You want to perform color manipulation to derive a color scheme from a base color.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "cmake",
    "description": "CMake for Nimble",
    "tags": [
      "cmake",
      "build",
      "tool",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/cmake",
    "url": "https://github.com/genotrance/cmake",
    "long_description": "This packge simply installs CMake using Nimble so that it is easy to work with C/C++ libraries that require CMake to build.\nThis is primarily for Windows. Linux has package managers and MacOSX has brew.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "cmd",
    "description": "interactive command prompt",
    "tags": [
      "cmd",
      "command-line",
      "prompt",
      "interactive"
    ],
    "license": "BSD 3-Clause",
    "method": "git",
    "web": "https://github.com/samdmarshall/cmd.nim",
    "url": "https://github.com/samdmarshall/cmd.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "cmixer",
    "description": "Lightweight audio mixer for games",
    "tags": [
      "library",
      "audio",
      "mixer",
      "sound",
      "wav",
      "ogg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rxi/cmixer-nim",
    "url": "https://github.com/rxi/cmixer-nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "cmixer_sdl2",
    "description": "Lightweight audio mixer for SDL2",
    "tags": [
      "library",
      "audio",
      "mixer",
      "sound",
      "wav",
      "ogg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rxi/cmixer_sdl2-nim",
    "url": "https://github.com/rxi/cmixer_sdl2-nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "coalesce",
    "description": "A nil coalescing operator ?? for Nim",
    "tags": [
      "nil",
      "null",
      "options",
      "operator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/piedar/coalesce",
    "url": "https://github.com/piedar/coalesce",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "cobs",
    "description": "Consistent Overhead Byte Stuffing for Nim",
    "tags": [
      "serialization",
      "encoding",
      "wireline",
      "framing",
      "cobs"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/keyme/nim_cobs",
    "url": "https://github.com/keyme/nim_cobs",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "coco",
    "description": "Code coverage CLI + library for Nim using LCOV",
    "tags": [
      "code",
      "coverage",
      "test"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/samuelroy/coco",
    "url": "https://github.com/samuelroy/coco",
    "doc": "https://samuelroy.github.io/coco/",
    "long_description": "Code coverage for Nim using LCOV.\nFeatures:\n* Line & Branch coverage support\n* Forwards nim compiler options\n* Works out-of-the box with Nim unittests\n* API + CLI\n* HTML report",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "collections",
    "description": "Various collections and utilities",
    "tags": [
      "iterator",
      "functional"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zielmicha/collections.nim",
    "url": "https://github.com/zielmicha/collections.nim",
    "long_description": "collections.nim is a collections of utilities and datastructures for Nim language.\n* Language extensions\n* Utilities\n* Data structures",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "colorcol",
    "description": "Kakoune plugin for color preview",
    "tags": [
      "kakoune",
      "plugin",
      "color",
      "preview"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/colorcol",
    "url": "https://github.com/SolitudeSF/colorcol",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "colorize",
    "description": "A simple and lightweight terminal coloring library.",
    "tags": [
      "color",
      "colors",
      "colorize"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/molnarmark/colorize",
    "url": "https://github.com/molnarmark/colorize",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "colorsys",
    "description": "Convert between RGB, YIQ, HLS, and HSV color systems.",
    "tags": [
      "library",
      "colors",
      "rgb",
      "yiq",
      "hls",
      "hsv"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-colorsys",
    "url": "https://github.com/achesak/nim-colorsys",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "combparser",
    "description": "A parser combinator library for easy generation of complex parsers",
    "tags": [
      "parser",
      "combinator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/combparser",
    "url": "https://github.com/PMunch/combparser",
    "long_description": "combparser\nThis library implements what is known as a parser combinator system. The idea behind this is to define your language by writing small, composable parsers and combining them into a larger logic. It was written mainly for the protobuf library which needed a parser that could run on compile-time to parse the protobuf specification. The original idea came from a small example library written by kmizu: https://gist.github.com/kmizu/2b10c2bf0ab3eafecc1a825b892482f3 but has been extensively rewritten with more matchers, more combinators, and proper error handling. It still has some way to go to be the user-friendly parser library it was indented to be, but it works well enough for now. For some examples on how to use the library see the examples folder. Most of the combinators have been written to accept not only string input and output, but any type. This means that this library could theoretically be used to parse not only string data but other types of data as well. Currently however the error reporting is only string based, but an alternate system is being considered.",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "commandeer",
    "description": "Provides a small command line parsing DSL (domain specific language)",
    "tags": [
      "library",
      "command-line",
      "arguments",
      "switches",
      "parsing",
      "options"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fenekku/commandeer",
    "url": "https://github.com/fenekku/commandeer",
    "long_description": "Take command of your command line.\nCommandeer gets data from the command line to your variables and exits gracefully if there is any issue.\nIt does this little thing well and lets you deal with the rest.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "compactdict",
    "description": "A compact dictionary implementation",
    "tags": [
      "dictionary",
      "hashtable",
      "data-structure",
      "hash",
      "compact"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LemonBoy/compactdict",
    "url": "https://github.com/LemonBoy/compactdict",
    "long_description": "A compact dictionary implementation kindly borrowed from Python.\n* The insertion order is preserved\n* No need to initialize the Dict object before using it\n* More memory efficient for small & medium sized collections\n* Same API as stdlib's Table",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "compiler",
    "description": "Compiler package providing the compiler sources as a library.",
    "tags": [
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/Nim",
    "url": "https://github.com/nim-lang/Nim.git",
    "long_description": "Efficient, expressive, elegant\nNim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula.\n1. Efficient\n* Nim generates native dependency-free executables, not dependent on a virtual machine, which are small and allow easy redistribution.\n* The Nim compiler and the generated executables support all major platforms like Windows, Linux, BSD and macOS.\n* Fast deferred reference counting memory management that supports real-time systems.\n* Modern concepts like zero-overhead iterators and compile-time evaluation of user-defined functions, in combination with the preference of value-based datatypes allocated on the stack, lead to extremely performant code.\n* Support for various backends: it compiles to C, C++ or JavaScript so that Nim can be used for all backend and frontend needs.\n2. Expressive\n* Nim is self-contained: the compiler and the standard library are implemented in Nim.\n* Nim has a powerful macro system which allows direct manipulation of the AST, offering nearly unlimited opportunities.\n3. Elegant\n* Macros cannot change Nim's syntax because there is no need for it — the syntax is flexible enough.\n* Modern type system with local type inference, tuples, generics and sum types.\n* Statements are grouped by indentation but can span multiple lines.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 4,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "complex",
    "description": "The ex-stdlib module complex.",
    "tags": [
      "graveyard",
      "complex",
      "math"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/complex",
    "url": "https://github.com/nim-lang/graveyard?subdir=complex",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "*Dead*",
      "Maths"
    ]
  },
  {
    "name": "configparser",
    "description": "pure Ini configurations parser",
    "tags": [
      "configparser",
      "ini",
      "parser"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/nim-configparser",
    "url": "https://github.com/xmonader/nim-configparser",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "confutils",
    "description": "Simplified handling of command line options and config files",
    "tags": [
      "library",
      "configuration"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-confutils",
    "url": "https://github.com/status-im/nim-confutils",
    "long_description": "Confutils is a library that aims to solve the configuration problem with a holistic approach. The run-time configuration of a program is described as a plain Nim object type from which the library automatically derives the code for handling command-line options, configuration files and other platform-specific sources such as the Windows registry.\nThe library focuses on providing a lot of compile-time configurability and extensibility with a strong adherence to the DRY principle.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "conio",
    "description": ".NET-inspired lightweight terminal library",
    "tags": [
      "console",
      "terminal",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/guevara-chan/conio",
    "url": "https://github.com/guevara-chan/conio",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "constants",
    "description": "Mathematical numerical named static constants useful for different disciplines",
    "tags": [
      "math",
      "physics",
      "chemistry",
      "biology",
      "engineering",
      "science"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-constants",
    "url": "https://github.com/juancarlospaco/nim-constants",
    "long_description": "Mathematical numerical named static constants useful for different disciplines (math, physics, chemistry, biology, engineering, data science, IT, hobby, etc).",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Miscellaneous"
    ]
  },
  {
    "name": "consul",
    "description": "A simple interface to a running Consul agent.",
    "tags": [
      "consul"
    ],
    "license": "BSD2",
    "method": "git",
    "web": "https://github.com/makingspace/nim_consul",
    "url": "https://github.com/makingspace/nim_consul",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Cloud"
    ]
  },
  {
    "name": "contra",
    "description": "Lightweight Contract Programming, Design by Contract, on 9 LoC, NimScript, JavaScript, compile-time.",
    "tags": [
      "contract",
      "nimscript",
      "javascript",
      "compiletime"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-contra",
    "url": "https://github.com/juancarlospaco/nim-contra",
    "long_description": "* Design By Contract\n* Hardened mode\n* Changing Immutable Variables",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "contracts",
    "description": "Design by Contract (DbC) library with minimal runtime.",
    "tags": [
      "library",
      "pure",
      "contract",
      "contracts",
      "DbC",
      "utility",
      "automation",
      "documentation",
      "safety",
      "test",
      "tests",
      "testing",
      "unittest"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Udiknedormin/NimContracts",
    "url": "https://github.com/Udiknedormin/NimContracts",
    "long_description": "This module is used to make contracts – elegant promises that pieces of code will fulfill certain conditions.\nContracts are essentially value counterparts of type-based concepts, generic bounds, type attributes (e.x. not nil) etc. While they work similarly to assertions, as they throw exceptions when broken, main reasons for using contracts include elegance of code, clarity of exception messages, intuitive semantics and ease of analysis, both for human and external tools.\nAs usage of this module isn't typical and some extra rules are applied, aside from documentation for each of module's elements the description of the module as a whole is included.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "controlStructures",
    "description": "Additional control structures",
    "tags": [
      "library",
      "control",
      "structure"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://htmlpreview.github.io/?https://github.com/TakeYourFreedom/Additional-Control-Structures-for-Nim/blob/master/controlStructures.html",
    "url": "https://github.com/TakeYourFreedom/Additional-Control-Structures-for-Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "coverage",
    "description": "Code coverage library",
    "tags": [
      "code",
      "coverage"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/coverage",
    "url": "https://github.com/yglukhov/coverage",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "coverartarchive",
    "description": "Cover Art Archive API wrapper",
    "tags": [
      "library",
      "wrapper",
      "cover art",
      "music",
      "metadata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-coverartarchive",
    "url": "https://github.com/achesak/nim-coverartarchive",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "cppstl",
    "description": "Bindings for the C++ Standard Template Library (STL)",
    "tags": [
      "c++",
      "stl",
      "bindings"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/BigEpsilon/nim-cppstl",
    "url": "https://github.com/BigEpsilon/nim-cppstl",
    "long_description": "Nim bindings for the C++ STL\nThis library is an attempt at wrapping some of the C++ Standard Template Library (STL). This library is NOT intended to replace the Nim standard library nor to be used in normal Nim code.\nThis library is obviously only compatible with the C++ backend\nI recommand using this bindings only in two cases:\nWhen wrapping a C++ library (But make sure to offer a Nim idomatic API that does not expose the STL to the user if possible).\nIn some performance critical code where the cost of converting Nim types to c++ types is problematic (like embeded devices).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI"
    ]
  },
  {
    "name": "crap",
    "description": "`rm` files without fear",
    "tags": [
      "rm",
      "delete",
      "trash",
      "files"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/icyphox/crap",
    "url": "https://github.com/icyphox/crap",
    "doc": " ",
    "long_description": "`rm` files without fear\nWhy?\nEver `rm`ed a file and instantly regretted it? Fear not, for crap is here.\nHow?\ncrap follows the FreeDesktop.org Trash spec. So instead of perma-deleting your file, crap moves it to the `$XDG_DATA_HOME/Trash` folder. If this environment variable isn't set, it defaults to `~/.local/share/Trash`.\nAnd obviously, this works only on Linux.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "crc32",
    "description": "CRC32, 2 proc, copied from RosettaCode.",
    "tags": [
      "crc32",
      "checksum",
      "minimalism"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-crc32",
    "url": "https://github.com/juancarlospaco/nim-crc32",
    "long_description": "CRC32 for Nim, 2 proc, copied from RosettaCode, because I cant find a package for it, and want DRY, I dont want to repeat the same code over and over on several projects. Its just a proc so no much to document about it, just pass the thingy you want to do CRC.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "criterion",
    "description": "Statistic-driven microbenchmark framework",
    "tags": [
      "benchmark"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LemonBoy/criterion.nim",
    "url": "https://github.com/LemonBoy/criterion.nim",
    "long_description": "A statistics-driven micro-benchmarking framework heavily inspired by the wonderful criterion library for Haskell.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "crosscompile",
    "description": "Crosscompile Nim source code into multiple targets on Linux with this proc.",
    "tags": [
      "crosscompile",
      "compile"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-crosscompile",
    "url": "https://github.com/juancarlospaco/nim-crosscompile",
    "long_description": "Crosscompile Nim source code into multiple targets on Linux with this proc.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "csfml",
    "description": "Bindings for Simple and Fast Multimedia Library (through CSFML)",
    "tags": [
      "sfml",
      "binding",
      "game",
      "media",
      "library",
      "opengl"
    ],
    "license": "zlib",
    "method": "git",
    "web": "https://github.com/oprypin/nim-csfml",
    "url": "https://github.com/oprypin/nim-csfml",
    "long_description": "Nim Bindings to Simple and Fast Multimedia Library (through CSFML).",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Games",
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "css_html_minify",
    "description": "HTML & CSS Minify Lib & App based on Regexes & parallel MultiReplaces",
    "tags": [
      "css",
      "html",
      "minify"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-css-html-minify",
    "url": "https://github.com/juancarlospaco/nim-css-html-minify",
    "long_description": "HTML & CSS Minify Lib & App based on Regexes & parallel MultiReplaces.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "csv",
    "description": "Library for parsing, stringifying, reading, and writing CSV (comma separated value) files",
    "tags": [
      "csv",
      "parsing",
      "stringify",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-csv",
    "url": "https://github.com/achesak/nim-csv",
    "long_description": "nim-csv is a Nim module for working with CSV (comma separated values) files.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "csv2json",
    "description": "Convert CSV files to JSON",
    "tags": [
      "csv",
      "json"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-csv2json",
    "url": "https://github.com/achesak/nim-csv2json",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "csvql",
    "description": "csvql.",
    "tags": [
      "csv",
      "read",
      "ansisql",
      "query",
      "database",
      "files"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Bennyelg/csvql",
    "url": "https://github.com/Bennyelg/csvql",
    "long_description": "Query You'r CSVs data like a boss. Query over CSV with simple AnsiSQL.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "csvtable",
    "description": "tools for handling CSV files (comma or tab-separated) with an API similar to Python's CSVDictReader and -Writer.",
    "tags": [
      "csv",
      "table"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/apahl/csvtable",
    "url": "https://github.com/apahl/csvtable",
    "long_description": "Tools for handling CSV files (comma or tab-separated) with an API similar to Python's CSVDictReader and -Writer. The values in the rows are assigned to tables as values where the keys are the corresponding headers.\nPlease note: version 0.3.0 changes the API, have a look at the example and the doc. For the old API. use releases <0.3.0.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "csvtools",
    "description": "Manage CSV files",
    "tags": [
      "CSV",
      "comma separated values",
      "TSV"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/csvtools",
    "url": "https://github.com/unicredit/csvtools",
    "long_description": "Manage CSV files easily in Nim.\nThe aim is to be able to transform CSV files into typed iterators, infering layout of things like dates and number where possible, with minimal user intervention.\nIn this preliminary version, english locale is assumed for numbers and layout of dates must be specified. Still, the automatic typed deserialization is already quite handy.\nA symmetric API exists for writing typed sequences into CSV files.\nThe conversion from an object of type T into a sequence of strings - or viceversa the transformation from a sequence of strings into a T - is handled by a macro. This macro assumes that T is a flat type, meaning that its members are either numbers, dates (TimeInfo) or strings.\nThe library is updated on Nim devel. For Nim up to 0.13, use version 0.1.0 of csvtools.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "ctrulib",
    "description": "ctrulib wrapper",
    "tags": [
      "library",
      "nintendo",
      "3ds"
    ],
    "license": "GPLv2",
    "method": "git",
    "web": "https://github.com/skyforce77/ctrulib-nim",
    "url": "https://github.com/skyforce77/ctrulib-nim.git",
    "long_description": "ctrulib - CTR User Library\nLibrary for writing user mode ARM11 code for the 3DS (CTR)\nThis library aims to provide the foundations necessary to write 3DS Homebrew, and straightforwardly access the different functionalities provided by the 3DS operating system. It is not meant to provide higher level functions; to put things in perspective, the purpose of libctru would be to sit between the OS and a possible port of SDL rather than replace it.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "cucumber",
    "description": "implements the cucumber BDD framework in the nim language",
    "tags": [
      "testing",
      "cucumber",
      "bdd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/shaunc/cucumber_nim",
    "url": "https://github.com/shaunc/cucumber_nim",
    "long_description": "Cucumber_nim\nImplements the cucumber BDD testing framework in and for the nim programming language.\nCucumber \".feature\" files (written in the \"gherkin\" language) allow tests to be organized around features, which document the goals functionality of code in terms of a short English description and a a number of scenarios, each containing a number of steps, all of which are written in English, subject to a few rules.\nTo implement tests for a feature, a developer writes step definitions, which associate the code to implement steps with the specification of the step via a regular expression.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "currying",
    "description": "Currying library for Nim",
    "tags": [
      "library",
      "functional",
      "currying"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/t8m8/currying",
    "url": "https://github.com/t8m8/currying",
    "long_description": "This package is a simple currying library for Nim.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "d3",
    "description": "A D3.js wrapper for Nim",
    "tags": [
      "d3",
      "javascript",
      "library",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/hiteshjasani/nim-d3",
    "url": "https://github.com/hiteshjasani/nim-d3",
    "long_description": "Nim Foreign Function Interface (FFI) bindings to d3.js.\nThis is in development and there is still a lot to be written. There is the ability to create a simple graph today.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Reporting"
    ]
  },
  {
    "name": "daemon",
    "description": "Cross-platform process daemonization library",
    "tags": [
      "servers",
      "daemonization"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-daemon",
    "url": "https://github.com/status-im/nim-daemon",
    "long_description": "This closs-platform library is used to daemonize processes: that is, make them run in the background and independently of the terminal. The library is used to develop Unix daemons and background processes on Windows.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "daemonim",
    "description": "daemonizer for Unix, Linux and OS X",
    "tags": [
      "unix",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bung87/daemon",
    "url": "https://github.com/bung87/daemon",
    "long_description": "daemonim\nThis package that will daemonize your program so it can continue running in the background. It works on Unix, Linux and OS X, creates a PID file and has standard commands (start, stop, restart).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "daemonize",
    "description": "This library makes your code run as a daemon process on Unix-like systems",
    "tags": [
      "daemonize",
      "background",
      "fork",
      "unix",
      "linux",
      "process"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/daemonize.nim",
    "url": "https://github.com/OpenSystemsLab/daemonize.nim",
    "long_description": "This library makes your code run as a daemon process on Unix-like systems.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "dali",
    "description": "Indie assembler/linker for Android's Dalvik VM .dex & .apk files",
    "tags": [
      "android",
      "apk",
      "dalvik",
      "dex",
      "assembler"
    ],
    "license": "AGPL-3.0",
    "method": "git",
    "web": "https://github.com/akavel/dali",
    "url": "https://github.com/akavel/dali",
    "long_description": "dali — an indie assembler/linker for Dalvik VM .dex & .apk files (Work In Progress)",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "dashing",
    "description": "Terminal dashboards.",
    "tags": [
      "library",
      "pure",
      "terminal"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-dashing",
    "url": "https://github.com/FedericoCeratto/nim-dashing",
    "long_description": "Dashing is a library to quickly create terminal-based dashboards in Nim.\nDashing provides high-level components: vertical and horizontal charts, gauges, log panes, text windows and screen splitting. It’s built on top of the terminal module.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "datetime2human",
    "description": "Human friendly DateTime string representations, seconds to millenniums.",
    "tags": [
      "date",
      "time",
      "datetime",
      "ISO-8601",
      "human",
      "minimalism"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-datetime2human",
    "url": "https://github.com/juancarlospaco/nim-datetime2human",
    "long_description": "Calculate date & time with precision from seconds to millenniums. Human friendly date time as string. ISO-8601.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "db",
    "description": "Unified db access module, providing a single library module to access the db_sqlite, db_mysql and db_postgres modules.",
    "tags": [
      "wrapper",
      "database",
      "module",
      "sqlite",
      "mysql",
      "postgres",
      "db_sqlite",
      "db_mysql",
      "db_postgres"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jlp765/db",
    "url": "https://github.com/jlp765/db",
    "long_description": "Unified db access module\nThe DB module provides a single library module to access the `db_sqlite`, `db_mysql` and `db_postgres` modules.\nIt adds one extra proc, `initDb()`.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "db_clickhouse",
    "description": "ClickHouse Nim interface",
    "tags": [
      "wrapper",
      "database",
      "clickhouse"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/leonardoce/nim-clickhouse",
    "url": "https://github.com/leonardoce/nim-clickhouse",
    "long_description": "This package let's you use the Clickhouse analytical database from the Nim language, using an interface similar to the ones provided for SQLite and for PostgreSQL.\nIt contains only pure Nim code and doesn't require any external library.\nInternally, it uses the HTTP interface of Clickhouse, since the TCP transport is not meant to be used by client applications but only for cross-engine communications.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "db_presto",
    "description": "prestodb simple connector",
    "tags": [
      "prestodb",
      "connector",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Bennyelg/nimPresto",
    "url": "https://github.com/Bennyelg/nimPresto",
    "long_description": "Simple presto-db connector using nim.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "dbg",
    "description": "dbg template; in debug echo",
    "tags": [
      "template",
      "echo",
      "dbg",
      "debug"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/enthus1ast/nimDbg",
    "url": "https://github.com/enthus1ast/nimDbg",
    "long_description": "\"dbg\" template; in debug echo",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "dbschema",
    "description": "Database schema migration library for Nim language.",
    "tags": [
      "library",
      "database",
      "db"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/dbschema",
    "url": "https://github.com/vegansk/dbschema",
    "long_description": "Database schema migration library for Nim language.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "dbus",
    "description": "dbus bindings for Nim",
    "tags": [
      "dbus"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zielmicha/nim-dbus",
    "url": "https://github.com/zielmicha/nim-dbus",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "delaunay",
    "description": "2D Delaunay triangulations",
    "tags": [
      "delaunay",
      "library",
      "algorithms",
      "graph"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Nycto/DelaunayNim",
    "url": "https://github.com/Nycto/DelaunayNim",
    "long_description": "A Nim library for calculating the Delaunay Triangulation of a set of points. This is accomplished using a divide and conquer algorithm, as described in http://www.geom.uiuc.edu/~samuelp/del_project.html.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "des",
    "description": "3DES native library for Nim",
    "tags": [
      "library",
      "encryption",
      "crypto"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LucaWolf/des.nim",
    "url": "https://github.com/LucaWolf/des.nim",
    "long_description": "This is a Nim port of a C-based DES implementation. It implements single, double and triple DES operations with support for basic data padding. DUKPT simple key management (PEK is cached, not holding the future keys array) with encrypt/decrypt and MAC operations also supported.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "dialogs",
    "description": "wraps GTK+ or Windows' open file dialogs",
    "tags": [
      "library",
      "ui",
      "gui",
      "dialog",
      "file"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/dialogs",
    "url": "https://github.com/nim-lang/dialogs",
    "long_description": "This module implements portable dialogs for Nim; the implementation builds on the GTK interface. On Windows, native dialogs are shown instead.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "directnimrod",
    "description": "Wrapper for microsoft's DirectX libraries",
    "tags": [
      "library",
      "wrapper",
      "graphics",
      "windows"
    ],
    "license": "MS-PL",
    "method": "git",
    "web": "https://bitbucket.org/barcharcraz/directnimrod",
    "url": "https://bitbucket.org/barcharcraz/directnimrod",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "discordnim",
    "description": "Discord library for Nim",
    "tags": [
      "library",
      "discord"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Krognol/discordnim",
    "url": "https://github.com/Krognol/discordnim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "dnsclient",
    "description": "Simple DNS Client & Library",
    "tags": [
      "dns",
      "dnsclient"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/dnsclient.nim",
    "url": "https://github.com/ba0f3/dnsclient.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "docopt",
    "description": "Command-line args parser based on Usage message",
    "tags": [
      "command-line",
      "arguments",
      "parsing",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/docopt/docopt.nim",
    "url": "/usr/lib64/nim/lib/pure/collections/critbits.nim(60,",
    "long_description": "This is a port of docopt to Nim. Visit docopt.org for more information.\nThe option parser is generated based on the docstring above that is passed to `docopt` function. `docopt` parses the usage pattern (\"Usage: ...\") and option descriptions (lines starting with dash \"-\") and ensures that the program invocation matches the usage pattern; it parses options, arguments and commands based on that. The basic idea is that a good help message has all necessary information in it to make a parser.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "dotenv",
    "description": "Loads environment variables from `.env`.",
    "tags": [
      "env",
      "dotenv",
      "configuration",
      "environment"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/dotenv.nim",
    "url": "https://github.com/euantorano/dotenv.nim",
    "long_description": "dotenv implementation for Nim. Loads environment variables from `.env`\nStoring configuration in the environment is one of the tenets of a twelve-factor app. Anything that is likely to change between deployment environments–such as resource handles for databases or credentials for external services–should be extracted from the code into environment variables.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "dpdk",
    "description": "Library for fast packet processing",
    "tags": [
      "library",
      "dpdk",
      "packet",
      "processing"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "http://dpdk.org/",
    "url": "https://github.com/nimscale/dpdk",
    "long_description": "How to setup a test bed for developing Nim DPDK applications.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "drand48",
    "description": "Nim implementation of the standard unix drand48 pseudo random number generator",
    "tags": [
      "random",
      "number",
      "generator"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/JeffersonLab/drand48",
    "url": "https://github.com/JeffersonLab/drand48",
    "long_description": "Nim implementation of the standard unix drand48 pseudo random number generator.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "drawille",
    "description": "Drawing in terminal with Unicode Braille characters.",
    "tags": [
      "drawile",
      "terminal",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/drawille-nim",
    "url": "https://github.com/PMunch/drawille-nim",
    "long_description": "Drawing in terminal with Unicode Braille characters. This is the Nim version of the Python original.\nDrawille is a way to draw pixel graphics in the terminal with higher resolution than the size of a single character. It works by using the 2x4 unicode braille characters. This means that each character can be used to draw a 2x4 section of an image as long as your font supports it. The name and idea comes from https://github.com/asciimoo/drawille however not all functions from there are implemented while some new functionality is added.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "dropbox_filename_sanitizer",
    "description": "Tool to clean up filenames shared on Dropbox",
    "tags": [
      "dropbox"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/dropbox_filename_sanitizer/",
    "url": "https://github.com/Araq/dropbox_filename_sanitizer/",
    "long_description": "This little command line program displays and/or mangles the specified files to conform to characters allowed to synchronize correctly on Dropbox. I wrote this after having files shared with people and much later learning they weren't even getting them!",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "dtoa",
    "description": "Port of Milo Yip's fast dtoa() implementation",
    "tags": [
      "algorithms",
      "serialization",
      "fast",
      "grisu",
      "dtoa",
      "double",
      "float",
      "string"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LemonBoy/dtoa.nim",
    "url": "https://github.com/LemonBoy/dtoa.nim",
    "long_description": "Convert a double value to a string.\nA straightforward port of Milo Yip's fast dtoa implementation used in RapidJson.\nThis implementation is tailored for speed and uses Grisu2 as its underlying algorithm: this means that there's a small where the output won't be represented in its most compact form.\nThe resulting string is guaranteed to round-trip.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "duktape",
    "description": "wrapper for the Duktape embeddable Javascript engine",
    "tags": [
      "js",
      "javascript",
      "scripting",
      "language",
      "interpreter"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/manguluka/duktape-nim",
    "url": "https://github.com/manguluka/duktape-nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI"
    ]
  },
  {
    "name": "easings",
    "description": "Robert Penner Easing Functions for Nim",
    "tags": [
      "easings",
      "maths"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-easings",
    "url": "https://github.com/juancarlospaco/nim-easings",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "eastasianwidth",
    "description": "eastasianwidth is library for EastAsianWidth.",
    "tags": [
      "library",
      "text",
      "east_asian_width"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/eastasianwidth",
    "url": "https://github.com/jiro4989/eastasianwidth",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "easy_bcrypt",
    "description": "A simple wrapper providing a convenient reentrant interface for the bcrypt password hashing algorithm.",
    "tags": [
      "hash",
      "crypto",
      "password",
      "bcrypt"
    ],
    "license": "CC0",
    "method": "git",
    "url": "https://github.com/Akito13/easy-bcrypt.git",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "easymail",
    "description": "wrapper for the sendmail command",
    "tags": [
      "email",
      "sendmail",
      "net",
      "mail"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/coocheenin/easymail",
    "url": "https://github.com/coocheenin/easymail",
    "long_description": "EasyMail is a simple wrapper for the sendmail command. It's provides the easiest way for sending emails from your binaries in Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "ed25519",
    "description": "ed25519 key crypto bindings",
    "tags": [
      "ed25519",
      "cryptography",
      "crypto",
      "publickey",
      "privatekey",
      "signing",
      "keyexchange",
      "native"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/niv/ed25519.nim",
    "url": "https://github.com/niv/ed25519.nim",
    "long_description": "This just implements the ed25519 bindings, implementing the code from https://github.com/orlp/ed25519/.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "edn",
    "description": "EDN and Clojure parser",
    "tags": [
      "edn",
      "clojure"
    ],
    "license": "EPL-2.0",
    "method": "git",
    "web": "https://github.com/rosado/edn.nim",
    "url": "https://github.com/rosado/edn.nim",
    "long_description": "A Clojure and EDN parser library written in Nim.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "egl",
    "description": "Bindings for EGL, the native platform interface for rendering APIs.",
    "tags": [
      "binding",
      "khronos",
      "egl",
      "opengl",
      "opengl es",
      "openvg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/egl",
    "url": "https://github.com/nimious/egl.git",
    "long_description": "This project contains bindings to Khronos EGL for the Nim programming language. EGL is an interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Video",
      "Image"
    ]
  },
  {
    "name": "einheit",
    "description": "Pretty looking, full featured, Python-inspired unit test library.",
    "tags": [
      "unit",
      "tests",
      "unittest",
      "unit tests",
      "unit test macro"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jyapayne/einheit",
    "url": "https://github.com/jyapayne/einheit",
    "long_description": "Einheit means unit in German.\nEinheit is a Nim unit testing library inspired by Python's unit tests. Nim's unittest library is good, but I wanted something a little more \"Nim\" feeling. I also really like Python's unittest module and thought it would be nice to have something similar in Nim. Also, unittest doesn't have much documentation on how to use it, and it's pretty bare bones, so I wanted a little more functionality and documentation.\nThe benefit of the macro style I chose means that you can document your tests nicely as well :)",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "elvis",
    "description": "The elvis package implements a 'truthy', 'ternary' and a 'coalesce' operator to Nim as syntactic sugar for working with conditional expressions",
    "tags": [
      "operator",
      "elvis",
      "ternary",
      "template",
      "truthy",
      "falsy",
      "exception",
      "none",
      "null",
      "nil",
      "0",
      "NaN",
      "coalesce"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mattaylor/elvis",
    "url": "https://github.com/mattaylor/elvis",
    "long_description": "The Elvis package implements a truthy (`?`), ternary (`?!`), coalesce (`?:`) and a conditional assignment (`?=`) operator and an experimental conditional access operator (`?.`) as syntactic sugar for Nim to work with conditional expressions using more than just boolean types.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "emerald",
    "description": "macro-based HTML templating engine",
    "tags": [
      "dsl",
      "html",
      "template",
      "web"
    ],
    "license": "WTFPL",
    "method": "git",
    "web": "https://flyx.github.io/emerald/",
    "url": "https://github.com/flyx/emerald",
    "long_description": "emerald is a Nim library for writing HTML 5 templates. It is implemented as a domain-specific language that can be used directly in your Nim source code via macros. Features include:\n* HTML validation : emerald validates your HTML structure when it compiles your template. This validation checks for unknown, ill-placed and missing HTML tags and attributes, but does not implement the whole HTML 5 spec. It is a tool for you to discover errors early.\n* Mixins : You can re-use parts of your template code by placing it in mixins and calling the mixin from the template. emerald is able to check the whole resulting HTML structure.\n* Filtering : By default, emerald converts special HTML characters in the content it outputs to their corresponding entities, but you can customize the whole filter chain and also write your own filters.\n* Inheritance : Templates can inherit from other templates. You can define your base structure in a master template, and add content with child templates. emerald is still able to check the whole resulting HTML structure.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "emmy",
    "description": "Algebraic structures and related operations for Nim",
    "tags": [
      "algebra",
      "polynomials",
      "primes",
      "ring",
      "quotients"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/unicredit/emmy",
    "url": "git@github.com:unicredit/emmy.git",
    "long_description": "Algebraic structures and related operations for Nim.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "enet",
    "description": "Wrapper for ENet UDP networking library",
    "tags": [
      "game",
      "networking",
      "udp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nimrod-enet",
    "url": "https://github.com/fowlmouth/nimrod-enet/",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "ensem",
    "description": "Support for ensemble file format and arithmetic using jackknife/bootstrap propagation of errors",
    "tags": [
      "jackknife",
      "statistics"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/JeffersonLab/ensem",
    "url": "https://github.com/JeffersonLab/ensem",
    "long_description": "Support for ensemble file format and arithmetic using jackknife/bootstrap propagation of errors.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "entoody",
    "description": "A component/entity system",
    "tags": [
      "component",
      "entity",
      "composition"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://bitbucket.org/fowlmouth/entoody",
    "url": "https://bitbucket.org/fowlmouth/entoody",
    "long_description": "Entity is an aggregate of components. Their combined data and behaviors.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "epub",
    "description": "Module for working with EPUB e-book files",
    "tags": [
      "library",
      "epub",
      "e-book"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-epub",
    "url": "https://github.com/achesak/nim-epub",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "espeak",
    "description": "Nim Espeak NG wrapper, for super easy Voice and Text-To-Speech",
    "tags": [
      "espeak",
      "voice",
      "texttospeech"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-espeak",
    "url": "https://github.com/juancarlospaco/nim-espeak",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "etcd_client",
    "description": "etcd client library",
    "tags": [
      "library",
      "etcd"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-etcd-client",
    "url": "https://github.com/FedericoCeratto/nim-etcd-client",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "eternity",
    "description": "Humanize elapsed time",
    "tags": [
      "library",
      "time",
      "format"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/hiteshjasani/nim-eternity",
    "url": "https://github.com/hiteshjasani/nim-eternity",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "eth",
    "description": "A collection of Ethereum related libraries",
    "tags": [
      "library",
      "ethereum",
      "p2p",
      "devp2p",
      "rplx",
      "networking",
      "whisper",
      "swarm",
      "rlp",
      "cryptography",
      "trie",
      "patricia-trie",
      "keyfile",
      "wallet",
      "bloom",
      "bloom-filter"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth",
    "url": "https://github.com/status-im/nim-eth",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Finance"
    ]
  },
  {
    "name": "eth_bloom",
    "description": "Ethereum bloom filter (deprecated, now part of the 'eth' package)",
    "tags": [
      "deprecated"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-bloom",
    "url": "https://github.com/status-im/nim-eth-bloom",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "eth_common",
    "description": "Definitions of various data structures used in the Ethereum eco-system",
    "tags": [
      "library",
      "ethereum"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-common",
    "url": "https://github.com/status-im/nim-eth-common",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "eth_keyfile",
    "description": "A deprecated library for handling Ethereum private keys and wallets (now part of the 'eth' package)",
    "tags": [
      "deprecated"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-keyfile",
    "url": "https://github.com/status-im/nim-eth-keyfile",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "eth_keys",
    "description": "A deprecated reimplementation in pure Nim of eth-keys, the common API for Ethereum key operations (now part of the 'eth' package).",
    "tags": [
      "deprecated"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-keys",
    "url": "https://github.com/status-im/nim-eth-keys",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "eth_p2p",
    "description": "Deprecated implementation of the Ethereum suite of P2P protocols (now part of the 'eth' package)",
    "tags": [
      "deprecated",
      "library",
      "ethereum",
      "p2p",
      "devp2p",
      "rplx",
      "networking",
      "whisper",
      "swarm"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-p2p",
    "url": "https://github.com/status-im/nim-eth-p2p",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "eth_trie",
    "description": "Merkle Patricia Tries as specified by Ethereum (deprecated, now part of the 'eth' package)",
    "tags": [
      "deprecated"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-eth-trie",
    "url": "https://github.com/status-im/nim-eth-trie",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "ethash",
    "description": "A Nim implementation of Ethash, the ethereum proof-of-work hashing function",
    "tags": [
      "library",
      "ethereum",
      "ethash",
      "cryptography",
      "proof-of-work"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-ethash",
    "url": "https://github.com/status-im/nim-ethash",
    "long_description": "A pure-Nim implementation of Ethash, the Ethereum proof of work\nImplementation is based on the spec revision 23 (2017-08-03).",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Finance"
    ]
  },
  {
    "name": "euclidean",
    "description": "Euclidean Division & Euclidean Modulo",
    "tags": [
      "euclidean",
      "modulo",
      "division",
      "math"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-euclidean",
    "url": "https://github.com/juancarlospaco/nim-euclidean",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "evmjit",
    "description": "A wrapper for the The Ethereum EVM JIT library",
    "tags": [
      "library",
      "ethereum",
      "evm",
      "jit",
      "wrapper"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-evmjit",
    "url": "https://github.com/status-im/nim-evmjit",
    "long_description": "Nim EVM-C is a wrapper for EVMC, the Ethereum Client-VM Connector API.\nSo far, it has been tested with the EVM JIT.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Finance"
    ]
  },
  {
    "name": "expat",
    "description": "Expat wrapper for Nim",
    "tags": [
      "expat",
      "xml",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/expat",
    "url": "https://github.com/nim-lang/expat",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "extensions",
    "description": "A library that will add useful tools to Nim's arsenal.",
    "tags": [
      "library",
      "extensions",
      "addons"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jyapayne/nim-extensions",
    "url": "https://github.com/jyapayne/nim-extensions",
    "long_description": "Extensions for the Nim programming language.\nThese extensions aim to improve the usability of Nim in practical applications.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "extmath",
    "description": "Nim math library",
    "tags": [
      "library",
      "math",
      "trigonometry"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/extmath.nim",
    "url": "https://github.com/achesak/extmath.nim",
    "long_description": "extmath.nim is a math library for the Nim programming language. It contains functions for basic math, trigonometry, and geometry, as well as quite a few constants.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "fab",
    "description": "Print fabulously in your terminal",
    "tags": [
      "colors",
      "terminal",
      "formatting",
      "text",
      "fun"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/icyphox/fab",
    "url": "https://github.com/icyphox/fab",
    "long_description": "Print fabulously in your terminal (in Nim).\nFab is a really cool text formatting package for Nim. Using Fab is super easy.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "falas",
    "description": "fragment-aware assembler for short reads",
    "tags": [
      "assembly",
      "dna",
      "sequence",
      "genomics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://brentp.github.io/falas/falas.html",
    "url": "https://github.com/brentp/falas",
    "long_description": "This is a very simple local (re)assembler. It uses a simple algorithm that ends up being very flexible and fast. The underlying datastructure is a sequence (list) of Contig structs. When a new read is inserted into the seq of contigs, it is checked against each contig, sliding the read sequence along the contig looking for a match. The read is then inserted into the best matching contig, possibly extending it. Contigs are merged in an identical manner and the number of reads supporting each base in the contig is tracked. It has several additional bells and whistles that make it more useful:\n* It has a concept of \"resolvable mismatches\".\n* It is fragment-aware.\n* It is not an assembler in the traditional sense.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Science"
    ]
  },
  {
    "name": "fancygl",
    "description": "nice way of handling render code",
    "tags": [
      "opengl",
      "rendering",
      "dsl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/krux02/opengl-sandbox",
    "url": "https://github.com/krux02/opengl-sandbox",
    "long_description": "This project is a toolbox project that wants to make the utilization of the GPU for rasterization and computation as easy as possible.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Video",
      "Image"
    ]
  },
  {
    "name": "faststack",
    "description": "Dynamically resizable data structure optimized for fast iteration.",
    "tags": [
      "collection"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vladar4/FastStack",
    "url": "https://github.com/Vladar4/FastStack",
    "long_description": "FastStack is dynamically resizable data structure optimized for fast iteration over the large arrays of similar elements avoiding memory fragmentation (e.g., update and rendering cycles of a game scene).",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "faststreams",
    "description": "Nearly zero-overhead input/output streams for Nim",
    "tags": [
      "library",
      "I/O",
      "memory-mapping",
      "streams"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-faststreams",
    "url": "https://github.com/status-im/nim-faststreams",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "fastx_reader",
    "description": "FastQ and Fasta readers for NIM",
    "tags": [
      "bioinformatics,",
      "fasta,",
      "fastq"
    ],
    "license": "LGPL-3.0",
    "method": "git",
    "web": "https://github.com/ahcm/fastx_reader",
    "url": "https://github.com/ahcm/fastx_reader",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "feednim",
    "description": "An Atom, RSS, and JSONfeed parser",
    "tags": [
      "yes"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/johnconway/feed-nim",
    "url": "https://github.com/johnconway/feed-nim",
    "long_description": "A feed parsing module for Nim, which parses RSS, Atom, and JSONfeed syndication formats. This has been substantially re-written and expanded from Nim-RSS.\nIt has not been tested in the wild, and is mostly written by an inexperienced dope who barely understands Nim. It will probably break. Use at your own risk.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "ffbookmarks",
    "description": "Nim module for working with Firefox bookmarks",
    "tags": [
      "firefox",
      "bookmarks",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-ffbookmarks",
    "url": "https://github.com/achesak/nim-ffbookmarks",
    "long_description": "nim-ffbookmarks is a Nim module for working with Firefox bookmarks files. It can read and parse bookmarks files, in addition to converting to CSV and HTML. It can also filter duplicate bookmarks.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "fftw3",
    "description": "Bindings to the FFTW library",
    "tags": [
      "library",
      "math",
      "fft"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ziotom78/nimfftw3",
    "url": "https://github.com/ziotom78/nimfftw3",
    "long_description": "Set of Nim bindings to the excellent FFTW library, to compute Fourier transforms of various kinds.\nI generated these bindings in a hurry because I needed them for a project of mine. Therefore, only the functions that use double values have been implemented (no float or long double functions, sorry -- by the way, at the time of writing, the long double type is not yet supported by Nim).\nWarning: This repository is currently archived, as I am no longer interested in Nim.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "FFI"
    ]
  },
  {
    "name": "figures",
    "description": "unicode symbols",
    "tags": [
      "unicode",
      "cli",
      "figures"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lmariscal/figures",
    "url": "https://github.com/lmariscal/figures",
    "long_description": "Windows CMD only supports a limited character set.\nAll checks are runned at compile time, if you need a run time solution please let me know and will consider adding support for it.\nThe new windows terminal and integrated VsCode terminal fully support Unicode symbols.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "fileinput",
    "description": "iterate through files and lines",
    "tags": [
      "file",
      "io",
      "input"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-fileinput",
    "url": "https://github.com/achesak/nim-fileinput",
    "long_description": "nim-fileinput is a Nim module based on the fileinput module in Python's standard library. It can read and iterate through a list of files.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "finals",
    "description": "Transparently declare single-set attributes on types.",
    "tags": [
      "types"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Quelklef/nim-finals",
    "url": "https://github.com/quelklef/nim-finals",
    "long_description": "(Mostly) Transparent single-set attributes for Nim types",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "finalseg",
    "description": "jieba's finalseg port to nim",
    "tags": [
      "library",
      "chinese",
      "words"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bung87/finalseg",
    "url": "https://github.com/bung87/finalseg",
    "long_description": "Chinese Words Segment Library in Nim based on HMM Model\nporting from jiba's finalseg module",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "findtests",
    "description": "A helper module for writing unit tests in Nim with nake or similar build system.",
    "tags": [
      "test",
      "tests",
      "testing",
      "unit"
    ],
    "license": "ISC",
    "method": "git",
    "web": "https://github.com/jackvandrunen/findtests",
    "url": "https://github.com/jackvandrunen/findtests",
    "long_description": "A helper module for writing unit tests with nake or similar build system. Automatically discovers all tests in a test directory, along with all of their dependencies, so one can determine whether a given test needs to be rebuilt.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "firejail",
    "description": "Firejail wrapper for Nim, Isolate your Production App before its too late!",
    "tags": [
      "firejail",
      "security",
      "linux",
      "isolation",
      "container",
      "infosec",
      "hardened",
      "sandbox",
      "docker"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-firejail",
    "url": "https://github.com/juancarlospaco/nim-firejail",
    "long_description": "Firejail wrapper for Nim. Isolate your Production App before its too late!",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "fixmath",
    "description": "LibFixMath 16:16 fixed point support for nim",
    "tags": [
      "math"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Jeff-Ciesielski/fixmath",
    "url": "https://github.com/Jeff-Ciesielski/fixmath",
    "long_description": "libfixmath wrapper for the Nim programming language\nlibfixmath provides 16:16 fixed point math support, useful for DSP and embedded applications. This wrapper provides access to all required top level functionality, as well as operator overloads for the fix16 type.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Hardware",
      "Maths"
    ]
  },
  {
    "name": "flatdb",
    "description": "small/tiny, flatfile, jsonl based, inprogress database for nim",
    "tags": [
      "database",
      "json",
      "pure"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/enthus1ast/flatdb",
    "url": "https://github.com/enthus1ast/flatdb",
    "long_description": "A small flatfile, inprocess database for nim-lang\n*holds your data in memory with a table + doubly linked list, to provide\n* fast hash acces with keys\n* insertion order ( iterate in both directions )\n* persists the data to a jsonl (json line by line) file.\n* let you query the database (beginning at the top|first|oldest item or the back|last|newest item)\n* a query has to touch all entries in the db (it does this all in memory), but matcher procedures gets summarized, so its cheap to concat multiple matchers with and or or\nBe aware that if you change an entry in memory, you have to call \"db.flush\" manually!",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "fletcher",
    "description": "Implementation of the Fletcher checksum algorithm.",
    "tags": [
      "algorithm",
      "checksum",
      "hash",
      "adler",
      "crc",
      "crc32",
      "embedded"
    ],
    "license": "GPLv3+",
    "method": "git",
    "web": "https://github.com/Akito13/nim-fletcher",
    "url": "https://github.com/Akito13/nim-fletcher",
    "long_description": "This is a Nim module that takes files as arguments and outputs their respective Fletcher checksum. The Fletcher checksum has a bit lower error detection reliability than for example the well known CRC-32 but it is generally a lot faster than for example CRC-32 as well as Adler-32. The project's goal is to provide a very fast checksum algorithm to be used on devices like the Raspberry Pi.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "flippy",
    "description": "Flippy is a simple 2d image and drawing library.",
    "tags": [
      "image",
      "graphics",
      "2d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/flippy",
    "url": "https://github.com/treeform/flippy.git",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "fltk",
    "description": "The Fast-Light Tool Kit",
    "tags": [
      "gui",
      "fltk",
      "wrapper",
      "c++"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/Skrylar/nfltk",
    "url": "https://github.com/Skrylar/nfltk",
    "long_description": "A wrapper for the Fast Light Toolkit, for the Nim language.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "fmod",
    "description": "Nim wrapper for the FMOD Low Level C API",
    "tags": [
      "library",
      "fmod",
      "audio",
      "game",
      "sound"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/johnnovak/nim-fmod",
    "url": "https://github.com/johnnovak/nim-fmod",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "fnmatch",
    "description": "Nim module for filename matching with UNIX shell patterns",
    "tags": [
      "library",
      "unix",
      "files",
      "matching"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-fnmatch",
    "url": "https://github.com/achesak/nim-fnmatch",
    "long_description": "nim-fnmatch is a Nim module for filename matching with UNIX shell patterns. It is based on Python's fnmatch module in the standard library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "fnv",
    "description": "FNV-1 and FNV-1a non-cryptographic hash functions (documentation hosted at: http://ryuk.ooo/nimdocs/fnv/fnv.html)",
    "tags": [
      "fnv",
      "fnv1a",
      "fnv1",
      "fnv-1a",
      "fnv-1",
      "fnv0",
      "fnv-0",
      "ryukoposting"
    ],
    "license": "Apache-2.0",
    "method": "git",
    "web": "https://gitlab.com/ryukoposting/nim-fnv",
    "url": "https://gitlab.com/ryukoposting/nim-fnv",
    "long_description": "This package implements the Fowler-Noll-Vo hash function, revisions 1 and 1A (usually called FNV-1 and FNV-1a, respectively). The 32, 64, and 128-bit variants of both functions are currently available.\nFNV-0 is not included in this package, as it is deprecated and highly ineffective in comparison to its counterparts.\nThe FNV hash functions are non-cryptographic. They should not be used for anything where security is of concern.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "foliant",
    "description": "Documentation generator that produces pdf and docx from Markdown. Uses Pandoc and LaTeX behind the scenes.",
    "tags": [
      "foliant",
      "docs",
      "pdf",
      "docx",
      "word",
      "latex",
      "tex",
      "pandoc",
      "markdown",
      "md",
      "restream"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/foliant-docs/foliant-nim",
    "url": "https://github.com/foliant-docs/foliant-nim",
    "long_description": "Foliant is a documentation generator that builds PDF, Docx, and TeX documents from Markdown source.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "fontconfig",
    "description": "Low level wrapper for the fontconfig library.",
    "tags": [
      "fontconfig",
      "font"
    ],
    "license": "Fontconfig",
    "method": "git",
    "web": "https://github.com/Parashurama/fontconfig",
    "url": "https://github.com/Parashurama/fontconfig",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "forestdb",
    "description": "ForestDB is fast key-value storage engine that is based on a Hierarchical B+-Tree based Trie, or HB+-Trie.",
    "tags": [
      "library",
      "bTree",
      "HB+-Trie",
      "db",
      "forestdb"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/nimscale/forestdb",
    "url": "https://github.com/nimscale/forestdb",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "fowltek",
    "description": "A collection of reusable modules and wrappers.",
    "tags": [
      "game",
      "opengl",
      "wrappers",
      "library",
      "assorted"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nimlibs",
    "url": "https://github.com/fowlmouth/nimlibs/",
    "long_description": "This is a collection of useful Nim modules. The theme is Game Development.\n* fowltek/vector_math - implements types for vectors of two, three and four (now basic2d/basic3d exist in the stdlib, use those instead)\n* fowltek/pointer_arithm - implements pointer arithmetic for use with c libraries\n* fowltek/maybe_t - implements a Maybe[T]\n* fowltek/idgen - a simple sequential ID generator\n* fowltek/neural - a backpropagating neural network\n* Spatial organizationing: fowltek/bbtree, fowltek/qtree",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "frag",
    "description": "A 2D|3D game engine",
    "tags": [
      "game",
      "game-dev",
      "2d",
      "3d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fragworks/frag",
    "url": "https://github.com/fragworks/frag",
    "long_description": "FRAG is a game creation framework being developed using the Nim programming language, and is currently in pre-alpha status. The immediate development focus for FRAG is supporting the creation of 2D mobile and desktop games. Console support is planned for post-alpha releases of FRAG.\nSupport for 3D is planned for post-alpha releases of FRAG.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games",
      "Video",
      "Image",
      "Audio"
    ]
  },
  {
    "name": "fragments",
    "description": "Our very personal collection of utilities",
    "tags": [
      "ffi",
      "math",
      "threading",
      "dsl",
      "memory",
      "serialization",
      "cpp",
      "utilities"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fragcolor-xyz/fragments",
    "url": "https://github.com/fragcolor-xyz/fragments",
    "long_description": "A collection of pure nim utilities.\n* cpp: Write C++ straight from Nim. Inspired by std/jsffi and using the magic of importcpp, macros and many other cool nim features. Wrappers are a thing of the past!\n* js: A collection of utilities for the js backend.\n* math_common: Commonly used math routines, similar to std/math.\n* vectors: Helpers for writing vectorized code, converting types into Array-Of-Structure-Of-Arrays (AOSOA) form and generalizing operations to wide types.\n* linalg: Linear algebra for 3D rendering and simulation. Designed for maximum ergonomy, performance and generalization to vectorized types and algorithms.\n* async_primitives: Synchronization primitives for asynchronous programs, integrated with Futures and async/await.\n* atomics: Atomic types and operations closely conforming to C++11 style atomics.\n* threading_primitives: Syncrhonization primitives for multi-threaded programs, such as spin locks and events.\n* dsl: Macros to define custom Nim DSLs.\n* memory: Custom allocators and helpers for allocating objects and managing their life-time.\n* serialization: Fast binary serialization with automatically compile-time generated serializers.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths",
      "System",
      "Miscellaneous"
    ]
  },
  {
    "name": "freegeoip",
    "description": "Retrieve info about a location from an IP address",
    "tags": [
      "IP",
      "address",
      "location",
      "geolocation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-freegeoip",
    "url": "https://github.com/achesak/nim-freegeoip",
    "long_description": "nim-freegeoip is a Nim module for getting info about a location from an IP address or hostname. It uses freegeoip to retrieve the info.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "freeimage",
    "description": "Wrapper for the FreeImage library",
    "tags": [
      "wrapper",
      "media",
      "image",
      "import",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/nim-freeimage",
    "url": "https://github.com/barcharcraz/nim-freeimage",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "freetype",
    "description": "wrapper for FreeType2 library",
    "tags": [
      "font",
      "renderint",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/freetype",
    "url": "https://github.com/jangko/freetype",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI",
      "Reporting"
    ]
  },
  {
    "name": "fsm",
    "description": "A simple finite-state machine for @nim-lang",
    "tags": [
      "fsm",
      "finite",
      "state",
      "machine"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/fsm.nim",
    "url": "https://github.com/ba0f3/fsm.nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "fsmonitor",
    "description": "The ex-stdlib module fsmonitor.",
    "tags": [
      "graveyard",
      "fsmonitor",
      "asyncio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/fsmonitor",
    "url": "https://github.com/nim-lang/graveyard?subdir=fsmonitor",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "fswatch",
    "description": "Wrapper for the fswatch library.",
    "tags": [
      "fswatch",
      "fsmonitor",
      "libfswatch",
      "filesystem"
    ],
    "license": "GPL-3.0",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-fswatch",
    "url": "https://github.com/FedericoCeratto/nim-fswatch",
    "long_description": "Cross-platform filesystem event monitor for Nim.\nWraps the libfswatch library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "fugitive",
    "description": "Simple command line tool to make git more intuitive, along with useful GitHub addons.",
    "tags": [
      "git",
      "github",
      "cli",
      "extras",
      "utility",
      "tool"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/citycide/fugitive",
    "url": "https://github.com/citycide/fugitive",
    "long_description": "fugitive provides new or alternative commands to use with git, and also adds a few helpful tools for GitHub repositories.\nIt's similar to git-extras but is designed to be more portable. git-extras is written entirely as a set of shell scripts, which means platform support outside Unix is at best hit or miss.\nOn the other hand, fugitive is written in Nim to allow for better portability. Other benefits are that Nim is super fast, flexible, and more readable than the often cryptic bash syntax.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "fuse",
    "description": "A FUSE binding for Nim",
    "tags": [
      "fuse",
      "library",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/akiradeveloper/nim-fuse",
    "url": "https://github.com/akiradeveloper/nim-fuse.git",
    "long_description": "The aim of nim-fuse is to provide the fast, safe and portable fuse implementation and to show a real-world application of Nim language.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "gamelib",
    "description": "A library of functions to make creating games using Nim and SDL2 easier. This does not intend to be a full blown engine and tries to keep all the components loosely coupled so that individual parts can be used separately.",
    "tags": [
      "sdl",
      "game",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/SDLGamelib",
    "url": "https://github.com/PMunch/SDLGamelib",
    "long_description": "A library of functions to make creating games using Nim and SDL2 easier. This does not intend to be a full blown engine and tries to keep all the components loosely coupled so that individual parts can be used separately.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "gamelight",
    "description": "A set of simple modules for writing a JavaScript 2D game.",
    "tags": [
      "js",
      "library",
      "graphics",
      "collision",
      "2d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/gamelight",
    "url": "https://github.com/dom96/gamelight",
    "long_description": "This package implements a set of modules for drawing 2D graphics on a HTML5 canvas and offers some primitive 2D collision detection.\nThis has been pulled from another project so it is currently a little rough around the edges. But hopefully with time it will be polished.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Games",
      "JS"
    ]
  },
  {
    "name": "gameoflife",
    "description": "gameoflife is library for Game of Life.",
    "tags": [
      "gameoflife",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/gameoflife",
    "url": "https://github.com/jiro4989/gameoflife",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games",
      "JS"
    ]
  },
  {
    "name": "gapbuffer",
    "description": "A simple gap buffer implementation",
    "tags": [
      "buffer",
      "seq",
      "sequence",
      "string",
      "gapbuffer"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://notabug.org/vktec/nim-gapbuffer",
    "url": "https://notabug.org/vktec/nim-gapbuffer.git",
    "long_description": "This library implements a simple gap buffer for Nim. I won't claim it's fast, but it should be good enough for most uses.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "gara",
    "description": "A pattern matching library",
    "tags": [
      "nim",
      "pattern"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/alehander42/gara",
    "url": "https://github.com/alehander42/gara",
    "long_description": "A library that provides a `match` macro which can be used as a pattern matching construct.\nA `matches` macro which returns true if a value is matched.\nA `maybeMatches` macro which returns an `Option[tuple]` of the matched \"variables\".\nMatching:\n* values\n* types\n* objects\n* nested subpatterns\n* capture subpatterns and values with @name\n* variants\n* wildcard\n* seq\n* match many elements in seq with *\n* two kinds of custom unpackers (thanks to @krux02 for making me aware of the scala pattern matching design and apply/unapply: they work differently here though)\n* support for recognizing other types as variant\n* if guards\n* unification\n* matches expression\n* option matching",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "gatabase",
    "description": "Postgres Database ORM for Nim",
    "tags": [
      "database",
      "orm",
      "postgres",
      "sql"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-gatabase",
    "url": "https://github.com/juancarlospaco/nim-gatabase",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "gemf",
    "description": "Library for reading GEMF map tile stores",
    "tags": [
      "maps",
      "gemf",
      "parser"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "http://www.cgtk.co.uk/gemf",
    "url": "https://bitbucket.org/abudden/gemf.nim",
    "long_description": "A tile set consists of a single large file containing a header and then all of the tiles concatenated together. The file typically has a .gemf extension. This tile store format is intended to provide a static (i.e. cannot be updated without regenerating from scratch) file containing a large number of tiles, stored in a manner that makes efficient use of SD cards and with which it is easy to access individual tiles very quickly. It is intended to overcome the existing issues with the way tiles are stored in most existing Android map applications as these are not very scalable.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Image"
    ]
  },
  {
    "name": "genieos",
    "description": "Too awesome procs to be included in nimrod.os module",
    "tags": [
      "library",
      "command-line",
      "sound",
      "recycle",
      "os"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/genieos/",
    "url": "https://github.com/Araq/genieos/",
    "long_description": "Nim provides the os module with OS related procs to manage files among other things. But this is really just basic POSIX stuff, and nowadays OSes have things like recycle bins and speakers to play sounds. However, these kind of procs are not very cross platform and some people wouldn't like them in the base os module.\nSo here's my answer, genieos contains several procs which are too awesome to be included in the standard os one. You could actually think of this module as a fancy os module.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "genode",
    "description": "System libraries for the Genode Operating System Framework",
    "tags": [
      "genode",
      "system"
    ],
    "license": "AGPLv3",
    "method": "git",
    "web": "https://github.com/ehmry/nim-genode",
    "url": "https://github.com/ehmry/nim-genode",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "genoiser",
    "description": "functions to tracks for genomics data files",
    "tags": [
      "bam",
      "cram",
      "vcf",
      "genomics"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/brentp/genoiser",
    "long_description": "genoiser: the noise is the signal\ngiven a lot of alignment files, genoiser helps to find the areas of the genome that have noise signals that result in bad variant (small, SV, ME) calls. It finds per-sample noise and then aggregates across samples and reports the number of samples at each base in the genome that had a given noise signal. These regions can be used as black-list regions instead of or in addition to LCRs.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "gentabs",
    "description": "Efficient hash table that is a key-value mapping (removed from stdlib)",
    "tags": [
      "table",
      "string",
      "key",
      "value"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lcrees/gentabs",
    "url": "https://github.com/lcrees/gentabs",
    "long_description": "This module implements an efficient hash table that is a key-value mapping. Removed from Nim stdlib.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "geocoding",
    "description": "A simple library for Google Maps Geocoding API",
    "tags": [
      "library",
      "geocoding",
      "maps"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/saratchandra92/nim-geocoding",
    "url": "https://github.com/saratchandra92/nim-geocoding",
    "long_description": "This is a Library for Google Maps Geocoding API. Currently it only supports getting Coordinates, a formatted address and reverse Geocoding. You can use an public API key if you want (Optional).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "geohash",
    "description": "Nim implementation of the geohash latitude/longitude geocode system",
    "tags": [
      "library",
      "geocoding",
      "pure"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/twist-vector/nim-geohash",
    "url": "https://github.com/twist-vector/nim-geohash.git",
    "long_description": "The geohash module is a latitude/longitude geocode system invented by Gustavo Niemeyer. It is a hierarchical spatial data structure which subdivides cells into 32 (sub)cells and represents the location by a short alphanumeric string. That is, each of the 32 cells is assigned a character code and the cell can be further subdivided into 32 cells which is represented by an additional character.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Science",
      "Algorithms"
    ]
  },
  {
    "name": "geoip",
    "description": "Retrieve info about a location from an IP address",
    "tags": [
      "IP",
      "address",
      "location",
      "geolocation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-geoip",
    "url": "https://github.com/achesak/nim-geoip",
    "long_description": "nim-freegeoip is a Nim module for getting info about a location from an IP address or hostname. It uses freegeoip to retrieve the info.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "geonames",
    "description": "GeoNames API wrapper",
    "tags": [
      "library",
      "wrapper",
      "geography"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-geonames",
    "url": "https://github.com/achesak/nim-geonames",
    "long_description": "nim-geonames is a Nim wrapper for the GeoNames API.\nNote that nim-geonames does not yet have procs for all of the GeoNames services, but the core ones are already done.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "georefar",
    "description": "GeoRef Argentina Government MultiSync API Client for Nim",
    "tags": [
      "geo",
      "openstreetmap",
      "async",
      "multisync",
      "opendata",
      "gov"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-georefar",
    "url": "https://github.com/juancarlospaco/nim-georefar",
    "long_description": "GeoRef Argentina MultiSync API Lib for Nim (All Docs on Spanish because its for Argentina)\nLa API del Servicio de Normalizacion de Datos Geograficos, permite normalizar y codificar los nombres de unidades territoriales de la Argentina (provincias, departamentos, municipios y localidades) y de sus calles, asi como ubicar coordenadas dentro de ellas.\nEste Cliente es Async y Sync al mismo tiempo, es MultiPlataforma, MultiArquitectura, 0 Dependencias, 1 Archivo solo, ~250 Kilobytes Compilado, muy poco uso de RAM. Soporta Proxy, IPv6, SSL y Timeout. Auto-Documentado.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "getch",
    "description": "getch() for Windows and Unix",
    "tags": [
      "getch",
      "char"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/6A/getch",
    "url": "https://github.com/6A/getch",
    "long_description": "Simple and lightweight `getch()` proc for Nim.\nShould work on all platforms.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "getr",
    "description": "Benchmarking wrapper around getrusage()",
    "tags": [
      "benchmark",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jrfondren/getr-nim",
    "url": "https://github.com/jrfondren/getr-nim",
    "long_description": "getr is a simple wrapper around the getrusage(2) syscall, which can be relied on for basic resource usage reports under Linux, OpenBSD, and macOS (among others). A child command is repeatedly spawned and waited for, and then a RUSAGE_CHILDREN report is generated.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Tools"
    ]
  },
  {
    "name": "gh_nimrod_doc_pages",
    "description": "Generates a GitHub documentation website for Nim projects.",
    "tags": [
      "command-line",
      "web",
      "automation",
      "documentation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/gh_nimrod_doc_pages",
    "url": "https://github.com/Araq/gh_nimrod_doc_pages",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "gifenc",
    "description": "Gif Encoder",
    "tags": [
      "gif",
      "encoder"
    ],
    "license": "Public Domain",
    "method": "git",
    "web": "https://github.com/ftsf/gifenc",
    "url": "https://github.com/ftsf/gifenc",
    "long_description": "This is a fork of https://github.com/lecram/gifenc To add a nim wrapper around it and make it installable via nimble.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "gifwriter",
    "description": "Animated GIF writing library based on jo_gif",
    "tags": [
      "gif",
      "image",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rxi/gifwriter",
    "url": "https://github.com/rxi/gifwriter",
    "long_description": "A Nim library for writing animated GIFs, based on jo_gif.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "gintro",
    "description": "High level GObject-Introspection based GTK3 bindings",
    "tags": [
      "library",
      "gtk",
      "wrapper",
      "gui"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/stefansalewski/gintro",
    "url": "https://github.com/stefansalewski/gintro",
    "long_description": "High level GTK3 bindings, as available for many other programming languages like C++, Python, Ruby or D already, have these advantages:\n* full Garbage Collector or Destructor support — you should never have to free resources manually\n* Widgets are Nim objects, so inheritance and sub-classing can be used\n* full type safety — no needs for casts or other unsafe and dangerous operations\nThese high level bindings are based on GObject-Introspection, an XML based database like interface description. Compared to the C header files this description gives us more and deeper information about data types and function calls, for example ownership transfer of objects and in or out direction of procedure variables, which makes writing the glue code much easier. And it should work with minimal modifications also for the upcoming GTK4.\nUnfortunately there are also some drawbacks:\n* The Application Programming Interface (API) will be different from what is known from C API, so using C examples or C tutorials is not really straight forward\n* The high level source code will differ from available C examples, so there would be a big demand for tutorials\n* We need a lot of glue code, which has much room for bugs. So much testing is necessary.\n* There is some overhead due to indirect calls, leading to some code size increase and minimal performance loss.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "gitapi",
    "description": "Nim wrapper around the git version control software",
    "tags": [
      "git",
      "version control",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-gitapi",
    "url": "https://github.com/achesak/nim-gitapi",
    "long_description": "nim-gitapi is a Nim module for working with the git version control system. Based on the gitapi module for Python at https://bitbucket.org/haard/gitapi.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "github_api",
    "description": "Nim wrapper for the GitHub API",
    "tags": [
      "library",
      "api",
      "github",
      "client"
    ],
    "license": "WTFPL",
    "method": "git",
    "web": "https://github.com/watzon/github-api-nim",
    "url": "https://github.com/watzon/github-api-nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "github_release",
    "description": "github-release package",
    "tags": [
      "github",
      "release",
      "upload",
      "create",
      "delete"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kdheepak/github-release",
    "url": "https://github.com/kdheepak/github-release",
    "long_description": "github-release is a command line utility tool that allows you to easily manage your releases on GitHub. You can create releases, remove releases and upload files to existing releases using this tool.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "gles",
    "description": "Bindings for OpenGL ES, the embedded 3D graphics library.",
    "tags": [
      "binding",
      "khronos",
      "gles",
      "opengl es"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/gles",
    "url": "https://github.com/nimious/gles.git",
    "long_description": "This package contains bindings to OpenGL ES for the Nim programming language. OpenGL ES, a well-defined subset of OpenGL, is a royalty-free, cross-platform API for full-function 2D and 3D graphics on embedded systems, including consoles, phones, appliances and vehicles.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "glfw",
    "description": "A high-level GLFW 3 wrapper",
    "tags": [
      "library",
      "glfw",
      "opengl",
      "windowing",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ephja/nim-glfw",
    "url": "https://github.com/ephja/nim-glfw",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "glm",
    "description": "Port of c++ glm library with shader-like syntax",
    "tags": [
      "opengl",
      "math",
      "matrix",
      "vector",
      "glsl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/stavenko/nim-glm",
    "url": "https://github.com/stavenko/nim-glm",
    "long_description": "Nim-glm port for matrix-vector algebra with shader like syntax.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "glob",
    "description": "Pure library for matching file paths against Unix style glob patterns.",
    "tags": [
      "glob",
      "pattern",
      "match",
      "walk",
      "filesystem",
      "pure"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/citycide/glob",
    "url": "https://github.com/citycide/glob",
    "long_description": "Match file paths against Unix style patterns called globs.\nglob is a cross-platform, pure Nim implementation of globs that supports creating patterns, testing file paths, and walking through directories to find matching files or directories.\nIf you're unfamiliar with globs, they essentially let you use a simple language to describe what filenames you're looking for with wildcards, placeholders, and other pretty intuitive features.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "glossolalia",
    "description": "A DSL for quickly writing parsers",
    "tags": [
      "parser",
      "peg"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://github.com/fowlmouth/glossolalia",
    "url": "https://github.com/fowlmouth/glossolalia",
    "long_description": "\"Peace and safety; then sudden destruction cometh upon them, as in the metacircular evaluator described in section 5.4.2\" http://kingjamesprogramming.tumblr.com",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "gmp",
    "description": "wrapper for the GNU multiple precision arithmetic library (GMP)",
    "tags": [
      "library",
      "bignum",
      "numbers",
      "math"
    ],
    "license": "LGPLv3 or GPLv2",
    "method": "git",
    "web": "https://github.com/subsetpark/nim-gmp",
    "url": "https://github.com/subsetpark/nim-gmp",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "gnuplot",
    "description": "Nim interface to gnuplot",
    "tags": [
      "plot",
      "graphing",
      "data"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dvolk/gnuplot.nim",
    "url": "https://github.com/dvolk/gnuplot.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "gnutls",
    "description": "GnuTLS wrapper",
    "tags": [
      "wrapper",
      "library",
      "security",
      "crypto"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-gnutls",
    "url": "https://github.com/FedericoCeratto/nim-gnutls",
    "long_description": "Wrap GnuTLS 3.6.6 (and supports other versions)\nTested on Linux\nBasic unit tests\nNo homemade crypto",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "godot",
    "description": "Nim bindings for Godot Engine",
    "tags": [
      "game",
      "engine",
      "2d",
      "3d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/godot-nim",
    "url": "https://github.com/pragmagic/godot-nim",
    "long_description": "godot-nim library allows to create games on Godot Engine with Nim programming language.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "golib",
    "description": "Bindings for golib - a library that (ab)uses gccgo to bring Go's channels and goroutines to the rest of the world",
    "tags": [
      "library",
      "wrapper"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/stefantalpalaru/golib-nim",
    "url": "https://github.com/stefantalpalaru/golib-nim",
    "long_description": "Nim language bindings for golib - a library that (ab)uses gccgo to bring Go's channels and goroutines to the rest of the world.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Language"
    ]
  },
  {
    "name": "gplay",
    "description": "Google Play APK Uploader",
    "tags": [
      "google",
      "play",
      "apk",
      "publish",
      "upload"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/gplay",
    "url": "https://github.com/yglukhov/gplay",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "gpx",
    "description": "Nim module for parsing GPX (GPS Exchange format) files",
    "tags": [
      "GPX",
      "GPS",
      "waypoint",
      "route"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-gpx",
    "url": "https://github.com/achesak/nim-gpx",
    "long_description": "nim-gpx is a Nim module for parsing GPX (GPS Exchange format) files. Currently it only supports GPX 1.1 (no support for GPX 1.0).",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "grafanim",
    "description": "Grafana module for Nim",
    "tags": [
      "library",
      "grafana",
      "dashboards"
    ],
    "license": "GPL",
    "method": "git",
    "web": "https://github.com/jamesalbert/grafanim",
    "url": "https://github.com/jamesalbert/grafanim",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "graphemes",
    "description": "Grapheme aware string handling (Unicode tr29)",
    "tags": [
      "graphemes",
      "grapheme-cluster",
      "unicode"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-graphemes",
    "url": "https://github.com/nitely/nim-graphemes",
    "long_description": "A Nim library for grapheme aware string handling (Unicode tr29). The splitting is made through a fast DFA.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "graphics",
    "description": "Graphics module for Nim.",
    "tags": [
      "library",
      "SDL"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graphics",
    "url": "https://github.com/nim-lang/graphics",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "gravatar",
    "description": "Gravatar API wrapper",
    "tags": [
      "library",
      "wrapper",
      "gravatar"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-gravatar",
    "url": "https://github.com/achesak/nim-gravatar",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "grp",
    "description": "Nim port of Python's grp module for working with the UNIX group database file",
    "tags": [
      "library",
      "unix",
      "grp",
      "group"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-grp",
    "url": "https://github.com/achesak/nim-grp",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "System"
    ]
  },
  {
    "name": "gtk2",
    "description": "Wrapper for gtk2, a feature rich toolkit for creating graphical user interfaces",
    "tags": [
      "wrapper",
      "gui",
      "gtk"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/gtk2",
    "url": "https://github.com/nim-lang/gtk2",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "gtkgenui",
    "description": "This module provides the genui macro for the Gtk2 toolkit. Genui is a way to specify graphical interfaces in a hierarchical way to more clearly show the structure of the interface as well as simplifying the code.",
    "tags": [
      "gtk2",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/gtkgenui",
    "url": "https://github.com/PMunch/gtkgenui",
    "long_description": "This module provides the genui macro for the Gtk2 toolkit. Genui is a way to specify graphical interfaces in a hierarchical way to more clearly show the structure of the interface as well as simplifying the code. Genui is currently implemented for Gtk2, wxWidgets, libui, and nigui. The format focuses on being a soft conversion meaning that there are few to no assumptions and most code can be seen as a 1:1 conversion. This makes it easy to look at existing examples for your framework of choice when creating interfaces in genui. Because of this the genui format differs a bit from framework to framework, but aims to bring many of the same features. What follows is the genui format as used with Gtk2.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "gurl",
    "description": "A little lib for generating URL with args.",
    "tags": [
      "tags",
      "http",
      "generating",
      "url"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/MaxUNof/gurl",
    "url": "https://github.com/MaxUNof/gurl",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "hackpad",
    "description": "Hackathon Web Scratchpad for teaching Nim on events using Wifi with limited or no Internet",
    "tags": [
      "web",
      "jester",
      "lan",
      "wifi",
      "hackathon",
      "hackatton",
      "pastebin",
      "crosscompilation",
      "teaching",
      "zip"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-hackpad",
    "url": "https://github.com/juancarlospaco/nim-hackpad",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "haraka",
    "description": "Haraka v2 short-input hash function",
    "tags": [
      "hash",
      "haraka"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ehmry/nim-haraka",
    "url": "https://github.com/ehmry/nim-haraka",
    "long_description": "Haraka v2 is a secure and efficient short-input (256 or 512 bits) hash function, designed to be very fast on modern platforms which support AES-NI. One of the main applications for such a design is the use in hash-based signature schemes like XMSS and SPHINCS.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "hashids",
    "description": "Nim implementation of Hashids",
    "tags": [
      "library",
      "hashids"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-hashids",
    "url": "https://github.com/achesak/nim-hashids",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Web"
    ]
  },
  {
    "name": "hastyscribe",
    "description": "Self-contained markdown compiler generating self-contained HTML documents",
    "tags": [
      "markdown",
      "html",
      "publishing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://h3rald.com/hastyscribe",
    "url": "https://github.com/h3rald/hastyscribe",
    "long_description": "HastyScribe is a simple, self-contained, command-line program able to convert markdown files into self-contained HTML pages, automatically embedding all the needed fonts, stylesheets and images.\n* cross-platform, you can download precompiled binaries for macOS, Linux and Windows.\n* self-contained, it’s a command-line application that doesn’t require installing or prerequisites: it’s all in a single, small, executable file.\n* a powerful markdown compiler, which leverages the feature-rich Discount markdown engine, and adds even more features like snippets, custom fields, and substitution macros.\n* able to generate self-contained, responsive HTML5 documents that can be viewed with any major modern broswer, and look great on any device.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "hex",
    "description": "A simple hex package for Nim",
    "tags": [
      "hex",
      "encoding"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/esbullington/nimrod-hex",
    "url": "https://github.com/esbullington/nimrod-hex",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "hmac",
    "description": "HMAC-SHA1 and HMAC-MD5 hashing in Nim",
    "tags": [
      "hmac",
      "authentication",
      "hash",
      "sha1",
      "md5"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/hmac.nim",
    "url": "https://github.com/OpenSystemsLab/hmac.nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "horde3d",
    "description": "Wrapper for Horde3D, a small open source 3D rendering engine.",
    "tags": [
      "graphics",
      "3d",
      "rendering",
      "wrapper"
    ],
    "license": "WTFPL",
    "method": "git",
    "web": "https://github.com/fowlmouth/horde3d",
    "url": "https://github.com/fowlmouth/horde3d",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI",
      "Games"
    ]
  },
  {
    "name": "hpack",
    "description": "HPACK (Header Compression for HTTP/2)",
    "tags": [
      "http2",
      "hpack"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-hpack",
    "url": "https://github.com/nitely/nim-hpack",
    "long_description": "An implementation of HPACK (Header Compression for HTTP/2). Based on rfc7541.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "html5_canvas",
    "description": "HTML5 Canvas and drawing for the JavaScript backend.",
    "tags": [
      "html5",
      "canvas",
      "drawing",
      "graphics",
      "rendering",
      "browser",
      "javascript"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://gitlab.com/define-private-public/HTML5-Canvas-Nim",
    "url": "https://gitlab.com/define-private-public/HTML5-Canvas-Nim",
    "long_description": "This is a light wrapper of the HTML5 Canvas Drawing API for Nim's JavaScript\ntarget. This will only work when you compile for JavaScript.  If you try to compile it\nfor something else it will fail.\nThis is for the 2D drawing API only (a.k.a. `CanvasRenderingContext2D`).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "html_tools",
    "description": "HTML5 Tools for Nim, all Templates, No CSS, No Libs, No JS Framework",
    "tags": [
      "html",
      "validation",
      "frontend"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-html-tools",
    "url": "https://github.com/juancarlospaco/nim-html-tools",
    "long_description": "HTML5 Tools for Nim, all Templates, No CSS, No Libs, No JS Framework, No CSS Framework.\n* HTML Image Lazy Load.\n* HTML Input Email, that validates before Submit, uses IANA for validation.\n* HTML Notification bubble, super easy to use.\n* HTML Input File, validates File Format before Upload, by default for Images but you can customize it.\n* HTML Minifier, super fast performance.\n* RST/Markdown to HTML using Nim std lib.\n* HTML Input Number, wont allow Negative, maxlenght is enforced, dir auto, etc.\n* Designed for Nim std lib templating engine and NimWC, but can be used anywhere.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "hts",
    "description": "htslib wrapper for nim",
    "tags": [
      "kmer",
      "dna",
      "sequence",
      "bam",
      "vcf",
      "genomics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://brentp.github.io/hts-nim/",
    "url": "https://github.com/brentp/hts-nim",
    "long_description": "nim wrapper for htslib for parsing genomics data files",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science"
    ]
  },
  {
    "name": "httpauth",
    "description": "HTTP Authentication and Authorization",
    "tags": [
      "http",
      "authentication",
      "authorization",
      "library",
      "security"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-httpauth",
    "url": "https://github.com/FedericoCeratto/nim-httpauth",
    "long_description": "* Encrypted+signed session cookies\n* Sync SQLite backend\n* Sync MySQL backend\n* Sync PostgreSQL backend\n* Sync Etcd backend\n* Sync Redis backend\n* Sync MongoDB backend\n* Send user registration emails\n* Send password recovery emails",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "httpbeast",
    "description": "A performant and scalable HTTP server.",
    "tags": [
      "http",
      "server",
      "parallel",
      "linux",
      "unix"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/httpbeast",
    "url": "https://github.com/dom96/httpbeast",
    "long_description": "Extremely fast HTTP responses in Nim.\nThis is a project to get the fastest possible HTTP server written in pure Nim. The server is still considered experimental but it is already used by the Jester web framework.\nNote: This HTTP server does not support Windows.\n* Built on the Nim selectors module which makes efficient use of epoll on Linux and kqueue on macOS.\n* Automatic parallelization, just make sure to compile with --threads:on.\n* Support for HTTP pipelining.\n* On-demand parser so that only the requested data is parsed.\n* Integration with Nim's asyncdispatch allowing async/await to be used in the request callback whenever necessary.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "httpform",
    "description": "Http request form parser",
    "tags": [
      "request parser",
      "upload",
      "html5 file"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tulayang/httpform",
    "url": "https://github.com/tulayang/httpform",
    "long_description": "Submit form by http protocol, upload and encoding images and videos.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "httpkit",
    "description": "An efficient HTTP tool suite written in pure nim. Help you to write HTTP services or clients via TCP, UDP, or even Unix Domain socket, etc.",
    "tags": [
      "http",
      "request",
      "response",
      "stream",
      "bigfile",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tulayang/httpkit",
    "url": "https://github.com/tulayang/httpkit",
    "long_description": "This is an efficient HTTP parser written in pure nim. It can parse both requests and responses. Give it a data chunk, it will produce all the useful http states for you. And then, you can write your HTTP services with these states.\n* Does not perform IO operations, processing data chunk is its only purpose\n* Data chunk can come from TCP socket, UDP socket, or even Unix Domain socket, etc. It means that you can write HTTP services via TCP, UDP, or even Unix Domain socket\n* No overhead. If you are writing an asynchronous web service or clients by asyncdispatch and asyncnet, HttpKit will not (create new Future to) increase overhead\n* Be convenient to transfer large files. You can define your own data buffer, decide when to store datas and when to send datas",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Network",
      "Web"
    ]
  },
  {
    "name": "httputils",
    "description": "Common utilities for implementing HTTP servers",
    "tags": [
      "http",
      "parsers",
      "protocols"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-http-utils",
    "url": "https://github.com/status-im/nim-http-utils",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Network",
      "Web"
    ]
  },
  {
    "name": "huenim",
    "description": "Huenim",
    "tags": [
      "hue",
      "iot",
      "lighting",
      "philips",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/IoTone/huenim",
    "url": "https://github.com/IoTone/huenim",
    "long_description": "Control Philips HUE lighting using nimlang. This is a first cut at a simple API that covers lighting on/off, brightness, XY color gamut, and color temp.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "i18n",
    "description": "Bring a gettext-like internationalisation module to Nim",
    "tags": [
      "gettext",
      "i18n",
      "internationalisation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Parashurama/nim-i18n",
    "url": "https://github.com/Parashurama/nim-i18n",
    "long_description": "This project is aimed at bringing an internationalisation module with a gettext-like interface to Nim.\nIt supports easy debugging as well as optimized msgid lookup. While it makes use of the encoding module (and so libiconv.so on Linux), it does NOT use libintl.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "i3ipc",
    "description": "i3 IPC client library",
    "tags": [
      "library",
      "i3"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-i3ipc",
    "url": "https://github.com/FedericoCeratto/nim-i3ipc",
    "long_description": "A Nim client library for the i3 IPC interface\nCan be used in sync or async applications.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "illwill",
    "description": "A curses inspired simple cross-platform console library for Nim",
    "tags": [
      "terminal",
      "console",
      "curses",
      "ui"
    ],
    "license": "WTFPL",
    "method": "git",
    "web": "https://github.com/johnnovak/illwill",
    "url": "https://github.com/johnnovak/illwill",
    "long_description": "illwill is a (n)curses inspired simple terminal library that aims to make writing cross-platform text mode applications easy. Having said that, it's much simpler than (n)curses and it's not as robust by far in terms of supporting different encodings, terminal types, etc. The aim was to write something small and simple in pure Nim that works for 99% of users without requiring any external dependencies or a terminfo database.\nFor \"serious\" applications, the best is always to write different backends for *nix and Windows (one of the main reasons being that the Windows Console is buffer based, not file based). But I think this library is perfect for small cross-platform programs and utilities where you need something more than the basic blocking console I/O, but you don't actually want to bother with a full-blown GUI.\n* Non-blocking keyboard input.\n* Support for key combinations and special keys available both in the standard Windows Console (cmd.exe) and most common POSIX terminals.\n* Virtual terminal buffers with double-buffering support (only display changes from the previous frame and minimise the number of attribute changes to reduce CPU usage).\n* Simple graphics using UTF-8 box drawing symbols.\n* Full-screen support with restoring the contents of the terminal after exit.\n* No dependencies—only depends on the standard terminal module.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "imageman",
    "description": "Image manipulation library",
    "tags": [
      "image",
      "graphics",
      "processing",
      "manipulation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/imageman",
    "url": "https://github.com/SolitudeSF/imageman",
    "long_description": "Rudimentary image manipulation.\n* Easy manipulation of individual pixel components\n* Image loading/saving\n* Color modes\n* Filtering\n* Dithering\n* Resizing\n* Drawing\n* Rotating",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "imap",
    "description": "IMAP client library",
    "tags": [
      "imap",
      "email"
    ],
    "license": "GPL2",
    "method": "git",
    "web": "https://github.com/ehmry/imap",
    "url": "https://github.com/ehmry/imap",
    "long_description": "This libray is only intended for abusing IMAP servers and maybe retrieving messages.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "imghdr",
    "description": "Library for detecting the format of an image",
    "tags": [
      "image",
      "formats",
      "files"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-imghdr",
    "url": "https://github.com/achesak/nim-imghdr",
    "long_description": "nim-imghdr is a Nim module for determining the type of an image from a given file, filename, or sequence of bytes. It can detect many common image formats. nim-imghdr is a port of Python's imghdr module.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "impulse_engine",
    "description": "Nim port of a simple 2D physics engine",
    "tags": [
      "physics",
      "engine",
      "2D"
    ],
    "license": "zlib",
    "method": "git",
    "web": "https://github.com/matkuki/Nim-Impulse-Engine",
    "url": "https://github.com/matkuki/Nim-Impulse-Engine",
    "long_description": "Nim programming language port of Randy Gaul's Impulse engine (https://github.com/RandyGaul/ImpulseEngine).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Games",
      "Education"
    ]
  },
  {
    "name": "influx",
    "description": "wrapper for communicating with InfluxDB over the REST interface",
    "tags": [
      "influx",
      "influxdb"
    ],
    "license": "BSD 3-Clause",
    "method": "git",
    "web": "https://github.com/samdmarshall/influx.nim",
    "url": "https://github.com/samdmarshall/influx.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "inim",
    "description": "Interactive Nim Shell",
    "tags": [
      "repl",
      "playground",
      "shell"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/AndreiRegiani/INim",
    "url": "https://github.com/AndreiRegiani/INim",
    "long_description": "* Runs on Linux, macOS and Windows\n* Auto-indent (if, for, proc, var, ...)\n* Arrow keys support (command history and line navigation)\n* Prints out value and type of discarded expressions: >>> x\n* Uses current nim compiler in PATH\n* Runs in the current directory: import your local modules (access to exported* symbols)\n* Preload existing source code (access to non-exported* symbols): inim -s example.nim\n* Colorized output",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Education",
      "Development"
    ]
  },
  {
    "name": "intel_hex",
    "description": "Intel hex file utility library",
    "tags": [
      "utils",
      "parsing",
      "hex"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/keyme/nim_intel_hex",
    "url": "https://github.com/keyme/nim_intel_hex",
    "long_description": "This library includes basic utilities for dealing with intel hex files, which are commonly used for the distribution of microcontroller firmware binaries due to their inclusion of address and data information in a single easy to parse text format. For more information about the intel hex format, see https://en.wikipedia.org/wiki/Intel_HEX",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "interfaced",
    "description": "Go-like interfaces",
    "tags": [
      "interface"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/andreaferretti/interfaced",
    "url": "https://github.com/andreaferretti/interfaced",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "io-egl",
    "description": "Obsolete - please use egl instead!",
    "tags": [
      "binding",
      "khronos",
      "egl",
      "opengl",
      "opengl es",
      "openvg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-egl",
    "url": "https://github.com/nimious/io-egl.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-gles",
    "description": "Obsolete - please use gles instead!",
    "tags": [
      "binding",
      "khronos",
      "gles",
      "opengl es"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-gles",
    "url": "https://github.com/nimious/io-gles.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-isense",
    "description": "Obsolete - please use isense instead!",
    "tags": [
      "binding",
      "isense",
      "intersense",
      "inertiacube",
      "intertrax",
      "microtrax",
      "thales",
      "tracking",
      "sensor"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-isense",
    "url": "https://github.com/nimious/io-isense.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-myo",
    "description": "Obsolete - please use myo instead!",
    "tags": [
      "binding",
      "myo",
      "thalmic",
      "armband",
      "gesture"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-myo",
    "url": "https://github.com/nimious/io-myo.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-oculus",
    "description": "Obsolete - please use oculus instead!",
    "tags": [
      "binding",
      "oculus",
      "rift",
      "vr",
      "libovr",
      "ovr",
      "dk1",
      "dk2",
      "gearvr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-oculus",
    "url": "https://github.com/nimious/io-oculus.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-serialport",
    "description": "Obsolete - please use serialport instead!",
    "tags": [
      "binding",
      "libserialport",
      "serial",
      "communication"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-serialport",
    "url": "https://github.com/nimious/io-serialport.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-sixense",
    "description": "Obsolete - please use sixense instead!",
    "tags": [
      "binding",
      "sixense",
      "razer hydra",
      "stem system",
      "vr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-sixense",
    "url": "https://github.com/nimious/io-sixense.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-spacenav",
    "description": "Obsolete - please use spacenav instead!",
    "tags": [
      "binding",
      "3dx",
      "3dconnexion",
      "libspnav",
      "spacenav",
      "spacemouse",
      "spacepilot",
      "spacenavigator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-spacenav",
    "url": "https://github.com/nimious/io-spacenav.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "io-usb",
    "description": "Obsolete - please use libusb instead!",
    "tags": [
      "binding",
      "usb",
      "libusb"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/io-usb",
    "url": "https://github.com/nimious/io-usb.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "ipsumgenera",
    "description": "Static blog generator ala Jekyll.",
    "tags": [
      "app",
      "binary",
      "blog",
      "static",
      "generator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/ipsumgenera",
    "url": "https://github.com/dom96/ipsumgenera",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "irc",
    "description": "Implements a simple IRC client.",
    "tags": [
      "library",
      "irc",
      "network"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/irc",
    "url": "https://github.com/nim-lang/irc",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 3,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "isa",
    "description": "Binding for Intel Storage Acceleration library",
    "tags": [
      "erasure",
      "hash",
      "crypto",
      "compression"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/nimscale/isa",
    "url": "https://github.com/nimscale/isa",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System",
      "Hardware"
    ]
  },
  {
    "name": "isaac",
    "description": "ISAAC PRNG implementation on Nim",
    "tags": [
      "library",
      "algorithms",
      "random",
      "crypto"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/isaac/",
    "url": "https://github.com/pragmagic/isaac/",
    "long_description": "Nim implementation of ISAAC - a cryptographically secure PRNG.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "isense",
    "description": "Bindings for the InterSense SDK",
    "tags": [
      "binding",
      "isense",
      "intersense",
      "inertiacube",
      "intertrax",
      "microtrax",
      "thales",
      "tracking",
      "sensor"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/isense",
    "url": "https://github.com/nimious/isense.git",
    "long_description": "This package contains bindings to the InterSense SDK for the Nim programming language. InterSense provides a number of inertial, magnetic and GPS 3-dof and 6-dof position tracking devices, such as the InertiaCube series and IS series systems.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "itchio",
    "description": "itch.io API Client for Nim",
    "tags": [
      "itchio",
      "game",
      "gaming",
      "async",
      "multisync"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-itchio",
    "url": "https://github.com/juancarlospaco/nim-itchio",
    "long_description": "itchio MultiSync API Client",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "itertools",
    "description": "Itertools for Nim",
    "tags": [
      "itertools",
      "python",
      "iterators",
      "iterutils",
      "iter",
      "iterator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/narimiran/itertools",
    "url": "https://github.com/narimiran/itertools",
    "long_description": "This package is a Nim rewrite of a very popular Python module of the same name.\nIt also includes some of the iterators from iterutils.\n* infinite iterators\n* terminating iterators\n* combinatoric iterators\n* iterutils iterators",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "iterutils",
    "description": "Functional operations for iterators and slices, similar to sequtils",
    "tags": [
      "library",
      "iterators"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/iterutils",
    "url": "https://github.com/def-/iterutils",
    "long_description": "This module implements operations for iterators and slices. You can see it as a lazy version of sequtils. The iterators can easily be combined.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "itn",
    "description": "Nim module for parsing ITN (TomTom intinerary) files",
    "tags": [
      "GPS",
      "intinerary",
      "tomtom",
      "ITN"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-itn",
    "url": "https://github.com/achesak/nim-itn",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "iup",
    "description": "Bindings for the IUP widget toolkit",
    "tags": [
      "GUI",
      "IUP"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/iup",
    "url": "https://github.com/nim-lang/iup",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "jack",
    "description": "Shiny bindings to the JACK Audio Connection Kit.",
    "tags": [
      "jack",
      "audio",
      "binding",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Skrylar/nim-jack",
    "url": "https://github.com/Skrylar/nim-jack",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "jade-nim",
    "description": "Compiles jade templates to Nim procedures.",
    "tags": [
      "template",
      "jade",
      "web",
      "dsl",
      "html"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/idlewan/jade-nim",
    "url": "https://github.com/idlewan/jade-nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "jdec",
    "description": "Flexible JSON manshal/unmarshal library for nim",
    "tags": [
      "json",
      "marshal",
      "helper",
      "utils"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/diegogub/jdec",
    "url": "https://github.com/diegogub/jdec",
    "long_description": "Flexible json parser and helper to marshal/unmarshal json into objects.\n* Support to all common types\n* DateTime default iso 8601 support, and any format using `dateFormat` param\n* Seq support: `seq[string]`, `seq[int]`, `seq[T]`\n* Table support: `TableRef[string,string]`, `TableRef[string,T]`\n* No missing key exception (compared to the json macro: `to(JsonNode,T)`)",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jester",
    "description": "A sinatra-like web framework for Nim.",
    "tags": [
      "web",
      "http",
      "framework",
      "dsl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/jester",
    "url": "https://github.com/dom96/jester/",
    "long_description": "The sinatra-like web framework for Nim. Jester provides a DSL for quickly creating web applications in Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "jnim",
    "description": "Nim - Java bridge",
    "tags": [
      "library",
      "java",
      "jvm",
      "bridge",
      "bindings"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/jnim",
    "url": "https://github.com/yglukhov/jnim",
    "long_description": "Native language integration with Java VM has never been easier!\n* API splitted in two parts: low and high level.\n* It supports Java inheritance and generics.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "joyent_http_parser",
    "description": "Wrapper for high performance HTTP parsing library.",
    "tags": [
      "wrapper",
      "library",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/joyent_http_parser",
    "url": "https://github.com/nim-lang/joyent_http_parser",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network",
      "Web"
    ]
  },
  {
    "name": "jsbind",
    "description": "Define bindings to JavaScript and Emscripten",
    "tags": [
      "bindings",
      "emscripten",
      "javascript"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/jsbind",
    "url": "https://github.com/yglukhov/jsbind",
    "long_description": "Create bindings to JavaScript that work when Nim is compiled to JavaScript as well as when compiled to Asm.js (through Emscripten).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "jser",
    "description": "json de/serializer for tuples and more",
    "tags": [
      "json",
      "serialize",
      "tuple"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/niv/jser.nim",
    "url": "https://github.com/niv/jser.nim",
    "long_description": "A module to easily de/serialize json data into/from native types, like tuples, seqs, or single variables.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jsmn",
    "description": "Jsmn - a world fastest JSON parser - in pure Nim",
    "tags": [
      "json",
      "token",
      "tokenizer",
      "parser",
      "jsmn"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/jsmn.nim",
    "url": "https://github.com/OpenSystemsLab/jsmn.nim",
    "long_description": "This module is a fork of Jsmn - a world fastest JSON parser/tokenizer",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "json_builder",
    "description": "Easy and fast generator for valid json in nim",
    "tags": [
      "json",
      "generator",
      "builder"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/undecided/json_builder",
    "url": "https://github.com/undecided/json_builder",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "json_rpc",
    "description": "Nim library for implementing JSON-RPC clients and servers",
    "tags": [
      "library",
      "json-rpc",
      "server",
      "client",
      "rpc",
      "json"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-json-rpc",
    "url": "https://github.com/status-im/nim-json-rpc",
    "long_description": "Json-Rpc is a library for routing JSON 2.0 format remote procedure calls over different transports. It is designed to automatically generate marshalling and parameter checking code based on the RPC parameter types.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "json_serialization",
    "description": "Flexible JSON serialization not relying on run-time type information",
    "tags": [
      "library",
      "json",
      "serialization"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-json-serialization",
    "url": "https://github.com/status-im/nim-json-serialization",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jsonob",
    "description": "JSON / Object mapper",
    "tags": [
      "json",
      "object",
      "marshal"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cjxgm/jsonob",
    "url": "https://github.com/cjxgm/jsonob",
    "long_description": "You model your nim objects directly around the JSON data. jsonob serialize it to JSON, or parse the JSON to your objects.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jsonschema",
    "description": "JSON schema validation and creation.",
    "tags": [
      "json",
      "schema",
      "library",
      "validation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/jsonschema",
    "url": "https://github.com/PMunch/jsonschema",
    "long_description": "When working with JSON data in Nim you must ensure that all the keys you require are present and that the values they store are of the correct type. Failure to do so will result in exceptions and make your program fragile. The jsonschema module implements a schema DSL that generates verifiers and creators for structured JSON data. The DSL is based around TypeScript, but is not 100% compatible (yet).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jstin",
    "description": "JS {de,}serialization as it says on the tin",
    "tags": [
      "json",
      "serialize",
      "deserialize",
      "easy",
      "simple"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/LemonBoy/jstin",
    "url": "https://github.com/LemonBoy/jstin",
    "long_description": "JSON {de,}serialization for the working men.\n* Automagic: compile-time magic makes sure your data is correctly mapped into appropriate json objects.\n* Simple: a set of procedures that know how to handle a particular kind of data are gracefully composed toghether behind your back.\n* Extensible: if you ever need to write your own serializer/deserializer you can do so in a few lines of code.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "jsutils",
    "description": "Utils to work with javascript",
    "tags": [
      "library",
      "javascript"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kidandcat/jsutils",
    "url": "https://github.com/kidandcat/jsutils",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "jswebsockets",
    "description": "Websockets wrapper for nim js backend.",
    "tags": [
      "js",
      "javascripts",
      "ws",
      "websockets"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://stisa.space/jswebsockets/",
    "url": "https://github.com/stisa/jswebsockets",
    "long_description": "Beginning of a wrapper for websockets, for the javascript backend",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Network"
    ]
  },
  {
    "name": "jwt",
    "description": "JSON Web Tokens for Nim",
    "tags": [
      "library",
      "crypto",
      "hash"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/nim-jwt",
    "url": "https://github.com/yglukhov/nim-jwt.git",
    "long_description": "This is a implementation of JSON Web Tokens for Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "karax",
    "description": "Karax is a framework for developing single page applications in Nim.",
    "tags": [
      "browser",
      "DOM",
      "virtual-DOM",
      "UI"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/karax",
    "url": "https://github.com/pragmagic/karax",
    "long_description": "Karax is a framework for developing single page applications in Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "kdialog",
    "description": "KDialog Qt5 Wrapper, easy API, KISS design",
    "tags": [
      "kdialog",
      "qt5",
      "kde",
      "gui",
      "easy",
      "qt"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-kdialog",
    "url": "https://github.com/juancarlospaco/nim-kdialog",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "keccak_tiny",
    "description": "A wrapper for the keccak-tiny C library",
    "tags": [
      "library",
      "sha3",
      "keccak",
      "cryptography"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-keccak-tiny",
    "url": "https://github.com/status-im/nim-keccak-tiny",
    "long_description": "A wrapper for the keccak-tiny C library\nWarning! A native Nim implementation of SHA3 and Keccak is now available in the nimcrypto library. We recommend using it.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "kexpr",
    "description": "wrapper for kexpr math expression evaluation library",
    "tags": [
      "math",
      "expression",
      "evalute"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/brentp/kexpr-nim",
    "url": "https://github.com/brentp/kexpr-nim",
    "long_description": "nim wrapper for Heng Li's kexpr math expression library",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "keystone",
    "description": "Bindings to the Keystone Assembler.",
    "tags": [
      "binding",
      "keystone",
      "asm",
      "assembler",
      "x86",
      "arm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/6A/Keystone.nim",
    "url": "https://github.com/6A/Keystone.nim",
    "long_description": "Nim bindings for the Keystone assembler.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System",
      "Hardware"
    ]
  },
  {
    "name": "kissfft",
    "description": "Nim binding for KissFFT Fast Fourier Transform library",
    "tags": [
      "fft",
      "dsp",
      "signal"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/m13253/nim-kissfft",
    "url": "https://github.com/m13253/nim-kissfft",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths",
      "Algorithms"
    ]
  },
  {
    "name": "kiwi",
    "description": "Cassowary constraint solving",
    "tags": [
      "cassowary",
      "constraint",
      "solving"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/kiwi",
    "url": "https://github.com/yglukhov/kiwi",
    "long_description": "A Nim port of the kiwi-java implementation of the Cassowary constraint solving algorithm",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Algorithms"
    ]
  },
  {
    "name": "kmer",
    "description": "encoded kmer library for fast operations on kmers up to 31",
    "tags": [
      "kmer",
      "dna",
      "sequence"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/brentp/nim-kmer",
    "url": "https://github.com/brentp/nim-kmer",
    "long_description": "this module allows encoding kmers of length up to 31 into uint64's\nit is as fast as possible and allows reverse-complenting on encoded data and adding a single base to the right end or a complemented base for the left end as is needed when sliding along a sequence to generate all kmers.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "kmod",
    "description": "High-level wrapper for Linux's kmod library",
    "tags": [
      "kmod",
      "wrapper"
    ],
    "license": "ISC",
    "method": "git",
    "web": "https://github.com/alaviss/kmod",
    "url": "https://github.com/alaviss/kmod",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "kwin",
    "description": "KWin JavaScript API wrapper",
    "tags": [
      "library",
      "javascript",
      "kde"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/reactormonk/nim-kwin",
    "url": "https://github.com/reactormonk/nim-kwin",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "ladder",
    "description": "Ladder logic macros for Nim",
    "tags": [
      "ladder",
      "logic",
      "PLC",
      "state",
      "machine",
      "ryukoposting"
    ],
    "license": "Apache-2.0",
    "method": "git",
    "web": "https://gitlab.com/ryukoposting/nim-ladder",
    "url": "https://gitlab.com/ryukoposting/nim-ladder",
    "long_description": "ladder contains the macro expressions necessary to use ladder logic\nin Nim. Ladder logic is a form of logical program expression akin to\nif-else, but has only one nested section instead of two. Wikipedia\nhas a good introduction to ladder logic.\nLadder logic is rarely implemented in general-purpose programming languages,\nbut is ubiquitous in languages used on industrial programmable logic\ncontrollers.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language",
      "Hardware"
    ]
  },
  {
    "name": "lapp",
    "description": "Opt parser using synopsis as specification, ported from Lua.",
    "tags": [
      "args",
      "cmd",
      "opt",
      "parse",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://gitlab.3dicc.com/gokr/lapp",
    "url": "https://gitlab.3dicc.com/gokr/lapp.git",
    "long_description": "Lapp is a command line parser that uses the regular help text for the synopsis as the specification for the options and arguments, it was originally written by Steve Donovan in Lua: http://lua-users.org/wiki/LappFramework ...and ported to Nim by Steve. Then I made it work with current Nim.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "lapper",
    "description": "fast interval overlaps",
    "tags": [
      "interval"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/brentp/nim-lapper",
    "url": "https://github.com/brentp/nim-lapper",
    "long_description": "simple, fast interval searches for nim\nThis uses a binary search in a sorted list of intervals along with knowledge of the longest interval. It works when the size of the largest interval is smaller than the average distance between intervals. As that ratio of largest-size::mean-distance increases, the performance decreases. On realistic (for my use-case) data, this is 1000 times faster to query results and >5000 times faster to check for presence than a brute-force method.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "laser",
    "description": "High Performance Computing and Image Toolbox: SIMD, JIT Assembler, OpenMP, runtime CPU feature detection, optimised machine learning primitives",
    "tags": [
      "parallel",
      "simd"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/numforge/laser",
    "url": "https://github.com/numforge/laser",
    "long_description": "Carefully-tuned primitives for running tensor and image-processing code on CPU, GPUs and accelerators.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Data science",
      "Hardware"
    ]
  },
  {
    "name": "lastfm",
    "description": "Last.FM API breakouts (documentation: http://ryuk.ooo/nimdocs/lastfm/lastfm.html)",
    "tags": [
      "last.fm",
      "lastfm",
      "music",
      "metadata",
      "api",
      "async",
      "ryukoposting"
    ],
    "license": "Apache-2.0",
    "method": "git",
    "web": "https://gitlab.com/ryukoposting/lastfm-nim",
    "url": "https://gitlab.com/ryukoposting/lastfm-nim",
    "long_description": "This library contains async-friendly bindings to the Last.FM web API. The library returns\nAPI data as JsonNodes.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Miscellaneous"
    ]
  },
  {
    "name": "lazy",
    "description": "Iterator library for Nim",
    "tags": [
      "library",
      "iterator",
      "lazy list"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/petermora/nimLazy",
    "url": "https://github.com/petermora/nimLazy/",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "lazy_rest",
    "description": "Simple reST HTML generation with some extras.",
    "tags": [
      "library",
      "rst",
      "rest",
      "text",
      "html"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/lazy_rest",
    "url": "https://github.com/Araq/lazy_rest",
    "long_description": "Lazy reST is a Nimrod module providing a spin-off higher level API over Nimrod's rstgen module. The main reasons for this spin-off are:\n* Incompatible, but easier and safer to use API.\n* Explicit C API support for embedding.\n* Embeds Prism for code syntax highlighting of more languages.\n* Drops explicit support for LaTeX.\n* All the latest features supported on the latest stable Nimrod compiler.\nOn top of the library code, the lazy_rest_badger.exe program shows how to use the library and provides a simple practical rst to html command line tool.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Reporting",
      "Web"
    ]
  },
  {
    "name": "lc",
    "description": "A post-modern, \"multi-dimensional\" configurable ls/file lister",
    "tags": [
      "terminal",
      "cli",
      "binary",
      "linux",
      "unix",
      "bsd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/c-blake/lc",
    "url": "https://github.com/c-blake/lc",
    "long_description": "This program is not and never will be a drop-in replacement for ls at the CLI option compatibility level. ls is a poorly factored mishmash of selection, sorting, and formatting options. With fewer CLI options (but beefier configs) lc is many-fold more flexible. It can create similar output, but my main impetus to write lc was always a better functionality factoring not mere recapitulation. So, lc is not just \"ls in Nim\". If you want ls, it has giant companies supporting it and isn't going anywhere.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "lda",
    "description": "Latent Dirichlet Allocation",
    "tags": [
      "LDA",
      "topic-modeling",
      "text-clustering",
      "NLP"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/lda",
    "url": "https://github.com/unicredit/lda",
    "long_description": "This library implements a form of text clustering and topic modeling called Latent Dirichlet Allocation.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Data science"
    ]
  },
  {
    "name": "libclang",
    "description": "wrapper for libclang (the C-interface of the clang LLVM frontend)",
    "tags": [
      "wrapper",
      "bindings",
      "clang"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cowboy-coders/nim-libclang",
    "url": "https://github.com/cowboy-coders/nim-libclang.git",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "libcurl",
    "description": "Nim wrapper for libcurl.",
    "tags": [
      "curl",
      "web",
      "http",
      "download"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/libcurl",
    "url": "https://github.com/Araq/libcurl",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network",
      "Web"
    ]
  },
  {
    "name": "libevdev",
    "description": "Wrapper for libevdev, Linux input device processing library",
    "tags": [
      "wrapper",
      "os",
      "linux"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/luked99/libevdev.nim",
    "url": "https://github.com/luked99/libevdev.nim",
    "long_description": "This is a raw wrapper around the libevdev library, used for reading events from the Linux event subsystem, such as keyboards, mice and touchscreens.\nhttps://www.freedesktop.org/wiki/Software/libevdev/",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "libffi",
    "description": "libffi wrapper for Nim.",
    "tags": [
      "ffi",
      "library",
      "C",
      "calling",
      "convention"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/libffi",
    "url": "https://github.com/Araq/libffi",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "libgcrypt",
    "description": "libgcrypt wrapper",
    "tags": [
      "wrapper",
      "library",
      "security",
      "crypto"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-libgcrypt",
    "url": "https://github.com/FedericoCeratto/nim-libgcrypt",
    "long_description": "Wrap libgcrypt 1.8.4\nTested on Linux\nBasic unit tests\nNo homemade crypto",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "libgit2",
    "description": "Libgit2 low level wrapper",
    "tags": [
      "git",
      "libgit",
      "libgit2",
      "vcs",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/libgit2-nim",
    "url": "https://github.com/barcharcraz/libgit2-nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "libgraph",
    "description": "Converts 2D linear graph coordinates to pixels on screen",
    "tags": [
      "graph",
      "math",
      "conversion",
      "pixels",
      "coordinates"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Mnenmenth/libgraphnim",
    "url": "https://github.com/Mnenmenth/libgraphnim",
    "long_description": "Allows the user to plot points on screen using coordinates instead of pixels. Users define the screen size and the max/min for the graph. The library converts the coordinate points to pixels on the screen.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "libipset",
    "description": "libipset wrapper for Nim",
    "tags": [
      "ipset",
      "firewall",
      "netfilter",
      "mac",
      "ip",
      "network",
      "collection",
      "rule",
      "set"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/libipset.nim",
    "url": "https://github.com/ba0f3/libipset.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "libjwt",
    "description": "Bindings for libjwt",
    "tags": [
      "jwt",
      "libjwt"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/nimscale/nim-libjwt",
    "url": "https://github.com/nimscale/nim-libjwt",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network",
      "Web"
    ]
  },
  {
    "name": "libkeepass",
    "description": "Library for reading KeePass files and decrypt the passwords within it",
    "tags": [
      "keepass",
      "password",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/libkeepass",
    "url": "https://github.com/PMunch/libkeepass",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "libmpdclient",
    "description": "Bindings for the Music Player Daemon C client library",
    "tags": [
      "MPD",
      "Music Player Daemon"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/lompik/libmpdclient.nim",
    "url": "https://github.com/lompik/libmpdclient.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "libnotify",
    "description": "Minimalistic libnotify wrapper for desktop notifications",
    "tags": [
      "library",
      "wrapper",
      "desktop"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-libnotify",
    "url": "https://github.com/FedericoCeratto/nim-libnotify.git",
    "long_description": "A minimalistic libnotify wrapper for Linux desktop notifications written in Nim.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "libnx",
    "description": "A port of libnx to Nim",
    "tags": [
      "switch",
      "nintendo",
      "libnx",
      "nx"
    ],
    "license": "Unlicense",
    "method": "git",
    "web": "https://github.com/jyapayne/nim-libnx",
    "url": "https://github.com/jyapayne/nim-libnx",
    "long_description": "Libnx ported to the Nim programming language. You will need a Nim compiler with Nintendo switch support which can be found in the latest devel branch of the Nim compiler.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "libovr",
    "description": "Nim bindings for libOVR (Oculus Rift)",
    "tags": [
      "Oculus Rift",
      "virtual reality"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/nim-ovr",
    "url": "https://github.com/bluenote10/nim-ovr",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "libp2p",
    "description": "libp2p implementation in Nim",
    "tags": [
      "library",
      "networking",
      "libp2p",
      "ipfs",
      "ethereum"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-libp2p",
    "url": "https://github.com/status-im/nim-libp2p",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 3,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "libplist",
    "description": "wrapper around libplist https://github.com/libimobiledevice/libplist",
    "tags": [
      "libplist",
      "property",
      "list",
      "property-list",
      "parsing",
      "binary",
      "xml",
      "format"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/samdmarshall/libplist.nim",
    "url": "https://github.com/samdmarshall/libplist.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "libravatar",
    "description": "Libravatar library for Nim, Gravatar alternative. Libravatar is an open source free federated avatar api & service.",
    "tags": [
      "libravatar",
      "gravatar",
      "avatar",
      "federated"
    ],
    "license": "PPL",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-libravatar",
    "url": "https://github.com/juancarlospaco/nim-libravatar",
    "long_description": "Libravatar library for Nim, Gravatar alternative. Libravatar is an open source federated avatar api and service.\n* Your users nor you dont need a Libravatar account if you dont want to, because if Libravatar cant find you it redirects you to your Gravatar, if you have no Gravatar then it returns a default autogenerated image.\n* Federation supported passing baseUrl, DNS server discovery is up to you if you want to, Pull Request welcome.\n* 404 wont return 404, but a default image, use default=\"404\" for a HTTP 404 Error.\n* Uses func so is Side Effects Free, works with Async & MultiSync.\n* runnableExamples included, Self-Documented, NEP-1 Ok.\n* Best quality avatar sizes are between 80 & 128, 512 may or may not look a little stretched, depends on original quality.\n* Tiny and simple but reusable code.\n* By design is also a Gravatar library :)",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "libsha",
    "description": "Sha1 and Sha2 implementations",
    "tags": [
      "sha1",
      "sha224",
      "sha256",
      "sha384",
      "sha512"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/forlan-ua/nim-libsha",
    "url": "https://github.com/forlan-ua/nim-libsha",
    "long_description": "SHA-1 (Secure Hash Algorithm 1) is a cryptographic hash function which takes an input and produces a 160-bit (20-byte) hash value.\nSHA-2 (Secure Hash Algorithm 2) is a set of cryptographic hash functions designed by the United States National Security Agency (NSA).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "libsodium",
    "description": "libsodium wrapper",
    "tags": [
      "wrapper",
      "library",
      "security",
      "crypto"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-libsodium",
    "url": "https://github.com/FedericoCeratto/nim-libsodium",
    "long_description": "Nim wrapper for the libsodium library\n* Wrap libsodium and expose only memory-safe entities\n* Follow libsodium naming convention for most functions\n* Tested on Linux\n* Basic unit tests\n* No homemade crypto",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms",
      "Network"
    ]
  },
  {
    "name": "libssh",
    "description": "libssh FFI bindings",
    "tags": [
      "ssh",
      "libssh"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dariolah/libssh-nim",
    "url": "https://github.com/dariolah/libssh-nim",
    "long_description": "libssh is a multiplatform C library implementing the SSHv2 protocol on client and server side. With libssh, you can remotely execute programs, transfer files, use a secure and transparent tunnel, manage public keys and much more ...",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "libssh2",
    "description": "Nim wrapper for libssh2",
    "tags": [
      "lib",
      "ssh",
      "ssh2",
      "openssh",
      "client",
      "sftp",
      "scp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/libssh2.nim",
    "url": "https://github.com/ba0f3/libssh2.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "libsvm",
    "description": "libsvm wrapper for Nim",
    "tags": [
      "scientific",
      "svm",
      "vector"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/libsvm",
    "url": "https://github.com/genotrance/libsvm",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Data science"
    ]
  },
  {
    "name": "libsvm_legacy",
    "description": "Wrapper for libsvm.",
    "tags": [
      "wrapper",
      "library",
      "scientific"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/libsvm_legacy",
    "url": "https://github.com/nim-lang/libsvm_legacy",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "libtcod_nim",
    "description": "Wrapper of the libtcod library for the Nim language.",
    "tags": [
      "roguelike",
      "game",
      "library",
      "engine",
      "sdl",
      "opengl",
      "glsl"
    ],
    "license": "zlib",
    "method": "git",
    "web": "https://github.com/Vladar4/libtcod_nim",
    "url": "https://github.com/Vladar4/libtcod_nim/",
    "long_description": "Libtcod, a.k.a. “The Doryen Library”, is a free, fast, portable and uncomplicated API for roguelike developers providing an advanced true color console, input, and lots of other utilities frequently used in roguelikes.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "libusb",
    "description": "Bindings for libusb, the cross-platform user library to access USB devices.",
    "tags": [
      "binding",
      "usb",
      "libusb"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/libusb",
    "url": "https://github.com/nimious/libusb.git",
    "long_description": "This package contains binding to libusb for the Nim programming language. libusb provides generic access to USB devices. It is portable, requires no special privileges or elevation and supports all versions of the USB protocol.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System",
      "Hardware"
    ]
  },
  {
    "name": "libuv",
    "description": "libuv bindings for Nim",
    "tags": [
      "libuv",
      "wrapper",
      "node",
      "networking"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lcrees/libuv",
    "url": "https://github.com/lcrees/libuv",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Network",
      "System"
    ]
  },
  {
    "name": "lilt",
    "description": "Parsing language",
    "tags": [
      "language",
      "parser",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/quelklef/lilt",
    "url": "https://github.com/quelklef/lilt",
    "long_description": "Lilt is a content-free parser generator. It accepts a specification and returns a parser based on that specification. Lilt specifications look very similar to Backus-Naur form, but have extra syntax in order to be a parser generator rather than just a grammar specification.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "linagl",
    "description": "OpenGL math library",
    "tags": [
      "library",
      "opengl",
      "math",
      "game"
    ],
    "license": "CC0",
    "method": "hg",
    "web": "https://bitbucket.org/BitPuffin/linagl",
    "url": "https://bitbucket.org/BitPuffin/linagl",
    "long_description": "OpenGL linear algebra library for nimrod, coming soon!",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "linalg",
    "description": "Linear algebra for Nim",
    "tags": [
      "vector",
      "matrix",
      "linear-algebra",
      "BLAS",
      "LAPACK"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/linear-algebra",
    "url": "https://github.com/unicredit/linear-algebra",
    "long_description": "This library is not mantained anymore. It still works fine, but new development happens on Neo. The main difference between the two libraries is that Neo only focuses in what we call here dynamic vectors and matrices. Using static types to encode dimensions was a nice experiment, but it turned out to be one more dimension to support (along with 32 vs 64 bit, CPU vs GPU, dense vs sparse...).\nThis library is meant to provide basic linear algebra operations for Nim applications. The ambition would be to become a stable basis on which to develop a scientific ecosystem for Nim, much like Numpy does for Python.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "*Dead*",
      "Data science"
    ]
  },
  {
    "name": "linenoise",
    "description": "Wrapper for linenoise, a free, self-contained alternative to GNU readline.",
    "tags": [
      "linenoise",
      "readline",
      "library",
      "wrapper",
      "command-line"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/fallingduck/linenoise-nim",
    "url": "https://github.com/fallingduck/linenoise-nim",
    "long_description": "Linenoise is a minimalistic alternative to the GNU readline library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "linuxfb",
    "description": "Wrapper around the Linux framebuffer driver ioctl API",
    "tags": [
      "wrapper",
      "graphics",
      "linux"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/luked99/linuxfb.nim",
    "url": "https://github.com/luked99/linuxfb.nim",
    "long_description": "This is a raw wrapper around the Linux framebuffer driver ioctl API.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Video"
    ]
  },
  {
    "name": "listsv",
    "description": "Basic operations on singly and doubly linked lists.",
    "tags": [
      "singly linked list",
      "doubly linked list"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/srwiley/listsv",
    "url": "https://github.com/srwiley/listsv.git",
    "long_description": "A Nim language module that implements singly and doubly linked lists with features including insertions, finding, deleting, extracting, and forward and reverse iterators.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "litestore",
    "description": "A lightweight, self-contained, RESTful, searchable, multi-format NoSQL document store",
    "tags": [
      "database",
      "rest",
      "sqlite"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://h3rald.com/litestore",
    "url": "https://github.com/h3rald/litestore",
    "long_description": "LiteStore is a lightweight, self-contained, RESTful, multi-format NoSQL document store server written in Nim and powered by a SQLite“ backend for storage. It aims to be a very simple and lightweight backend ideal for prototyping and testing REST APIs and client-side, single-page applications.\nLiteStore is:\n* cross-platform, you can download precompiled binaries for macOS, Linux and Windows.\n* self-contained, it’s a command-line application that doesn’t require installing or prerequisites: it’s all in a single, small, executable file.\n* RESTful, you can access it via HTTP — perfect for prototyping SPAs.",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Database",
      "Web"
    ]
  },
  {
    "name": "lmdb",
    "description": "A wrapper for LMDB the Lightning Memory-Mapped Database",
    "tags": [
      "wrapper",
      "lmdb",
      "key-value"
    ],
    "license": "OpenLDAP",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-lmdb",
    "url": "https://github.com/FedericoCeratto/nim-lmdb",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "loadenv",
    "description": "load .env variables",
    "tags": [
      "environment",
      "variables",
      "env"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/nim-loadenv",
    "url": "https://github.com/xmonader/nim-loadenv",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "System"
    ]
  },
  {
    "name": "locale",
    "description": "A simple library for localizing Nim applications.",
    "tags": [
      "library",
      "locale",
      "i18n",
      "localization",
      "localisation",
      "globalization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Amrykid/nim-locale",
    "url": "https://github.com/Amrykid/nim-locale/",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "loco",
    "description": "Localization package for Nim.",
    "tags": [
      "localization",
      "translation",
      "internationalization",
      "i18n"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/moigagoo/loco",
    "url": "https://github.com/moigagoo/loco",
    "long_description": "Loco helps localize Nim apps. Uses classic declaratively defined \"zero-one-few-many\" language variables, but thanks to Nim's superpowers, you also have code completion and compilation checks for language variables.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "lolcat",
    "description": "lolcat implementation in Nim",
    "tags": [
      "lolcat",
      "binary",
      "tool",
      "colors",
      "fun"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OHermesJunior/lolcat.nim",
    "url": "https://github.com/OHermesJunior/lolcat.nim",
    "long_description": "lolcat implemented with nim It's a simple program I made to learn the Nim language\n* Fast and with no dependencies (compiles to C)\n* Handles lines with terminal width and EOL\n* Always uses truecolor\n* Animates text print",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "loopfusion",
    "description": "Loop efficiently over a variadic number of containers",
    "tags": [
      "loop",
      "iterator",
      "zip",
      "forEach",
      "variadic"
    ],
    "license": "MIT or Apache 2.0",
    "method": "git",
    "web": "https://github.com/numforge/loopfusion",
    "url": "https://github.com/numforge/loopfusion",
    "long_description": "Iterate efficiently over a variadic number of containers.\nThe loop structure is generated inline at compile-time.\nThere are no temporary allocation.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "lscolors",
    "description": "A library for colorizing paths according to LS_COLORS",
    "tags": [
      "lscolors",
      "posix",
      "unix",
      "linux",
      "ls",
      "terminal"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/joachimschmidt557/nim-lscolors",
    "url": "https://github.com/joachimschmidt557/nim-lscolors",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "lua",
    "description": "Wrapper to interface with the Lua interpreter",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/lua",
    "url": "https://github.com/nim-lang/lua",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Language"
    ]
  },
  {
    "name": "ludens",
    "description": "Little game library using opengl and sfml",
    "tags": [
      "library",
      "game",
      "opengl",
      "sfml"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rnentjes/nim-ludens",
    "url": "https://github.com/rnentjes/nim-ludens",
    "long_description": "Little game library written in Nim using opengl and sfml",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "luhncheck",
    "description": "Implementation of Luhn algorithm in nim.",
    "tags": [
      "library",
      "algorithm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/sillibird/luhncheck",
    "url": "https://github.com/sillibird/luhncheck",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "luna",
    "description": "Lua convenience library for nim",
    "tags": [
      "lua",
      "scripting"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/smallfx/luna.nim",
    "url": "https://github.com/smallfx/luna.nim",
    "long_description": "luna.nim is a convenience library for implementing Lua scripting in the nim language.\nI created luna with game engines in mind, though it probably has potential for more applications.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Language"
    ]
  },
  {
    "name": "magic",
    "description": "libmagic for nim",
    "tags": [
      "libmagic",
      "magic",
      "guessfile"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/nim-magic",
    "url": "https://github.com/xmonader/nim-magic",
    "long_description": "Libmagic is a magic number recognition library, remember everytime you called file utility on a file to know its type?",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "mangle",
    "description": "Yet another iterator library",
    "tags": [
      "functional",
      "iterators",
      "lazy",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/baabelfish/mangle",
    "url": "https://github.com/baabelfish/mangle",
    "long_description": "Attempt at a streaming lib",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language",
      "Data science"
    ]
  },
  {
    "name": "mapbits",
    "description": "Access bit mapped portions of bytes in binary data as int variables",
    "tags": [
      "map",
      "bits",
      "byte",
      "word",
      "binary"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jlp765/mapbits",
    "url": "https://github.com/jlp765/mapbits",
    "long_description": "Access mapped portions of bytes as int variables\nA library to simplify mapping sub-byte portions of structures to/from int values, allowing every interaction to be done using int rather than char-sized values. This module should help simplify working with binary data, e.g. when parsing binary data ( parseFixed module ), or working with memory-mapped files ( [memfiles module] (http://nim-lang.org/docs/memfiles.html) )\nEach portion of a byte is represented by an int value that is mapped to/from the portion of the byte.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "markdown",
    "description": "A Beautiful Markdown Parser in the Nim World.",
    "tags": [
      "markdown",
      "md",
      "docs",
      "html"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/soasme/nim-markdown",
    "url": "https://github.com/soasme/nim-markdown",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Web",
      "Tools"
    ]
  },
  {
    "name": "masterpassword",
    "description": "Master Password algorith implementation",
    "tags": [
      "masterpassword",
      "password",
      "stateless"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/masterpassword",
    "url": "https://github.com/SolitudeSF/masterpassword",
    "long_description": "Nim implementation of Master Password algorithm\n`mpwc` is a command line password manager using this library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "mathexpr",
    "description": "MathExpr - pure-Nim mathematical expression evaluator library",
    "tags": [
      "math",
      "mathparser",
      "tinyexpr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Yardanico/nim-mathexpr",
    "url": "https://github.com/Yardanico/nim-mathexpr",
    "long_description": "This is a mathematic expression evaluator library in pure Nim (with no third-party dependencies). It supports many mathematical functions, also you provide variables and add custom functions.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "matplotnim",
    "description": "A Nim wrapper for Python's matplotlib",
    "tags": [
      "science",
      "plotting",
      "graphics",
      "wrapper",
      "library"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/ruivieira/matplotnim",
    "url": "https://github.com/ruivieira/matplotnim",
    "long_description": "A Nim wrapper for matplotlib.\n* Line plots\n* Scatter plots\n* Histograms\n* Line segments\n* Axis (horizontal and vertical) lines\n* Font customisation\n* Annotations\n* Custom size and DPI\n* Sub-plots\n* Horizontal and vertical limits\n* Custom markers",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Reporting",
      "Data science"
    ]
  },
  {
    "name": "maybe",
    "description": "basic monadic maybe type for Nim",
    "tags": [
      "library",
      "functional",
      "optional",
      "monad"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/superfunc/maybe",
    "url": "https://github.com/superfunc/maybe",
    "long_description": "An implementation of a maybe type, also known as option(al) in other languages.\nWhy Not Just use `Option[T]` from the standard library?: In short, this library doesn't throw exceptions. It achieves this by using a macro to provide a safe pattern in which a maybe object can't be invalidly accessed.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "mc_events",
    "description": "Event Based Programming for Nim.",
    "tags": [
      "events",
      "emitter"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/MerosCrypto/mc_events",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "mdevolve",
    "description": "Integrator framework for Molecular Dynamic evolutions",
    "tags": [
      "MD",
      "integrator",
      "numerical",
      "evolution"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jxy/MDevolve",
    "url": "https://github.com/jxy/MDevolve",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "memo",
    "description": "Memoize Nim functions",
    "tags": [
      "memo",
      "memoization",
      "memoize",
      "cache"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/andreaferretti/memo",
    "url": "https://github.com/andreaferretti/memo",
    "long_description": "This small package offers a function and a macro to memoize Nim functions.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "memviews",
    "description": "Unsafe in-place slicing",
    "tags": [
      "library",
      "slice",
      "slicing",
      "shallow",
      "array",
      "vector"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ReneSac/memviews",
    "url": "https://github.com/ReneSac/memviews",
    "long_description": "The memviews module implements a very thin wrapper around array like types in Nim or any contiguous memory region you have a pointer to. It can be used to make shallow slices of your data, have a uniform interface to both seq and string (among other types) and acess C arrays more naturally and with optional bounds checking.",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "mentat",
    "description": "A Nim library for data science and machine learning",
    "tags": [
      "science",
      "machine-learning",
      "data-science",
      "statistics",
      "math",
      "library"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/ruivieira/nim-mentat",
    "url": "https://github.com/ruivieira/nim-mentat",
    "long_description": "A Nim library for data science and machine learning.\n* Balanced Box-Decomposition Trees (BBD trees)\n* Exponentially weighted moving averages (EWMA)\n* Monotonic Cubic Spline interpolation",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Data science"
    ]
  },
  {
    "name": "metatools",
    "description": "Metaprogramming tools for Nim",
    "tags": [
      "macros",
      "metaprogramming"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jxy/metatools",
    "url": "https://github.com/jxy/metatools",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "metric",
    "description": "Dimensionful types and dimensional analysis.",
    "tags": [
      "library",
      "units",
      "scientific",
      "dimensional-analysis"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mjendrusch/metric",
    "url": "https://github.com/mjendrusch/metric",
    "long_description": "metric is a small library providing type-level dimensional analysis. It allows you to keep track of the physical units of your programs, and can be useful for writing scientific software.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Science",
      "Education"
    ]
  },
  {
    "name": "metrics",
    "description": "Nim metrics client library supporting the Prometheus monitoring toolkit",
    "tags": [
      "library",
      "metrics",
      "prometheus",
      "statsd"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-metrics",
    "url": "https://github.com/status-im/nim-metrics",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Cloud"
    ]
  },
  {
    "name": "microasynchttpserver",
    "description": "A thin asynchronous HTTP server library, API compatible with Nim's built-in asynchttpserver.",
    "tags": [
      "web",
      "http",
      "async",
      "server"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/philip-wernersbach/microasynchttpserver",
    "url": "https://github.com/philip-wernersbach/microasynchttpserver",
    "long_description": "microasynchttpserver is a thin asynchronous HTTP server library for Nim. It is API compatible with Nim's built-in asynchttpserver, and allows programs greater control over the HTTP connection than asynchttpserver does.\n* Production-ready\n* Uses nim-picohttpparser for HTTP header parsing\n* Acts as a thin HTTP server library",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "midnight_dynamite",
    "description": "Wrapper for the markdown rendering hoedown library",
    "tags": [
      "wrapper",
      "library",
      "html",
      "markdown",
      "md"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/midnight_dynamite",
    "url": "https://github.com/Araq/midnight_dynamite",
    "long_description": "midnight_dynamite is a wrapper around the hoedown C library which renders Markdown. The wrapper provides both the low level C API and a higher level convenience layer. The higher level API is not yet complete and offers only basic rendering features. Missing features like table of contents extraction or renderer customization will be provided in future releases.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Web",
      "Tools"
    ]
  },
  {
    "name": "migrate",
    "description": "A simple database migration utility for Nim.",
    "tags": [
      "migrate",
      "database",
      "db"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/migrate.nim",
    "url": "https://github.com/euantorano/migrate.nim",
    "long_description": "A simple database migration utility for Nim.\nDatabase migrations let you easily manage the state of your SQL database, tracking and automating the applying of changes.\nThis package is available as both a library and a command line application, with very similar interfaces.\nThis package currently only supports MySQL and is fairly opinionated about how things should work, with migrations consisting of two files, both of which are prefixed with the current timestamp. These files (xxx.up.sql and xxx.down.sql) describe the process to run a migration, and to then later revert that migration.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "miniz",
    "description": "Bindings for Miniz lib.",
    "tags": [
      "zlib",
      "zip",
      "wrapper",
      "compression"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/treeform/miniz",
    "long_description": "Exposes only 2 functions compress() and uncompress().\nMiniz is a Single C source file zlib-replacement library: https://github.com/richgel999/miniz",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "minmaxheap",
    "description": "MinMaxHeap",
    "tags": [
      "minmaxheap",
      "heap",
      "priorityqueue"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/stefansalewski/minmaxheap",
    "url": "https://github.com/stefansalewski/minmaxheap",
    "long_description": "Nim implementation of a Minimum-Maximum Heap.\nThe heap is generic, this means it works for most data elements when \"<\" relation is defined. Add(), popMin() and popMax() operations are O(log N), access to min and max is O(1) according to Wikipedia. Build time of initial heap is linear O(N) and read access to min or max element is O(1).",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "mmgeoip",
    "description": "MaxMind GeoIP library",
    "tags": [
      "geoip"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-mmgeoip",
    "url": "https://github.com/FedericoCeratto/nim-mmgeoip",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "moduleinit",
    "description": "Nim module/thread initialisation ordering library",
    "tags": [
      "library",
      "parallelism",
      "threads"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/skunkiferous/moduleinit",
    "url": "https://github.com/skunkiferous/moduleinit",
    "long_description": "nim package that provides module/thread initialisation ordering\nFunction provided by moduleinit:\n* Control the order of (de)initialisation of Nim modules\n* Control the order of (de)initialisation of threadvars created by Nim modules\n* Use \"modules aliases\" / \"virtual modules\" for complex (de)initialisation\n* Circular dependencies are NOT supported, nor is there any plan to do so\n* A utility \"string value\" helper module\n* A utility \"any value\" helper module, with optional converters.\n* An optional \"stdlog\" sub module, which sets up Nim standard logging",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "moe",
    "description": "A command lined based text editor",
    "tags": [
      "console",
      "command-line",
      "editor",
      "text",
      "cli"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/fox0430/moe",
    "url": "https://github.com/fox0430/moe",
    "long_description": "A command line based editor inspired by vi/vim written in Nim.\nThis project's goal is a very customizable, high productivity, high performance and funny animation editor.\nWritten in Nim\n* Adopt GapBuffer\n* UTF-8 and other encodings support (Incomplete)\n* Vim like mode (Normal, Insert, Visual, Replace, Ex, Filer)\n* Vim like keybinds\n* Infinite undo/redo\n* Syntax highlighting (Nim, C, C++, C#, Java, Yaml)\n* Configuration file\n* Multiple file buffers\n* Split window\n* IDE like tab line\n* Simple file manager\n* Auto close paren\n* Simple auto indent",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Education",
      "Development"
    ]
  },
  {
    "name": "mofuw",
    "description": "mofuw is *MO*re *F*aster, *U*ltra *W*ebserver",
    "tags": [
      "web",
      "http",
      "framework",
      "abandoned"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/2vg/mofuw",
    "url": "https://github.com/2vg/mofuw",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "mongo",
    "description": "Bindings and a high-level interface for MongoDB",
    "tags": [
      "library",
      "wrapper",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/mongo",
    "url": "https://github.com/nim-lang/mongo",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "mongrel2",
    "description": "Handler framework for the Mongrel2 web server.",
    "tags": [
      "mongrel2",
      "library",
      "www"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "http://bitbucket.org/mahlon/nim-mongrel2",
    "url": "https://mahlon@bitbucket.org/mahlon/nim-mongrel2",
    "long_description": "This module implements a basic framework for interacting with the Mongrel2 webserver. (http://mongrel2.org).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "morelogging",
    "description": "Logging library with support for async IO, multithreading, Journald.",
    "tags": [
      "log",
      "logging",
      "library",
      "systemd",
      "journald"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-morelogging",
    "url": "https://github.com/FedericoCeratto/nim-morelogging",
    "long_description": "A set of logging utilities for Nim.\n* File rotation\n* Compression\n* Templated log file name\n* Templated log messages\n* Threaded log buffering\n* Async log buffering\n* Logging, file rotation and compression do not block the caller\n* Sensible defaults: log to \"<appname>.<date>.log\", daily log rotation\n* Log to systemd Journald. Support structured entries.\n* Support Linux, OSX, Windows\n* Functional-tested",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "moustachu",
    "description": "Mustache templating for Nim.",
    "tags": [
      "web",
      "html",
      "template",
      "mustache"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fenekku/moustachu",
    "url": "https://github.com/fenekku/moustachu.git",
    "long_description": "Moustachu is a(N im)plementation of Mustache (get it?). Mustache is \"logic-less templating\".",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web",
      "Reporting"
    ]
  },
  {
    "name": "mpdclient",
    "description": "MPD client library",
    "tags": [
      "mpd",
      "music",
      "player",
      "client"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/mpdclient",
    "url": "https://github.com/SolitudeSF/mpdclient",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "mpfit",
    "description": "A wrapper for the cMPFIT non-linear least squares fitting library",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "nonlinear",
      "least-squares",
      "fitting",
      "levenberg-marquardt",
      "regression"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vindaar/nim-mpfit",
    "url": "https://github.com/Vindaar/nim-mpfit",
    "long_description": "MPFIT uses the Levenberg-Marquardt technique to solve the least-squares problem. In its typical use, MPFIT will be used to fit a user-supplied function (the \"model\") to user-supplied data points (the \"data\") by adjusting a set of parameters.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science",
      "Maths",
      "Data science"
    ]
  },
  {
    "name": "mpwc",
    "description": "Master Password command line utility",
    "tags": [
      "masterpassword",
      "password",
      "manager",
      "stateless"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/mpwc",
    "url": "https://github.com/SolitudeSF/mpwc",
    "long_description": "Stateless password manager using Master Password algorithm.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "mqtt",
    "description": "MQTT wrapper for nim",
    "tags": [
      "MQTT"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barnybug/nim-mqtt",
    "url": "https://github.com/barnybug/nim-mqtt",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware",
      "Network",
      "Miscellaneous"
    ]
  },
  {
    "name": "msgpack",
    "description": "A MessagePack binding for Nim",
    "tags": [
      "msgpack",
      "library",
      "serialization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/akiradeveloper/msgpack-nim",
    "url": "https://github.com/akiradeveloper/msgpack-nim.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "msgpack4nim",
    "description": "Another MessagePack implementation written in pure nim",
    "tags": [
      "msgpack",
      "library",
      "serialization",
      "deserialization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/msgpack4nim",
    "url": "https://github.com/jangko/msgpack4nim",
    "long_description": "MessagePack implementation written in pure nim",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "multicast",
    "description": "proc to join (and leave) a multicast group",
    "tags": [
      "multicast",
      "udp",
      "socket",
      "net"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/enthus1ast/nimMulticast",
    "url": "https://github.com/enthus1ast/nimMulticast",
    "long_description": "procs to work with multicast groups and ip broadcast",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "murmur",
    "description": "MurmurHash in pure Nim.",
    "tags": [
      "hash",
      "murmur"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/olahol/nimrod-murmur",
    "url": "https://github.com/olahol/nimrod-murmur/",
    "long_description": "MurmurHash algorithm in pure nimrod.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "murmur3",
    "description": "A simple MurmurHash3 wrapper for Nim",
    "tags": [
      "MurmurHash",
      "MurmurHash3",
      "murmur",
      "hash",
      "hashing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/boydgreenfield/nimrod-murmur",
    "url": "https://github.com/boydgreenfield/nimrod-murmur",
    "long_description": "Simply provides a wrapper for MurmurHash3_x64_128 for string inputs. MurmurHash was written by Austin Appleby and released into the public domain.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "murmurhash",
    "description": "Pure nim implementation of MurmurHash",
    "tags": [
      "murmur",
      "hash",
      "MurmurHash3",
      "MurmurHash2"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cwpearson/nim-murmurhash",
    "url": "https://github.com/cwpearson/nim-murmurhash",
    "long_description": "A pure-nim implementation of MurmurHash. Has MurmurHash3 and MurmurHash2, and does not wrap a C implementation.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "mutableseqs",
    "description": "utilities for transforming sequences",
    "tags": [
      "sequences",
      "mapreduce"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/iourinski/mutableseqs",
    "url": "https://github.com/iourinski/mutableseqs",
    "long_description": "Module imitates scala-like behavior of mutable sequences\nIts original use case was working with largish (but still manageable, i.e. fitting into memory without partitioning) sequencies, the transformed object is destroyed, so such methods will only work with vars, but not with lets",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "myo",
    "description": "Bindings for the Thalmic Labs Myo gesture control armband SDK.",
    "tags": [
      "binding",
      "myo",
      "thalmic",
      "armband",
      "gesture"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/myo",
    "url": "https://github.com/nimious/myo.git",
    "long_description": "This package contains bindings to the Myo SDK for the Nim programming language. The Myo is a gesture control armband that lets users wirelessly control a computer by detecting electrical activity in arm muscles.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "mysqlparser",
    "description": "An efficient packet parser for MySQL Client/Server Protocol. Help you to write Mysql communication in either BLOCKIONG-IO or NON-BLOCKING-IO.",
    "tags": [
      "mysql",
      "protocol",
      "parser"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tulayang/mysqlparser",
    "url": "https://github.com/tulayang/mysqlparser.git",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "nake",
    "description": "make-like for Nim. Describe your builds as tasks!",
    "tags": [
      "build",
      "automation",
      "sortof"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nake",
    "url": "https://github.com/fowlmouth/nake/",
    "long_description": "Describe your Nim builds as tasks.",
    "code_quality": 0,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "names",
    "description": "String interning library",
    "tags": [
      "strings"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/names",
    "url": "https://github.com/pragmagic/names",
    "long_description": "This module implements Name type, which is an interned string, allowing fast comparison and hash retrieval.\nConsider using this type when:\n* You would like to use string as a key of a hash table.\n* Many equal strings can be created in different parts of your application.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nanoid",
    "description": "The Nim implementation of NanoID",
    "tags": [
      "nanoid",
      "random",
      "generator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/icyphox/nanoid.nim",
    "url": "https://github.com/icyphox/nanoid.nim",
    "long_description": "NanoID is a tiny, secure URL-friendly unique string ID generator.\nIt's safe. It uses cryptographically strong random APIs that guarantees proper distribution of symbols.\nAnd it's compact. It uses a larger alphabet than the standard UUID (A-Za-z0-9_-), and has a similar number of unique IDs in just 21 symbols instead of 36.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nanomsg",
    "description": "Wrapper for the nanomsg socket library that provides several common communication patterns",
    "tags": [
      "library",
      "wrapper",
      "networking"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/nim-nanomsg",
    "url": "https://github.com/def-/nim-nanomsg",
    "long_description": "Nim wrapper for nanomsg, a socket library that provides several common communication patterns. It aims to make the networking layer fast, scalable, and easy to use.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "nanovg.nim",
    "description": "A wrapper for NanoVG vector graphics rendering",
    "tags": [
      "wrapper",
      "GUI",
      "vector graphics",
      "opengl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nanovg.nim",
    "url": "https://github.com/fowlmouth/nanovg.nim",
    "long_description": "NanoVG is small antialiased vector graphics rendering library for OpenGL. It has lean API modeled after HTML5 canvas API. It is aimed to be a practical and fun toolset for building scalable user interfaces and visualizations.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "GUI",
      "Image"
    ]
  },
  {
    "name": "nasher",
    "description": "A build tool for Neverwinter Nights projects",
    "tags": [
      "nwn",
      "neverwinternights",
      "neverwinter",
      "game",
      "bioware",
      "build"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/squattingmonk/nasher.nim",
    "url": "https://github.com/squattingmonk/nasher.nim",
    "long_description": "This is a command-line utility for managing a Neverwinter Nights script or module repository.\nnasher is used to unpack an erf or module into a source tree, converting gff files into json format. Since json is a text-based format, it can be checked into git or another version-control system to track changes over time and make it easier for multiple people to work on the same project simultaneously. nasher can also rebuild the module or erf from those unpacked source files.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Games"
    ]
  },
  {
    "name": "nat_traversal",
    "description": "miniupnpc and libnatpmp wrapper",
    "tags": [
      "library",
      "wrapper"
    ],
    "license": "Apache License 2.0 or MIT",
    "method": "git",
    "web": "https://github.com/status-im/nim-nat-traversal",
    "url": "https://github.com/status-im/nim-nat-traversal",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "native_dialogs",
    "description": "Implements framework-agnostic native operating system dialogs calls",
    "tags": [
      "ui",
      "gui",
      "cross-platform",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SSPkrolik/nim-native-dialogs",
    "url": "https://github.com/SSPkrolik/nim-native-dialogs.git",
    "long_description": "Native Operating System Dialogs implementation for Nim-lang via single API. The library is GUI framework agnostic and supports the following platforms:\n* GNU/Linux + GTK+3\n* OSX + Cocoa\n* Windows + Win32 API",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "ncurses",
    "description": "A wrapper for NCurses",
    "tags": [
      "library",
      "terminal",
      "graphics",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rnowley/nim-ncurses",
    "url": "https://github.com/rnowley/nim-ncurses/",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "ndb",
    "description": "A db_sqlite fork with a proper typing",
    "tags": [
      "binding",
      "database",
      "db",
      "library",
      "sqlite"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xzfc/ndb.nim",
    "url": "https://github.com/xzfc/ndb.nim",
    "long_description": "A fork of db_sqlite, Nim's standard library higher level SQLite database wrapper.\nBinding `?` parameters is done with native SQlite `sqlite3_bind_*` functions instead of stringifying and then escaping every parameter. As a result:\n- In addition to `?`, the `?NNN` syntax is supported. See `sqlite3_varparam`.\n- Inserting binary blobs is handled in a proper way.\n- It is possible to insert the `NULL` value.\n* No more empty strings as a default placeholder value. Empty string, `NULL`, and an absence of a row are distinguished.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "ndbex",
    "description": "extension modules for Nim's 'db_*' modules",
    "tags": [
      "extension",
      "database",
      "convenience",
      "db",
      "mysql",
      "postgres",
      "sqlite"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Senketsu/nim-db-ex",
    "url": "https://github.com/Senketsu/nim-db-ex",
    "long_description": "This library is a small extension for Nim's `db_*` modules that uses new type `RowNew`\nImporting those extensions will also import Nim's `db_*` modules.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "ndf",
    "description": "Duplicate files finder",
    "tags": [
      "app",
      "binary",
      "duplicates",
      "utility",
      "filesystem"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rustomax/ndf",
    "url": "https://github.com/rustomax/ndf",
    "long_description": "Command line utility written in Nim to find duplicate files. This program does not delete any files. It generates a list of duplicates in a specific directory for you to review and deal with them as you see fit.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "System"
    ]
  },
  {
    "name": "negamax",
    "description": "Negamax AI search-tree algorithm for two player games",
    "tags": [
      "negamax",
      "minimax",
      "game",
      "ai",
      "turn-based"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JohnAD/negamax",
    "url": "https://github.com/JohnAD/negamax",
    "long_description": "Negamax is a nim library for executing the Negamax AI algorithm on a turn-based game. The library uses the turn_based_game nimble library as the framework for the game itself.\nThe negamax algorithm searches and weighs possible future moves. It is a varation of the minimax algorithm that is optimized for games where the \"value\" of a game's state for one player is directly inverse of the value to the oppossing player. This is known as a zero-sum game.\nThis algorithm is desgined to do alpha/beta pruning, which shortens the search tree.\nThis algorithem is currently recursive. The author is currently working on a non-recursive one as well.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Algorithms",
      "Games"
    ]
  },
  {
    "name": "neo",
    "description": "Linear algebra for Nim",
    "tags": [
      "vector",
      "matrix",
      "linear-algebra",
      "BLAS",
      "LAPACK",
      "CUDA"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://unicredit.github.io/neo/",
    "url": "https://github.com/unicredit/neo",
    "long_description": "This library is meant to provide basic linear algebra operations for Nim applications. The ambition would be to become a stable basis on which to develop a scientific ecosystem for Nim, much like Numpy does for Python.\nThe library has been tested on Ubuntu Linux 16.04 64-bit using either ATLAS, OpenBlas or Intel MKL. It was also tested on OSX Yosemite. The GPU support has been tested using NVIDIA CUDA 8.0.",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "nerve",
    "description": "A RPC framework for building web APIs",
    "tags": [
      "rpc",
      "framework",
      "web",
      "json",
      "api",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nepeckman/nerve-rpc",
    "url": "https://github.com/nepeckman/nerve-rpc",
    "long_description": "Nerve is a RPC framework for building APIs in Nim. It prioritizes flexibility, ease of use, and performance. Nerve provides a compile time macro that generates both an efficient router for dispatching RPC requests on the server, as well as a complete, fully typed, client for both native and JavaScript targets.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Network",
      "System"
    ]
  },
  {
    "name": "nesm",
    "description": "A macro for generating [de]serializers for given objects",
    "tags": [
      "metaprogramming",
      "parser",
      "pure",
      "serialization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://xomachine.gitlab.io/NESM/",
    "url": "https://gitlab.com/xomachine/NESM.git",
    "long_description": "NESM is a tool that generates serialization and deserialization code for a given object. This library provides a macro called serializable inside which the object description should be placed.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "nest",
    "description": "RESTful URI router",
    "tags": [
      "library",
      "api",
      "router",
      "web"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kedean/nest",
    "url": "https://github.com/kedean/nest.git",
    "long_description": "Nest is a high performance URL mapper/router built in Nim.\n* Map against any HTTP method and path\n* Server-agnostic\n* URL parameter capture\n* Query string parameter capture\n* Plays nice with various logging systems\n* Does not impose restrictions on your handler methods\n* Fully unit tested",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web",
      "Miscellaneous"
    ]
  },
  {
    "name": "netpbm",
    "description": "Wrapper for libnetpbm",
    "tags": [
      "pbm",
      "image",
      "wrapper",
      "netpbm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/nim-netpbm",
    "url": "https://github.com/barcharcraz/nim-netpbm",
    "long_description": "Netpbm is a toolkit for manipulation of graphic images, including conversion of images between a variety of different formats. There are over 300 separate tools in the package including converters for about 100 graphics formats. Examples of the sort of image manipulation we're talking about are: Shrinking an image by 10%; Cutting the top half off of an image; Making a mirror image; Creating a sequence of images that fade from one image to another.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "netpipe",
    "description": "Netpipe is a reliable UDP connection for Nim.",
    "tags": [
      "networking",
      "udp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/netpipe/",
    "url": "https://github.com/treeform/netpipe/",
    "long_description": "NetPipe is a reliable connection over UDP aimed at games. Normally UDP packets can get duplicated, dropped, or come out of order. NetPipe makes sure packets are not duplicated, re-sends them if they get dropped, and all packets come in order. UDP packets might also get split if they are above 512 bytes and also can fail to be sent if they are bigger than 1-2k. NetPipe breaks up big packets and sends them in pieces making sure each piece comes reliably in order. Finally sometimes it's impossible for two clients to communicate direclty with TCP because of NATs, but NetPipe provides hole punching which allows them to connect.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Games"
    ]
  },
  {
    "name": "neverwinter",
    "description": "Neverwinter Nights 1 data accessor library",
    "tags": [
      "nwn",
      "neverwinternights",
      "neverwinter",
      "game",
      "bioware",
      "fileformats",
      "reader",
      "writer"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/niv/neverwinter.nim",
    "url": "https://github.com/niv/neverwinter.nim",
    "long_description": "This is a nim-lang library and utility collection to read and write data files used by Neverwinter Nights 1.\n* `nwn_gff`: Transforms gff data to/from various formats.\n* `nwn_erf`: Un/pack erf files.\n* `nwn_tlk`: Transforms tlk tables from/to various formats.\n* `nwn_twoda`: Transforms 2da files from/to various formats.\n* `nwn_key_pack`, `nwn_key_unpack`: Un/packs a keyfile into/from a directory structure.\n* `nwn_key_shadows`: Get data on file shadowing in a list of key files.\n* `nwn_key_transparent`: Get data on file duplication in a list of key files.\n* `nwn_resman_stats`: Get data on what is in a resman view.\n* `nwn_resman_grep`: Grep a resman view for data.\n* `nwn_resman_extract`: Pull files from resman into directory.\n* `nwn_resman_cat`: Pull file(s) from resman and pipe them to stdout.\n* `nwn_resman_diff`: Diffs two resman views (for language support).\n* `nwn_resman_pkgsrv`: Repackage a resman view suitable for docker deployment.\n* `nwn_net`: A utility providing some network-related helpers, like querying servers.\n* `nwn_erf_tlkify`: Refactor strings in a erf into a exisiting or new tlk.\n* `nwn_sff`: Convert SSF files to/from csv.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "news",
    "description": "Easy websocket with chronos support",
    "tags": [
      "websocket",
      "chronos"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tormund/news",
    "url": "https://github.com/tormund/news",
    "long_description": "Support asyncdispatch and https://github.com/status-im/nim-chronos",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "ngxcmod",
    "description": "High level wrapper for build nginx module w/ nginx-c-function",
    "tags": [
      "nginx",
      "module",
      "nginx-c-function",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/ngxcmod.nim",
    "url": "https://github.com/ba0f3/ngxcmod.nim",
    "long_description": "This module contains some high level wrapper to build Nginx module with `nginx-c-function`\nFor low level wrapper, please import `ngxcmod/raw`",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "nhsl",
    "description": "Nim Hessian Serialization Library encodes/decodes data into the Hessian binary protocol",
    "tags": [
      "library",
      "serialization",
      "pure"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/twist-vector/nhsl",
    "url": "https://github.com/twist-vector/nhsl.git",
    "long_description": "The NHSL module is a partial implementation of the Hessian binary protocol. Hessian is a compact binary protocol for cross-platform web services and messaging. It allows you to represent binary data (integers, floats, lists objects, etc.) in a very compact form. This allows storage or communication to be small and fast.\nFor the Hessian spec, see http://hessian.caucho.com/doc/hessian-serialization.html",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Algorithms"
    ]
  },
  {
    "name": "nico",
    "description": "Nico game engine",
    "tags": [
      "pico-8",
      "game",
      "library",
      "ludum",
      "dare"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ftsf/nico",
    "url": "https://github.com/ftsf/nico",
    "long_description": "NICO is a simple game framework for the Nim programming language inspired by the PICO-8 API and built on top of SDL2.\nWhat it does:\n* 16 Color Bitmap Graphics (you can load a custom palette)\n* Fixed or flexible custom display resolution with pixel scaling\n* Sprite drawing, load png spritesheets (can load multiple and switch between them)\n* Tilemap drawing, import json from Tiled\n* Drawing primitives: pixels, lines, rectangles, circles, triangles\n* Input: Keyboard, Gamepad, Mouse\n* Sfx playback: load and play oggs, configurable number of mixer channels.\n* Music playback: load and play one streaming ogg at a time\n* Text drawing: load and draw fonts from png, supports variable width fonts.\n* Export animated gifs",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "nicy",
    "description": "A nice and icy ZSH prompt in Nim",
    "tags": [
      "zsh",
      "shell",
      "prompt",
      "git"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/icyphox/nicy",
    "url": "https://github.com/icyphox/nicy",
    "long_description": "Plugin-like system for prompt customization, in case you didn’t like the pretty defaults.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Education"
    ]
  },
  {
    "name": "nifty",
    "description": "A decentralized (pseudo) package manager and script runner.",
    "tags": [
      "package-manager",
      "script-runner"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/h3rald/nifty",
    "url": "https://github.com/h3rald/nifty",
    "long_description": "In a nutshell, nifty is a program that executes user-defined scripts on a set of folders or files within a user-define package folder. It doesn't do (almost) anything by itself, it just relies on other programs and utilities that are typically already available on your system like git and curl to do all the heavy-lifting.",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nigui",
    "description": "NiGui is a cross-platform, desktop GUI toolkit using native widgets.",
    "tags": [
      "gui",
      "windows",
      "gtk"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/trustable-code/NiGui",
    "url": "https://github.com/trustable-code/NiGui",
    "long_description": "NiGui is a cross-platform desktop GUI toolkit written in Nim.\nNiGui provides an easy way to develop applications in Nim with a full-featured graphical user interface.\nTarget platforms:\n* Windows (Win32 API)\n* Linux over GTK+ 3\n* macOS over GTK+ 3 (native support planned)",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "niledb",
    "description": "Key/Value storage into a fast file-hash",
    "tags": [
      "db"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JeffersonLab/niledb.git",
    "url": "https://github.com/JeffersonLab/niledb.git",
    "long_description": "A fast file-hash DB. The interface is Key/Value pair semantics. Storage of these pairs is into strings, and uses an underlying filehash package implemented over a Berkeley Sleepy Cat file-hash database. A single integer index is provided to allow the grouping of the values from many DB's but with a single key.\nThe filehash DB provides page-level checksums and supports caching of pages for fast retrievals and storage. Multi-threading reading is supported. The DB scales well, an in production, has been used to hold up to 80GB single files with O(100K) keys.\nThe `serializetools` module provides tools for serialization and deserialization of keys and values to/from strings.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "nim-libgd",
    "description": "Nim Wrapper for LibGD 2.x",
    "tags": [
      "image",
      "graphics",
      "wrapper",
      "libgd",
      "2d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mrhdias/nim-libgd",
    "url": "https://github.com/mrhdias/nim-libgd",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "nim-nmap",
    "description": "A pure implementaion of nmap for nim.",
    "tags": [
      "nmap",
      "networking",
      "network mapper",
      "blmvxer"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/blmvxer/nim-nmap",
    "url": "https://github.com/blmvxer/nim-nmap",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "nim7z",
    "description": "7z extraction for Nim",
    "tags": [
      "7zip",
      "7z",
      "extract",
      "archive"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nim7z",
    "url": "https://github.com/genotrance/nim7z",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimAES",
    "description": "Advanced Encryption Standard, Rijndael Algorithm",
    "tags": [
      "crypto",
      "library",
      "aes",
      "encryption",
      "rijndael"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimAES",
    "url": "https://github.com/jangko/nimAES",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nimAGG",
    "description": "Hi Fidelity Rendering Engine",
    "tags": [
      "renderer",
      "rasterizer",
      "library",
      "2D",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimAGG",
    "url": "https://github.com/jangko/nimAGG",
    "long_description": "nimAGG is a Nim port of Anti Grain Geometry(AGG) High Fidelity 2D Graphics. A High Quality Rendering Engine for Nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "nimBMP",
    "description": "BMP encoder and decoder",
    "tags": [
      "graphics",
      "library",
      "BMP"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimBMP",
    "url": "https://github.com/jangko/nimBMP",
    "long_description": "BMP Encoder and Decoder written in Nim\nSupported standard color mode:\n* 1 bit\n* 4 bit uncompressed and compressed\n* 8 bit uncompressed and compressed\n* 16 bit with color mask\n* 24 bit\n* 32 bit with color mask\n* both inverted(top-down) and non inverted mode supported\nSupported color conversions:\n* 32/24bit to 1, 4, 8, 24 bit\n* automatic palette generation",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "nimCEF",
    "description": "Nim wrapper for the Chromium Embedded Framework",
    "tags": [
      "chromium",
      "embedded",
      "framework",
      "cef",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimCEF",
    "url": "https://github.com/jangko/nimCEF",
    "long_description": "Chromium Embedded Framework(CEF3) wrapper.\nnimCEF consist of two parts:\n* First part: nimCEF is a thin wrapper for CEF3 written in Nim. Basically, nimCEF is CEF3 C API translated to Nim, therefore if you know how to use CEF3 C API, using First part is not much different.\n* Second part: Convenience layer added on top of C style API to ease the development in Nim style. Nim native datatypes will be used whenever possible. And many of the ref-count related issues already handled for you. The Convenience Layer heavily utilizing Nim macros to generate consistent and efficient wrapper.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "nimFinLib",
    "description": "Financial Library for Nim",
    "tags": [
      "financial"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/qqtop/NimFinLib",
    "url": "https://github.com/qqtop/NimFinLib",
    "long_description": "Financial Libarary\n* Alpha Vantage Api support            \n* Dataframe for display and easy working with dataseries\n* Multiple accounts and portfolios management\n* Returns calculations and more\n* Williams R% calculation\n* Indicator displays\n* Kitco Metal Prices    \n* US market spot prices\n* Digital currencies 5 min intraday prices",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Finance"
    ]
  },
  {
    "name": "nimLUA",
    "description": "glue code generator to bind Nim and Lua together using Nim's powerful macro",
    "tags": [
      "lua",
      "library",
      "bind",
      "glue",
      "macros"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimLUA",
    "url": "https://github.com/jangko/nimLUA",
    "long_description": "* bind free proc\n* bind proc as Lua method\n* bind const\n* bind enum\n* bind object\n* generic proc binding\n* closure binding\n* properties getter/setter\n* automatic resolve overloaded proc\n* easy namespace creation\n* easy debugging\n* consistent simple API\n* can rename exported symbol\n* support automatic type conversion\n* can change binding dynamically at runtime too\n* generate clean and optimized glue code that you can inspect at compile time\n* it's free",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimPDF",
    "description": "library for generating PDF files",
    "tags": [
      "library",
      "PDF",
      "document"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimpdf",
    "url": "https://github.com/jangko/nimpdf",
    "long_description": "nimPDF is a free PDF writer library, written mostly in nim programming language\n* images\n* text and fonts\n* Path construction\n* Color spaces\n* Interactive Features\n* Coordinate Space\n* others",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Reporting"
    ]
  },
  {
    "name": "nimPNG",
    "description": "PNG(Portable Network Graphics) encoder and decoder",
    "tags": [
      "graphics",
      "library",
      "PNG"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimPNG",
    "url": "https://github.com/jangko/nimPNG",
    "long_description": "Portable Network Graphics Encoder and Decoder written in Nim store lossless image with good compression. Since version 0.2.0 also support Animated PNG!\n* all PNG standard color mode are supported\n* both interlaced and non-interlaced mode supported\n* recognize all PNG standard chunks\n* unknown chunks will be handled properly\n* the following chunks are parsed correctly, but not used by decoder: cHRM, gAMA, iCCP, sRGB, sBIT, hIST, sPLT\n* Color conversions",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "nimSHA2",
    "description": "Secure Hash Algorithm - 2, [224, 256, 384, and 512 bits]",
    "tags": [
      "hash",
      "crypto",
      "library",
      "sha256",
      "sha224",
      "sha384",
      "sha512"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nimSHA2",
    "url": "https://github.com/jangko/nimSHA2",
    "long_description": "Secure Hash Algorithm 2\n224, 256, 384, and 512 bits",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nim_cexc",
    "description": "A simple chunked external protocol interface for Splunk custom search commands.",
    "tags": [
      "splunk",
      "command",
      "cexc",
      "chunked"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/metasyn/nim-cexc-splunk",
    "url": "https://github.com/metasyn/nim-cexc-splunk",
    "long_description": "Implementation of a custom search command for Splunk Enterprise.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Cloud"
    ]
  },
  {
    "name": "nim_cjson",
    "description": "cjson wrapper for Nim",
    "tags": [
      "cjson",
      "json"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/muxueqz/nim_cjson",
    "url": "https://github.com/muxueqz/nim_cjson",
    "long_description": "Nim_cjson is a Nim wrapper for the cjson library",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nim_curry",
    "description": "Provides a macro to curry function",
    "tags": [
      "library",
      "functional",
      "macro",
      "currying"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zer0-star/nim-curry",
    "url": "https://github.com/zer0-star/nim-curry",
    "long_description": "To curry functions, using this library is easy.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "nim_exodus",
    "description": "Template generator for gester",
    "tags": [
      "web",
      "html",
      "template"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/shinriyo/nim_exodus",
    "url": "https://github.com/shinriyo/nim_exodus",
    "long_description": "Template gernerator like Rails scaffoldings.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "nim_miniz",
    "description": "Nim wrapper for miniz",
    "tags": [
      "zip",
      "compression",
      "wrapper",
      "miniz"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/h3rald/nim-miniz",
    "url": "https://github.com/h3rald/nim-miniz",
    "long_description": "Miniz is a lossless, high performance data compression library in a single source file that implements the zlib (RFC 1950) and Deflate (RFC 1951) compressed data format specification standards. It supports the most commonly used functions exported by the zlib library, but is a completely independent implementation so zlib's licensing requirements do not apply. Miniz also contains simple to use functions for writing .PNG format image files and reading/writing/appending .ZIP format archives. Miniz's compression speed has been tuned to be comparable to zlib's, and it also has a specialized real-time compressor function designed to compare well against fastlz/minilzo.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nim_telegram_bot",
    "description": "Generic Configurable Telegram Bot for Nim, with builtin basic functionality and Plugins",
    "tags": [
      "telegram",
      "bot",
      "telebot",
      "async",
      "multipurpose",
      "chat"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-telegram-bot",
    "url": "https://github.com/juancarlospaco/nim-telegram-bot",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Tools"
    ]
  },
  {
    "name": "nim_tiled",
    "description": "Tiled map loader for the Nim programming language",
    "tags": [
      "tiled",
      "gamedev",
      "tmx",
      "indie"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SkyVault/nim-tiled",
    "url": "https://github.com/SkyVault/nim-tiled",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "nimactors",
    "description": "Actors library for Nim inspired by akka-actors",
    "tags": [
      "actors",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/nimactors",
    "url": "https://github.com/vegansk/nimactors",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "nimalpm",
    "description": "A nimrod wrapper for libalpm",
    "tags": [
      "alpm",
      "wrapper",
      "binding",
      "library"
    ],
    "license": "GPLv2",
    "method": "git",
    "web": "https://www.github.com/barcharcraz/nimalpm/",
    "url": "https://github.com/barcharcraz/nimalpm/",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimarchive",
    "description": "libarchive wrapper for Nim",
    "tags": [
      "7z",
      "zip",
      "tar",
      "rar",
      "gz",
      "libarchive",
      "compress",
      "extract",
      "archive"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimarchive",
    "url": "https://github.com/genotrance/nimarchive",
    "long_description": "The libarchive project develops a portable, efficient C library that can read and write streaming archives in a variety of formats. It also includes implementations of the common tar, cpio, and zcat command-line tools that use the libarchive library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimassets",
    "description": "bundle your assets to a nim",
    "tags": [
      "assets",
      "bundle",
      "go-bindata",
      "resources"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/nimassets",
    "url": "https://github.com/xmonader/nimassets",
    "long_description": "nimassets Nim Assets is heavily inspired by go-bindata to bundle all of your assets into one single nim file.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "nimates",
    "description": "Client library for the Postmates API",
    "tags": [
      "library",
      "postmates",
      "delivery"
    ],
    "license": "Apache",
    "method": "git",
    "web": "https://github.com/jamesalbert/nimates",
    "url": "https://github.com/jamesalbert/nimates",
    "long_description": "A PostMates client written in Nim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "nimbass",
    "description": "Bass wrapper for Nim",
    "tags": [
      "bass",
      "audio",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimbass",
    "url": "https://github.com/genotrance/nimbass",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "nimbench",
    "description": "Micro benchmarking tool to measure speed of code, with the goal of optimizing it.",
    "tags": [
      "benchmark",
      "micro benchmark",
      "timer"
    ],
    "license": "Apache Version 2.0",
    "method": "git",
    "web": "https://github.com/ivankoster/nimbench",
    "url": "https://github.com/ivankoster/nimbench.git",
    "long_description": "This module is used to create benchmarks. Benchmarks are used to correctly determine the speed of your code, with the ultimate goal of optimizing it. Measuring speed is complicated because of many sources of noise in measurements. Also, the compiler may optimize away parts of code snippets meant for benchmarking. This module aims to take care of the hard stuff, so you can test the speed of your code and start to optimize it!",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimbigwig",
    "description": "libBigWig wrapper for Nim",
    "tags": [
      "bigwig",
      "bigbend",
      "genome"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimbigwig",
    "url": "https://github.com/genotrance/nimbigwig",
    "long_description": "Reading/parsing local and remote bigWig and bigBed files.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science",
      "Maths",
      "Data science"
    ]
  },
  {
    "name": "nimbioseq",
    "description": "Nim Library for sequence (protein/nucleotide) bioinformatics",
    "tags": [
      "bioinformatics",
      "fasta",
      "fastq"
    ],
    "license": "BSD-3",
    "method": "git",
    "web": "https://github.com/jhbadger/nimbioseq",
    "url": "https://github.com/jhbadger/nimbioseq",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "nimblas",
    "description": "BLAS for Nim",
    "tags": [
      "BLAS",
      "linear algebra",
      "vector",
      "matrix"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/nimblas",
    "url": "https://github.com/unicredit/nimblas",
    "long_description": "This is a Nim wrapper for the BLAS routines.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Data science"
    ]
  },
  {
    "name": "nimble",
    "description": "Nimble package manager",
    "tags": [
      "app",
      "binary",
      "package",
      "manager"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/nim-lang/nimble",
    "url": "https://github.com/nim-lang/nimble",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 4,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimblegui",
    "description": "A simple GUI front for Nimble.",
    "tags": [
      "nimble",
      "gui",
      "packages"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_nimble_gui",
    "url": "https://github.com/ThomasTJdev/nim_nimble_gui",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "nimbluez",
    "description": "Nim modules for access to system Bluetooth resources.",
    "tags": [
      "bluetooth",
      "library",
      "wrapper",
      "sockets"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/Electric-Blue/NimBluez",
    "url": "https://github.com/Electric-Blue/NimBluez.git",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "nimbomb",
    "description": "A GiantBomb-wiki wrapper for nim",
    "tags": [
      "giant",
      "bomb",
      "wiki",
      "api"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Tyler-Yocolano/nimbomb",
    "url": "https://github.com/Tyler-Yocolano/nimbomb",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "nimboost",
    "description": "Additions to the Nim's standard library, like boost for C++",
    "tags": [
      "stdlib",
      "library",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://vegansk.github.io/nimboost/",
    "url": "https://github.com/vegansk/nimboost",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimbox",
    "description": "A Rustbox-inspired termbox wrapper",
    "tags": [
      "library",
      "wrapper",
      "termbox",
      "command-line",
      "ui",
      "tui",
      "gui"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/nimbox",
    "url": "https://github.com/dom96/nimbox",
    "long_description": "Termbox is a library that provides minimalistic API which allows the programmer to write text-based user interfaces.\nIt is based on a very simple abstraction. The main idea is viewing terminals as a table of fixed-size cells and input being a stream of structured messages. Would be fair to say that the model is inspired by windows console API. The abstraction itself is not perfect and it may create problems in certain areas. The most sensitive ones are copy & pasting and wide characters (mostly Chinese, Japanese, Korean (CJK) characters). When it comes to copy & pasting, the notion of cells is not really compatible with the idea of text. And CJK runes often require more than one cell to display them nicely. Despite the mentioned flaws, using such a simple model brings benefits in a form of simplicity. And KISS principle is important.\nAt this point one should realize, that CLI (command-line interfaces) aren't really a thing termbox is aimed at. But rather pseudo-graphical user interfaces.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "nimbus",
    "description": "An Ethereum 2.0 Sharding Client for Resource-Restricted Devices",
    "tags": [
      "ethereum"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nimbus",
    "url": "https://github.com/status-im/nimbus",
    "long_description": "The code in this repository is currently focusing on Ethereum 1.0 feature parity, while all 2.0 research and development is happening in parallel in nim-beacon-chain.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Finance"
    ]
  },
  {
    "name": "nimcat",
    "description": "An implementation of cat in Nim",
    "tags": [
      "cat",
      "cli"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/shakna-israel/nimcat",
    "url": "https://github.com/shakna-israel/nimcat",
    "long_description": "This is a simple command line utility that replicates some of the functionality of the cat command found on most Linux systems.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "nimcb",
    "description": "Integrate nim projects in the C++Builder build process",
    "tags": [
      "c++-builder",
      "msbuild"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/AdrianV/nimcb",
    "url": "https://github.com/AdrianV/nimcb",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimcdl",
    "description": "Circuit Design language made in Nim",
    "tags": [
      "circuit",
      "HDL",
      "PCB",
      "DSL"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://gitlab.com/endes123321/nimcdl",
    "url": "https://gitlab.com/endes123321/nimcdl",
    "long_description": "This package is a small DSL (Domain Specific Language) for Nim that allows to design electronic circuits, make a small evaluation (composer.nim) and generate a netlist for Fritzing or Kicad.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "nimcfitsio",
    "description": "Bindings for CFITSIO, a library to read/write FITSIO images and tables.",
    "tags": [
      "library",
      "binding",
      "cfitsio",
      "fits",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ziotom78/nimcfitsio",
    "url": "https://github.com/ziotom78/nimcfitsio.git",
    "long_description": "CFITSIO is a machine-independent library of routines for reading and writing data files in the FITS (Flexible Image Transport System) data format. It can also read IRAF format image files and raw binary data arrays by converting them on the fly into a virtual FITS format file.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Image"
    ]
  },
  {
    "name": "nimcl",
    "description": "High level wrapper over OpenCL",
    "tags": [
      "OpenCL",
      "GPU"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/unicredit/nimcl",
    "url": "https://github.com/unicredit/nimcl",
    "long_description": "This is an attempt at a high level wrapper over OpenCL.\nFor now, things are added when needed and as such, they may not be perfectly coherent. Still, they should be enough to cover the simplest cases and get started.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System",
      "Hardware"
    ]
  },
  {
    "name": "nimclipboard",
    "description": "Nim wrapper for libclipboard",
    "tags": [
      "clipboard",
      "wrapper",
      "clip",
      "copy",
      "paste",
      "nimgen"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimclipboard",
    "url": "https://github.com/genotrance/nimclipboard",
    "long_description": "A cross-platform clipboard library.\nCurrently supported actions\n* Checking clipboard data ownership\n* Clearing clipboard\n* Retrieving/setting text (UTF-8)",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "nimclutter",
    "description": "Nim bindings for Clutter toolkit.",
    "tags": [
      "clutter",
      "gtk",
      "gui"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/KeepCoolWithCoolidge/nimclutter",
    "url": "https://github.com/KeepCoolWithCoolidge/nimclutter",
    "long_description": "Clutter is an open source (LGPL 2.1) software library for creating fast, compelling, portable, and dynamic graphical user interfaces. It is a core part of Gnome3.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "nimcr",
    "description": "A small program to make Nim shebang-able without the overhead of compiling each time",
    "tags": [
      "shebang",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/nimcr",
    "url": "https://github.com/PMunch/nimcr",
    "long_description": "This project aims to be a tiny little program to solve the problem of using Nim for scripting. It takes the file passed to it through the shebang and establishes a nimcache directory in temporary storage, then it compiles the script to a hidden file next to the script itself. On subsequent runs it checks if the script file is younger than the executable (ie. been edited after the last compilation) in which case it will compile it again, reusing the same nimcache directory if it exists. This means that the very first run of a script will do the entire compilation process, subsequent runs without changes will only run the executable, and runs where the source is newer than the executable will do the compilation process but use the old nimcache. The sum of this is a great speed-benefit without losing any of the flexibility often associated with scripts in general. Simply mark the script as executable and run it!",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "System"
    ]
  },
  {
    "name": "nimcrypto",
    "description": "Nim cryptographic library",
    "tags": [
      "crypto",
      "hashes",
      "ciphers",
      "keccak",
      "sha3",
      "blowfish",
      "twofish",
      "rijndael",
      "csprng",
      "hmac",
      "ripemd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/cheatfate/nimcrypto",
    "url": "https://github.com/cheatfate/nimcrypto",
    "long_description": "Nimcrypto is Nim's cryptographic library. It implements several popular cryptographic algorithms and their tests.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nimcuda",
    "description": "CUDA bindings",
    "tags": [
      "CUDA",
      "GPU"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/unicredit/nimcuda",
    "url": "https://github.com/unicredit/nimcuda",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System",
      "Hardware",
      "Maths"
    ]
  },
  {
    "name": "nimcx",
    "description": "Color and utilities library for linux terminal.",
    "tags": [
      "library",
      "linux"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/qqtop/nimcx",
    "url": "https://github.com/qqtop/nimcx",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "nimdeps",
    "description": "Nim library to bundle dependency files into executable",
    "tags": [
      "dependency",
      "bundle",
      "installer",
      "package"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimdeps",
    "url": "https://github.com/genotrance/nimdeps",
    "long_description": "Nimdeps is a Nim package to bundle dependency files into the generated executable.\nIt is very common to have external dependency files such as data files, graphics and other payloads as part of an application. Nimdeps makes it easy to carry all this payload within the application binary instead of having to build a separate installer.\nAll dependencies get packaged into the application binary at compile time. All references to dependencies need to be relative to the application project directory at compile time. At runtime, all files are checked for existence and extracted if not already present or changed. Dependencies get extracted relative to the application location at runtime.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimes",
    "description": "NES emulator using SDL2, also compiles to JavaScript with emscripten.",
    "tags": [
      "emulator",
      "nes",
      "game",
      "sdl",
      "javascript"
    ],
    "license": "MPL",
    "method": "git",
    "web": "https://github.com/def-/nimes",
    "url": "https://github.com/def-/nimes",
    "long_description": "This is a NES emulator written in the Nim programming language. I made it mainly for fun and demonstration purposes. Nim can be used to write elegant and performant code and have it run almost anywhere, including Android and JavaScript. You can build the emulator natively (should work on Linux, Mac OS X, Windows and other platforms supporting SDL2), build it to Android or use the JavaScript version that is compiled from the same source code with the help of emscripten.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Games"
    ]
  },
  {
    "name": "nimetry",
    "description": "Plotting module in pure nim",
    "tags": [
      "plot",
      "graph",
      "chart"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://github.com/ijneb/nimetry",
    "url": "https://github.com/ijneb/nimetry",
    "doc": "https://ijneb.github.io/nimetry",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "nimeverything",
    "description": "everything  search engine wrapper",
    "tags": [
      "everything",
      "voidtools",
      "Everything Search Engine"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xland/nimeverything",
    "url": "https://github.com/xland/nimeverything/",
    "long_description": "\"Everything\" is search engine that locates files and folders by filename instantly for Windows.\nUnlike Windows search \"Everything\" initially displays every file and folder on your computer (hence the name \"Everything\").\nYou type in a search filter to limit what files and folders are displayed.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimfastText",
    "description": "fastText wrapper for Nim",
    "tags": [
      "fasttext",
      "classification",
      "text",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimfastText",
    "url": "https://github.com/genotrance/nimfastText",
    "long_description": "fastText is a library for efficient learning of word representations and sentence classification.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Data science"
    ]
  },
  {
    "name": "nimfp",
    "description": "Nim functional programming library",
    "tags": [
      "functional",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/nimfp",
    "url": "https://github.com/vegansk/nimfp",
    "long_description": "Nim functional programming library. Includes:\n* Option type\n* List type\n* Either type\n* Map type\n* Stream type\n* Scala like for comprehension and Haskell like do notation support",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Language",
      "Algorithms"
    ]
  },
  {
    "name": "nimfuzz",
    "description": "Simple and compact fuzzing",
    "tags": [
      "fuzzing",
      "testing",
      "hacking",
      "security"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://apense.github.io/nimfuzz",
    "url": "https://github.com/apense/nimfuzz",
    "long_description": "Simple and compact Nim fuzzing library based on the great fauxfactory. The primary purpose of the library is to generate random strings to test the security of common utilities to help defend your system.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimfuzzy",
    "description": "Fuzzy search wrapper for Nim",
    "tags": [
      "fuzzy",
      "search",
      "match",
      "fts"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimfuzzy",
    "url": "https://github.com/genotrance/nimfuzzy",
    "long_description": "Fuzzy string matching inspired by Sublime Text",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "nimgame",
    "description": "A simple 2D game engine for Nim language. Deprecated, use nimgame2 instead.",
    "tags": [
      "deprecated",
      "game",
      "engine",
      "sdl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vladar4/nimgame",
    "url": "https://github.com/Vladar4/nimgame/",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "nimgame2",
    "description": "A simple 2D game engine for Nim language.",
    "tags": [
      "game",
      "engine",
      "sdl",
      "sdl2"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vladar4/nimgame2",
    "url": "https://github.com/Vladar4/nimgame2/",
    "long_description": "The purpose of Nimgame 2 is to provide a comfort layer over the SDL2 procedures, creating a minimalist and simple to understand 2D game engine.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "nimgen",
    "description": "C2nim helper to simplify and automate wrapping C libraries",
    "tags": [
      "c2nim",
      "library",
      "wrapper",
      "c",
      "c++"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimgen",
    "url": "https://github.com/genotrance/nimgen",
    "long_description": "Nimgen is a helper for c2nim to simplify and automate the wrapping of C libraries.\nNimgen can be used to automate the process of manipulating C files so that c2nim can be run on them without issues. This includes adding/removing code snippets, removal of complex preprocessor definitions that c2nim doesn't yet comprehend and recursively running on #include files.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimgl",
    "description": "Nim Game Library",
    "tags": [
      "glfw",
      "imgui",
      "opengl",
      "bindings",
      "gl",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lmariscal/nimgl",
    "url": "https://github.com/lmariscal/nimgl",
    "long_description": "NimGL (Nim Game Library) is a collection of bindings for popular libraries, mostly used in computer graphics. A library of libraries.\nThis collection of bindings is heavily inspired by LWJGL3, it enables low level access and it is not a framework, so we highly encourage you to use a game engine if you do not have experience working with low level graphics development. This bindings contain several optional helper procedures to help with the development and to better suit it to the language.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "nimgraphviz",
    "description": "Nim bindings for the GraphViz tool and the DOT graph language",
    "tags": [
      "graph",
      "viz",
      "graphviz",
      "dot",
      "pygraphviz"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/QuinnFreedman/nimgraphviz",
    "url": "https://github.com/QuinnFreedman/nimgraphviz",
    "long_description": "The nimgraphviz module is a library for making graphs using GraphViz based on PyGraphviz.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "nimgui",
    "description": "bindings to cimgui - https://github.com/cimgui/cimgui",
    "tags": [
      "imgui",
      "gui",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zacharycarter/nimgui",
    "url": "https://github.com/zacharycarter/nimgui",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "nimha",
    "description": "Nim Home Assistant (NimHA) is a hub for combining multiple home automation devices and automating jobs",
    "tags": [
      "smarthome",
      "automation",
      "mqtt",
      "xiaomi"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_homeassistant",
    "url": "https://github.com/ThomasTJdev/nim_homeassistant",
    "long_description": "Nim Home Assistant (NimHA) is a hub for combining multiple home automation devices and automating jobs. Nim Home Assistant is developed to run on a Raspberry Pi with a 7\" touchscreen, mobile devices and on large screens.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "nimhdf5",
    "description": "Bindings for the HDF5 data format C library",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "libhdf5",
      "hdf5",
      "ndarray",
      "storage"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vindaar/nimhdf5",
    "url": "https://github.com/Vindaar/nimhdf5",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Data science"
    ]
  },
  {
    "name": "nimhq",
    "description": "HQ Trivia API wrapper for Nim",
    "tags": [
      "library",
      "api",
      "client"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/sillibird/nimhq",
    "url": "https://github.com/sillibird/nimhq",
    "long_description": "nimhq is a HQ Trivia API wrapper written in nim.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "nimhttpd",
    "description": "A tiny static file web server.",
    "tags": [
      "web-server",
      "static-file-server",
      "server",
      "http"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/h3rald/nimhttpd",
    "url": "https://github.com/h3rald/nimhttpd",
    "long_description": "NimHTTPd is a minimal web server that can be used to serve static files.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web",
      "Tools"
    ]
  },
  {
    "name": "nimi3status",
    "description": "Lightweight i3 status bar.",
    "tags": [
      "i3",
      "i3status"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nimi3status",
    "url": "https://github.com/FedericoCeratto/nimi3status",
    "long_description": "Nim i3status is a simple status bar for i3 implemented in Nim.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI",
      "Miscellaneous"
    ]
  },
  {
    "name": "niminst",
    "description": "tool to generate installers for Nim programs",
    "tags": [
      "app",
      "binary",
      "tool",
      "installation",
      "generator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/niminst",
    "url": "https://github.com/nim-lang/niminst",
    "long_description": "niminst is a tool to generate an installer for a Nim program. Currently it can create an installer for Windows as well as installation/deinstallation scripts for UNIX. Some support for Linux' package management systems is also included.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimjson",
    "description": "nimjson generates nim object definitions from json documents.",
    "tags": [
      "lib",
      "cli",
      "command",
      "json",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/nimjson",
    "url": "https://github.com/jiro4989/nimjson",
    "long_description": "nimjson generates nim object definitions from json documents.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "nimkerberos",
    "description": "WinKerberos wrapper for Nim",
    "tags": [
      "kerberos",
      "ntlm",
      "authentication",
      "auth",
      "sspi"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimkerberos",
    "url": "https://github.com/genotrance/nimkerberos",
    "long_description": "Nimkerberos is a Nim wrapper for the WinKerberos library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System",
      "Network"
    ]
  },
  {
    "name": "nimlapack",
    "description": "LAPACK bindings",
    "tags": [
      "LAPACK",
      "linear-algebra"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/unicredit/nimlapack",
    "url": "https://github.com/unicredit/nimlapack",
    "long_description": "Nim bindings for the LAPACK libraries.\nThe library requires to link some LAPACK implementation to perform the actual linear algebra operations. By default, it tries to link whatever is the default system-wide LAPACK implementation.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "nimlibxlsxwriter",
    "description": "libxslxwriter wrapper for Nim",
    "tags": [
      "Excel",
      "wrapper",
      "xlsx"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/KeepCoolWithCoolidge/nimlibxlsxwriter",
    "url": "https://github.com/KeepCoolWithCoolidge/nimlibxlsxwriter",
    "long_description": "Libxlsxwriter is a C library that can be used to write text, numbers, formulas and hyperlinks to multiple worksheets in an Excel 2007+ XLSX file.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimline",
    "description": "Wrapper-less C/C++ interop for Nim",
    "tags": [
      "c",
      "c++",
      "interop",
      "ffi",
      "wrappers"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fragcolor-xyz/nimline",
    "url": "https://github.com/fragcolor-xyz/nimline",
    "long_description": "Write C/C++ straight from Nim, without the need to generate wrappers. Inspired by std/jsffi and using the magic of `importcpp`, `macros` and many other awesome Nim features.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "nimlsp",
    "description": "Language Server Protocol implementation for Nim",
    "tags": [
      "lsp",
      "nimsuggest",
      "editor"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/nimlsp",
    "url": "https://github.com/PMunch/nimlsp",
    "long_description": "This is a Language Server Protocol implementation in Nim, for Nim. It is based on nimsuggest, which means that every editor that supports LSP will now have the same quality of suggestions that has previously only been available in supported editors.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimly",
    "description": "A lexer generator and parser generator package work in Nim.",
    "tags": [
      "BNF",
      "EBNF",
      "lexer",
      "parser",
      "lexer-generator",
      "parser-generator"
    ],
    "license": "GPL-3.0",
    "method": "git",
    "web": "https://github.com/loloiccl/nimly",
    "url": "https://github.com/loloiccl/nimly",
    "long_description": "Lexer Generator and Parser Generator as a library in Nim.\nLexer and parser can written in formats like lex and yacc and these are generated at compile-time.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "nimlz4",
    "description": "Nim wrapper for the LZ4 library. There is also a high-level API for easy use",
    "tags": [
      "wrapper",
      "compression",
      "lzo",
      "lz4"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/dfdeshom/nimlz4",
    "url": "https://github.com/dfdeshom/nimlz4.git",
    "long_description": "Nim wrapper for LZ4",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimmm",
    "description": "A terminal file manager written in nim",
    "tags": [
      "nimmm",
      "terminal",
      "nimbox",
      "tui"
    ],
    "license": "GPL-3.0",
    "method": "git",
    "web": "https://github.com/joachimschmidt557/nimmm",
    "url": "https://github.com/joachimschmidt557/nimmm",
    "long_description": "A terminal file manager written in nim inspired by the awesome nnn.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "nimmonocypher",
    "description": "monocypher wrapper for Nim",
    "tags": [
      "monocypher",
      "crypto",
      "crypt",
      "hash",
      "sha512",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimmonocypher",
    "url": "https://github.com/genotrance/nimmonocypher",
    "long_description": "Monocypher is an easy to use, easy to deploy, auditable crypto library written in portable C. It approaches the size of TweetNaCl and the speed of Libsodium.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimna",
    "description": "Nucleic acid folding and design.",
    "tags": [
      "library",
      "nucleic-acid-folding",
      "scientific",
      "biology"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mjendrusch/nimna",
    "url": "https://github.com/mjendrusch/nimna",
    "long_description": "nimna is a set of bindings to ViennaRNA, a library for RNA and DNA folding applications. It consists of a very thin c2nim wrapper RNA.nim, as well as a high level interface nimna.nim, which wraps the many pointers used in the ViennaRNA into garbage collected ref objects to make the library easier to use. Furthermore, it provides nucleic acid design functionality in the form of an 'artificial immune-system' algorithm in design.nim.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "nimobserver",
    "description": "An implementation of the observer pattern",
    "tags": [
      "observer",
      "patterns",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Tangdongle/nimobserver",
    "url": "https://github.com/Tangdongle/nimobserver",
    "long_description": "This is a event queue implemented in Nim, based on the Observer pattern",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nimongo",
    "description": "MongoDB driver in pure Nim language with synchronous and asynchronous I/O support",
    "tags": [
      "mongo",
      "mongodb",
      "database",
      "server",
      "driver",
      "storage"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SSPkrolik/nimongo",
    "url": "https://github.com/SSPkrolik/nimongo",
    "long_description": "nimongo has a main intention to provide developer-friendly way to interact with MongoDB using Nim programming language without any other dependencies.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "nimp5",
    "description": "Nim bindings for p5.js.",
    "tags": [
      "p5",
      "javascript",
      "creative",
      "coding",
      "processing",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Foldover/nim-p5",
    "url": "https://github.com/Foldover/nim-p5",
    "long_description": "p5 is a Javascript library used by artists, designers and programmers alike to quickly and easily express ideas, sketch concepts, make games and create interactive applications.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web",
      "JS"
    ]
  },
  {
    "name": "nimpb",
    "description": "A Protocol Buffers library for Nim",
    "tags": [
      "serialization",
      "protocol-buffers",
      "protobuf",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/oswjk/nimpb",
    "url": "https://github.com/oswjk/nimpb",
    "long_description": "A Nim library to serialize/deserialize Protocol Buffers.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Algorithms"
    ]
  },
  {
    "name": "nimpb_protoc",
    "description": "Protocol Buffers compiler support package for nimpb",
    "tags": [
      "serialization",
      "protocol-buffers",
      "protobuf"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/oswjk/nimpb_protoc",
    "url": "https://github.com/oswjk/nimpb_protoc",
    "long_description": "This repo contains protoc binaries for most common platforms, for easy usage with nimpb. The actual code generation is in nimpb.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Network",
      "System"
    ]
  },
  {
    "name": "nimpcre",
    "description": "PCRE wrapper for Nim",
    "tags": [
      "pcre",
      "regex"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimpcre",
    "url": "https://github.com/genotrance/nimpcre",
    "long_description": "Nimpcre is a Nim wrapper for the PCRE library.\nWhile PCRE is already available within Nim, this module makes it easy to statically compile PCRE into the resulting binary instead of relying on an external DLL or binary.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimpy",
    "description": "Nim - Python bridge",
    "tags": [
      "python",
      "bridge"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/nimpy",
    "url": "https://github.com/yglukhov/nimpy",
    "long_description": "Native language integration with Python has never been easier!",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimqml",
    "description": "Qt Qml bindings",
    "tags": [
      "Qt",
      "Qml",
      "UI",
      "GUI"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/filcuc/nimqml",
    "url": "https://github.com/filcuc/nimqml",
    "long_description": "The NimQml module adds Qt Qml bindings to the Nim programming language allowing you to create new modern UI by mixing the Qml declarative syntax and the Nim imperative language.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "nimquery",
    "description": "Library for querying HTML using CSS-selectors, like JavaScripts document.querySelector",
    "tags": [
      "html",
      "scraping",
      "web"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/GULPF/nimquery",
    "url": "https://github.com/GULPF/nimquery",
    "long_description": "A library for querying HTML using CSS selectors, like JavaScripts `document.querySelector/document.querySelectorAll`",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "nimr",
    "description": "Helper to run nim code like a script",
    "tags": [
      "script",
      "utils"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Jeff-Ciesielski/nimr",
    "url": "https://github.com/Jeff-Ciesielski/nimr",
    "long_description": "Run nim programs like scripts",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "System"
    ]
  },
  {
    "name": "nimrat",
    "description": "Module for working with rational numbers (fractions)",
    "tags": [
      "library",
      "math",
      "numbers"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/apense/nimrat",
    "url": "https://github.com/apense/nimrat",
    "long_description": "This module implements some very basic rational arithmetic in Nim.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "nimrax",
    "description": "Radix tree wrapper for Nim",
    "tags": [
      "rax",
      "radix",
      "tree",
      "data",
      "structure"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimrax",
    "url": "https://github.com/genotrance/nimrax",
    "long_description": "A radix tree implementation",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimrdkafka",
    "description": "Nim wrapper for librdkafka",
    "tags": [
      "library",
      "wrapper",
      "kafka"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/dfdeshom/nimrdkafka",
    "url": "https://github.com/dfdeshom/nimrdkafka.git",
    "long_description": "librdkafka is a C library implementation of the Apache Kafka protocol, providing Producer, Consumer and Admin clients.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms",
      "Cloud"
    ]
  },
  {
    "name": "nimrod-glfw",
    "description": "Nim bindings for GLFW library.",
    "tags": [
      "library",
      "glfw",
      "opengl",
      "windowing",
      "game"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rafaelvasco/nimrod-glfw",
    "url": "https://github.com/rafaelvasco/nimrod-glfw/",
    "long_description": "GLFW is an Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan development on the desktop. It provides a simple API for creating windows, contexts and surfaces, receiving input and events.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI",
      "Games"
    ]
  },
  {
    "name": "nimroutine",
    "description": "A go routine like nim implementation",
    "tags": [
      "goroutine",
      "routine",
      "lightweight",
      "thread"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rogercloud/nim-routine",
    "url": "https://github.com/rogercloud/nim-routine",
    "long_description": "A go routine like nim implementation.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nimrpc",
    "description": "RPC implementation for Nim based on msgpack4nim",
    "tags": [
      "msgpack",
      "library",
      "rpc",
      "nimrpc"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rogercloud/nim-rpc",
    "url": "https://github.com/rogercloud/nim-rpc",
    "long_description": "RPC implementation for Nim based on msgpack4nim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System",
      "Network"
    ]
  },
  {
    "name": "nimrpc_milis",
    "description": "RPC implementation for Nim based on msgpack4nim",
    "tags": [
      "msgpack",
      "library",
      "rpc",
      "nimrpc"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/milisarge/nimrpc_milis",
    "url": "https://github.com/milisarge/nimrpc_milis",
    "long_description": "RPC implementation for Nim based on msgpack4nim",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System",
      "Network"
    ]
  },
  {
    "name": "nimrtlsdr",
    "description": "A Nim wrapper for librtlsdr",
    "tags": [
      "rtl-sdr",
      "wrapper",
      "bindings",
      "rtlsdr"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/jpoirier/nimrtlsdr",
    "url": "https://github.com/jpoirier/nimrtlsdr",
    "long_description": "nimtlsdr is a simple Nim interface to devices supported by the RTL-SDR project, which turns certain USB DVB-T dongles employing the Realtek RTL2832U chipset into a low-cost, general purpose software-defined radio receiver. It wraps all the functions in the librtlsdr library (including asynchronous read support).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware",
      "Audio"
    ]
  },
  {
    "name": "nimrun",
    "description": "Shebang frontend for running nim code as scripts. Does not require .nim extensions.",
    "tags": [
      "shebang",
      "unix",
      "linux",
      "bsd",
      "mac",
      "shell",
      "script",
      "nimble",
      "nimcr",
      "compile",
      "run",
      "standalone"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lee-b/nimrun",
    "url": "https://github.com/lee-b/nimrun",
    "long_description": "This is a shebang compatibility wrapper for the nim language.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "nimshell",
    "description": "Library for shell scripting in nim",
    "tags": [
      "shell",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/nimshell",
    "url": "https://github.com/vegansk/nimshell",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "nimsl",
    "description": "Shaders in Nim.",
    "tags": [
      "shader",
      "opengl",
      "glsl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/nimsl",
    "url": "https://github.com/yglukhov/nimsl",
    "long_description": "Shaders in Nim language.\nEver wanted to use metaprogramming and unittests for your shader functions? Now you have it! Of course you also have other nice Nim features, such as type inference, template, generics, etc. Since shader code is valid Nim code, you can compile it to native/js target and debug it with your regular debugging tools.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "nimsnappy",
    "description": "Nim wrapper for the snappy compression library. there is also a high-level API for easy use",
    "tags": [
      "wrapper",
      "compression"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/dfdeshom/nimsnappy",
    "url": "https://github.com/dfdeshom/nimsnappy.git",
    "long_description": "Nim wrapper for the snappy compression library. there is also a high-level API to for easy usage. The two functions exposed are compress and uncompress. This wrapper tracks snappy version 1.1.3",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimsnappyc",
    "description": "Wrapper for the Snappy-C compression library",
    "tags": [
      "snappy",
      "compression",
      "wrapper",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/NimCompression/nimsnappyc",
    "url": "https://github.com/NimCompression/nimsnappyc",
    "long_description": "NimSnappyC provides a Snappy compression/decompression for Nim through wrapping to snappy-c.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "nimspice",
    "description": "A bunch of macros. sugar if you would",
    "tags": [
      "macro",
      "template",
      "class",
      "collection"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/CodeDoes/nimspice",
    "url": "https://github.com/CodeDoes/nimspice",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "nimssh2",
    "description": "libssh2 wrapper for Nim",
    "tags": [
      "ssh",
      "library",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimssh2",
    "url": "https://github.com/genotrance/nimssh2",
    "long_description": "libssh2 is a library implementing the SSH2 protocol",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "nimssl",
    "description": "OpenSSL wrapper for Nim",
    "tags": [
      "openssl",
      "sha",
      "sha1",
      "hash",
      "sha256",
      "sha512"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimssl",
    "url": "https://github.com/genotrance/nimssl",
    "long_description": "Nimssl is a Nim wrapper for the OpenSSL library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "nimstopwatch",
    "description": "A Nim-based, non-graphical application designed to measure the amount of time elapsed from its activation to deactivation, includes total elapsed time, lap, and split times.",
    "tags": [
      "app",
      "timer"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/twist-vector/nim-stopwatch",
    "url": "https://github.com/twist-vector/nim-stopwatch.git",
    "long_description": "stopwatch is non-graphical software designed to measure the amount of time elapsed from its activation to the time when it is deactivated. In addition to the total elapsed time a set of \"lap\" and \"split\" times can be reported. A split time is the elapsed between activation and the pressing of the lap button. The lap time is the time that has elapsed between presses of the lap button.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "nimsuggest",
    "description": "Tool for providing auto completion data for Nim source code.",
    "tags": [
      "binary",
      "app",
      "suggest",
      "compiler",
      "autocomplete"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/nimsuggest",
    "url": "https://github.com/nim-lang/nimsuggest.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*",
      "Development"
    ]
  },
  {
    "name": "nimsvg",
    "description": "Nim-based DSL allowing to generate SVG files and GIF animations.",
    "tags": [
      "svg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/NimSvg",
    "url": "https://github.com/bluenote10/NimSvg",
    "long_description": "Nim-based DSL allowing to generate SVG files and GIF animations.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "nimterlingua",
    "description": "Internationalization at Compile Time for Nim. Macro to translate unmodified code from 1 INI file. NimScript compatible.",
    "tags": [
      "internationalization",
      "i18n",
      "localization",
      "translation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-internimgua",
    "url": "https://github.com/juancarlospaco/nim-internimgua",
    "long_description": "* Internationalization and localization at Compile Time for Nim.\n* 1 Macro to replace strings in-place at compile time with 0 cost at runtime.\n* Translate unmodified code from 1 INI file. Replace Emojis and Unicode in-place.\n* High performance with low resources, everything is done compile-time only!.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Development"
    ]
  },
  {
    "name": "nimterop",
    "description": "Nimterop makes C/C++ interop within Nim seamless",
    "tags": [
      "c",
      "c++",
      "c2nim",
      "interop",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimterop",
    "long_description": "Nimterop is a Nim package that aims to make C/C++ interop seamless\nNim has one of the best FFI you can find - importing C/C++ is supported out of the box. All you need to provide is type and proc definitions for Nim to interop with C/C++ binaries. Generation of these wrappers is easy for simple libraries but quickly gets out of hand. c2nim greatly helps here by parsing and converting C/C++ into Nim but is limited due to the complex and constantly evolving C/C++ grammar. nimgen mainly focuses on automating the wrapping process and fills some holes but is again limited to c2nim's capabilities.\nThe goal of nimterop is to leverage the tree-sitter engine to parse C/C++ code and then convert relevant portions of the AST into Nim definitions. tree-sitter is a Github sponsored project that can parse a variety of languages into an AST which is then leveraged by the Atom editor for syntax highlighting and code folding.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development",
      "Tools"
    ]
  },
  {
    "name": "nimtess2",
    "description": "Nim wrapper for libtess2",
    "tags": [
      "glu",
      "tesselator",
      "libtess2",
      "opengl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtess2",
    "url": "https://github.com/genotrance/nimtess2",
    "long_description": "Game and tools oriented refactored version of GLU tesselator.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "nimtomd",
    "description": "Convert a Nim file or string to Markdown",
    "tags": [
      "markdown",
      "md"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nimtomd",
    "url": "https://github.com/ThomasTJdev/nimtomd",
    "long_description": "This Nim package converts Nim code to Markdown. Use nimtomd on your Nim file and transform it into a styled Markdown file.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting",
      "Web"
    ]
  },
  {
    "name": "nimwc",
    "description": "A website management tool. Run the file and access your webpage.",
    "tags": [
      "website",
      "webpage",
      "blog",
      "binary"
    ],
    "license": "PPL",
    "method": "git",
    "web": "https://nimwc.org/",
    "url": "https://github.com/ThomasTJdev/nim_websitecreator",
    "long_description": "A quick website tool. Run the nim file and access your webpage.\n* Explore the dashboard with access to the plugin store\n* Admin configuration of the backend from the browser\n* Custom profiles with Libravatar/Gravatar\n* SEO optimized\n* Secured by self-firejailing and 2FA\n* 1 language for the whole stack\n* C speed\n* Python-like syntax\n* Seamlessly integration with anything that has a C API\n* .. and much more!",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Web",
      "Tools"
    ]
  },
  {
    "name": "nimx",
    "description": "Cross-platform GUI framework",
    "tags": [
      "gui",
      "ui",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/nimx",
    "url": "https://github.com/yglukhov/nimx",
    "long_description": "nimx is a UI library written in Nim. It provides all the needed layers to create a UI application from scratch. Nimx notable features:\n* Cross-platform. Nimx can run on Windows, Linux, MacOS X, iOS, Android, JavaScript, Asm.js, WebAssembly, and more.\n* Hardware accelerated. Nimx uses OpenGL for the graphics. When no animation is running nimx will redraw the windows only when needed to be power efficient. It can also be switched to high FPS mode so it could be used as a porting layer for games.\n* Nimx drawing algorithms are designed to be resolution independent. Shapes are drawn with distance functions, fonts utilize signed distance fields and provide subpixel antialiasing.\n* nimx utilizes kiwi constraint solving algorithm for its layout system allowing for sophisticated layouts defined with an easy to use DSL.\n* nimx provides extensible abstractions for cross-platform asset management so that your code looks and works the same regardless you're compiling for a desktop OS, Android or JavaScript.\n* nimx provides some essential set of controls and views and makes it easy to implement new ones in separate packages.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "JS",
      "GUI"
    ]
  },
  {
    "name": "nimzbar",
    "description": "zbar wrapper for Nim",
    "tags": [
      "zbar",
      "barcode",
      "bar",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimzbar",
    "url": "https://github.com/genotrance/nimzbar",
    "long_description": "ZBar Bar Code Reader is an open source software suite for reading bar codes from various sources, such as video streams, image files and raw intensity sensors. It supports EAN-13/UPC-A, UPC-E, EAN-8, Code 128, Code 39, Codabar, Interleaved 2 of 5 and QR Code.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "nimzend",
    "description": "Native Nim Zend API glue for easy PHP extension development.",
    "tags": [
      "zend",
      "php",
      "binding",
      "extension"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/metatexx/nimzend",
    "url": "https://github.com/metatexx/nimzend",
    "long_description": "Pre alpha WIP Nim Module for creating PHP extensions using native Zend (unsupported).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "*Dead*",
      "FFI",
      "Web"
    ]
  },
  {
    "name": "nish",
    "description": "A Toy Shell Application",
    "tags": [
      "nish",
      "shell"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/owlinux1000/nish",
    "url": "https://github.com/owlinux1000/nish",
    "long_description": "This is a shell of toy application to learn nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "*Dead*",
      "Tools"
    ]
  },
  {
    "name": "niup",
    "description": "IUP FFI bindings",
    "tags": [
      "iup",
      "gui",
      "nim"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dariolah/niup",
    "url": "https://github.com/dariolah/niup",
    "long_description": "IUP is a multi-platform toolkit for building graphical user interfaces.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "nlopt",
    "description": "A wrapper for the non-linear optimization C library Nlopt",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "nonlinear-optimization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vindaar/nimnlopt",
    "url": "https://github.com/Vindaar/nimnlopt",
    "long_description": "This library provides a wrapper for the Nlopt C library, which is a library for non-linear optimizations. It provides many different algorithms for easy comparison separated into local / gradient based, global / gradient based, local / derivative free and global / derivative free algorithms.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths",
      "Data science"
    ]
  },
  {
    "name": "nmiline",
    "description": "Plotting tool using NiGui",
    "tags": [
      "graph"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mzteruru52/NmiLine",
    "url": "https://github.com/mzteruru52/NmiLine",
    "long_description": "NmiLine is a plotting tool using NiGui.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "noaa",
    "description": "NOAA weather API wrapper",
    "tags": [
      "library",
      "wrapper",
      "weather"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-noaa",
    "url": "https://github.com/achesak/nim-noaa",
    "long_description": "nim-noaa is a Nim wrapper for the NOAA weather API.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "node",
    "description": "Library for async programming and communication. This Library uses a future/promise, non-blocking I/O model based on libuv.",
    "tags": [
      "async",
      "io",
      "socket",
      "net",
      "tcp",
      "http",
      "libuv"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://tulayang.github.io/node/",
    "url": "https://github.com/tulayang/nimnode",
    "long_description": "Library for async programming and communication. This Library uses an event-driven, non-blocking I/O model based on libuv. Furthermore, you can use `Future async/await` in the standard library to construct logical workflow to simplify programming tasks.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network",
      "Algorithms"
    ]
  },
  {
    "name": "noise",
    "description": "Nim implementation of linenoise command line editor",
    "tags": [
      "linenoise",
      "readline",
      "command-line",
      "repl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/nim-noise",
    "url": "https://github.com/jangko/nim-noise",
    "long_description": "Nim implementation of linenoise command line editor.\n* Line editing with emacs keybindings\n* History handling\n* Completion\n* Unicode aware\n* Intuitive ESC key sub menu escaping\n* Incremental history search\n* Support multiline editing out of the box\n* Support multiline prompt with color and unicode characters\n* A bunch of compile time switches to select which features you want to turn on/off\n* Support Windows, Linux and Mac OS\n* Disable all basic features, then you'll get a cross platform key stroke libray",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Miscellaneous"
    ]
  },
  {
    "name": "nominatim",
    "description": "OpenStreetMap Nominatim API Lib for Nim",
    "tags": [
      "openstreetmap",
      "nominatim",
      "multisync",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-nominatim",
    "url": "https://github.com/juancarlospaco/nim-nominatim",
    "long_description": "OpenStreetMap Nominatim API Lib for Nim, Async & Sync.\nYou may search for a name or address (forward search) or look up data by its geographic coordinate (reverse search). Each result comes with a link to a details page where you can inspect what data about the object is saved in the database and investigate how the address of the object has been computed.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science",
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "norm",
    "description": "Nim ORM.",
    "tags": [
      "orm",
      "db",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/moigagoo/norm",
    "url": "https://github.com/moigagoo/norm",
    "long_description": "Norm is a lightweight ORM written in Nim programming language. It enables you to store Nim's objects as DB rows and fetch data from DB as objects. So that your business logic is driven with objects, and the storage aspect is decoupled from it.\nNorm supports SQLite and PostgreSQL.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "normalize",
    "description": "Unicode normalization forms (tr15)",
    "tags": [
      "unicode",
      "normalization",
      "nfc",
      "nfd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-normalize",
    "url": "https://github.com/nitely/nim-normalize",
    "long_description": "A library for normalizing unicode text. Implements all the Unicode Normalization Form algorithms. Normalization is buffered and takes O(n) time and O(1) space.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "notetxt",
    "description": "A library that implements the note.txt specification for note taking.",
    "tags": [
      "notetxt,",
      "note",
      "taking"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mrshu/nim-notetxt",
    "url": "https://github.com/mrshu/nim-notetxt",
    "long_description": "A library that implements the note.txt specification for note taking.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "notifications",
    "description": "Library for displaying notifications on the desktop",
    "tags": [
      "notifications",
      "alerts",
      "gui",
      "toasts",
      "macosx",
      "cocoa"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/notifications",
    "url": "https://github.com/dom96/notifications",
    "long_description": "This is a simple Nim library for displaying notifications (aka alerts, toasts and probably many other names).",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "notify",
    "description": "A wrapper to notification libraries",
    "tags": [
      "notify",
      "libnotify",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xbello/notify-nim",
    "url": "https://github.com/xbello/notify-nim",
    "long_description": "A quick wrapper over libnotify, a library to show unobstrusive notifications in a Gnome environment.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI",
      "Tools"
    ]
  },
  {
    "name": "notmuch",
    "description": "wrapper for the notmuch mail library",
    "tags": [
      "notmuch",
      "wrapper",
      "email",
      "tagging"
    ],
    "license": "BSD 3-Clause",
    "method": "git",
    "web": "https://github.com/samdmarshall/notmuch.nim",
    "url": "https://github.com/samdmarshall/notmuch.nim",
    "long_description": "Not much of an email library, (just index and search)",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "npeg",
    "description": "PEG (Parsing Expression Grammars) string matching library for Nim",
    "tags": [
      "PEG",
      "parser",
      "parsing",
      "regexp",
      "regular",
      "grammar",
      "lexer",
      "lexing",
      "pattern",
      "matching"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zevv/npeg",
    "url": "https://github.com/zevv/npeg",
    "long_description": "NPeg is a pure Nim pattern matching library. It provides macros to compile patterns and grammars (PEGs) to Nim procedures which will parse a string and collect selected parts of the input. PEGs are not unlike regular expressions, but offer more power and flexibility, and have less ambiguities.\nSome use cases where NPeg is useful are configuration or data file parsers, robust protocol implementations, input validation, lexing of programming languages or domain specific languages.\nSome NPeg highlights:\n* Grammar definitions and Nim code can be freely mixed. Nim code is embedded using the normal Nim code block syntax, and does not disrupt the grammar definition.\n* NPeg-generated parsers can be used both at run and at compile time.\n* NPeg offers various methods for tracing, optimizing and debugging your parsers.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "JS",
      "Algorithms"
    ]
  },
  {
    "name": "nre",
    "description": "A better regular expression library",
    "tags": [
      "library",
      "pcre",
      "regex"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/flaviut/nre",
    "url": "https://github.com/flaviut/nre.git",
    "long_description": "A regular expression library for Nim using PCRE to do the hard work. The top priorities are ergonomics & ease of use.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nrpl",
    "description": "A rudimentary Nim REPL",
    "tags": [
      "REPL",
      "application"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/nrpl",
    "url": "https://github.com/vegansk/nrpl",
    "long_description": "This is a rudimentary Read Evaluate Print Loop (REPL) for Nim using TCC to quickly compile each Read. It's quite crude, but supports deferred (or multiline) entry and execution.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Tools"
    ]
  },
  {
    "name": "nsh",
    "description": "nsh: Nim SHell(cross platform)",
    "tags": [
      "shell",
      "repl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gmshiba/nish",
    "url": "https://github.com/gmshiba/nish",
    "long_description": "nsh is the SHell implemented on Nim. nsh can use not only shell commands, but also Nim code.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Tools"
    ]
  },
  {
    "name": "nshout",
    "description": "Nim bindings for libshout",
    "tags": [
      "library",
      "shouter",
      "libshout",
      "wrapper",
      "bindings",
      "audio",
      "web"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Senketsu/nshout",
    "url": "https://github.com/Senketsu/nshout",
    "long_description": "libshout allows applications to easily communicate and broadcast to an Icecast streaming media server. It handles the socket connections, metadata communication, and data streaming for the calling application, and lets developers focus on feature sets instead of implementation details.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio",
      "Tools"
    ]
  },
  {
    "name": "nsu",
    "description": "Simple screenshot library & cli tool made in Nim",
    "tags": [
      "library",
      "tool",
      "utility",
      "screenshot"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Senketsu/nsu",
    "url": "https://github.com/Senketsu/nsu",
    "long_description": "Nsu is very simple and small screenshot library / tool with very basic functionality. Its was made as replacement of external tool dependancy for pomfit ('scrot'). This library is crossplatform (Windows & Linux).",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI",
      "Tools"
    ]
  },
  {
    "name": "ntangle",
    "description": "Command-line utility for Tangling of Org mode documents",
    "tags": [
      "literate-programming",
      "org-mode",
      "org",
      "tangling",
      "emacs"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OrgTangle/ntangle",
    "url": "https://github.com/OrgTangle/ntangle",
    "long_description": "Command-line utility for Tangling of Org documents.\nExtracting source code from code blocks is a basic task in literate programming. Org has features to make this easy. In literate programming parlance, documents on creation are woven with code and documentation, and on export, the code is tangled for execution by a computer.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "number_files",
    "description": "Command to add counter suffix/prefix to a list of files.",
    "tags": [
      "rename",
      "filename",
      "finder"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/number_files/",
    "url": "https://github.com/Araq/number_files/",
    "long_description": "Number files is a small program to rename a list of specified files with a prefix or suffix and a counter value. It is a command line program but it comes with an Automator workflow to be invoked from MacOSX Finder contextual menu.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Tools"
    ]
  },
  {
    "name": "numericalnim",
    "description": "A collection of numerical methods written in Nim",
    "tags": [
      "numerical",
      "ode",
      "integration",
      "scientific"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/HugoGranstrom/numericalnim/",
    "url": "https://github.com/HugoGranstrom/numericalnim/",
    "long_description": "NumericalNim is a collection of numerical methods written in Nim. Currently it has support for basic integration and ODE. It can operate on floats and custom structures, such as vectors and tensors (if they support a set of operators).",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "nuuid",
    "description": "A Nim source only UUID generator",
    "tags": [
      "library",
      "uuid",
      "guid"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/nim-only-uuid",
    "url": "https://github.com/yglukhov/nim-only-uuid",
    "long_description": "A Nim source only UUID generator",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "nwt",
    "description": "experiment to build a jinja like template parser",
    "tags": [
      "template",
      "html",
      "pure",
      "jinja"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/enthus1ast/nimWebTemplates",
    "url": "https://github.com/enthus1ast/nimWebTemplates",
    "long_description": "nwt is a little template engine",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "oauth",
    "description": "OAuth library for nim",
    "tags": [
      "library",
      "oauth",
      "oauth2",
      "authorization"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "http://cordea.github.io/oauth",
    "url": "https://github.com/CORDEA/oauth",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "oculus",
    "description": "Bindings for the Oculus VR SDK.",
    "tags": [
      "binding",
      "oculus",
      "rift",
      "vr",
      "libovr",
      "ovr",
      "dk1",
      "dk2",
      "gearvr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/oculus",
    "url": "https://github.com/nimious/oculus.git",
    "long_description": "This package contains bindings to the Oculus SDK (libovr) for the Nim programming language. Oculus provides virtual reality head-mounted displays and positional tracking devices, such as the DK1, DK2 and GearVR.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Hardware",
      "Games"
    ]
  },
  {
    "name": "ogg",
    "description": "Binding to libogg",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "audio",
      "sound",
      "video",
      "metadata",
      "media"
    ],
    "license": "CC0",
    "method": "hg",
    "url": "https://bitbucket.org/BitPuffin/nim-ogg",
    "long_description": "Nim binding to the ogg header.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "oldgtk3",
    "description": "Low level bindings for GTK3 related libraries",
    "tags": [
      "library",
      "gtk",
      "wrapper",
      "gui"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/stefansalewski/oldgtk3",
    "url": "https://github.com/stefansalewski/oldgtk3",
    "long_description": "Bindings from the Nim programming language to the GTK3 GUI (Graphical User Interface) library and related libraries.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "oldwinapi",
    "description": "Old Win API library for Nim",
    "tags": [
      "library",
      "windows",
      "api"
    ],
    "license": "LGPL with static linking exception",
    "method": "git",
    "web": "https://github.com/nim-lang/oldwinapi",
    "url": "https://github.com/nim-lang/oldwinapi",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "omnilog",
    "description": "Advanced logging library for Nim with structured logging, formatters, filters and writers.",
    "tags": [
      "library",
      "logging",
      "logs"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/nim-appkit/omnilog",
    "url": "https://github.com/nim-appkit/omnilog",
    "long_description": "Omnilog is an advanced logging library for the Nim language.\nIt supports plain text and structured logging with multiple, pluggable writers which can be seperately filtered and formatted.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "oop_utils",
    "description": "Macro for building OOP class hierarchies based on closure methods.",
    "tags": [
      "macro",
      "class",
      "inheritance",
      "oop",
      "closure",
      "methods"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/closure_methods",
    "url": "https://github.com/bluenote10/oop_utils",
    "long_description": "oop_utils provides macros that allow to easily create OOP class hierarchies.\nIt comes in two different flavors:\n* Standard classes: Allows to define type hierarchies based on Nim's standard method dispatch.\n* Closure classes: Allows to define type hierarchies based on closure method dispatch.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "open_elevation",
    "description": "OpenStreetMap Elevation API MultiSync Client for Nim",
    "tags": [
      "openstreetmap",
      "geo",
      "elevation",
      "multisync",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-open-elevation",
    "url": "https://github.com/juancarlospaco/nim-open-elevation",
    "long_description": "Open Elevation for OpenStreetMap MultiSync API Lib and App.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Science",
      "Tools"
    ]
  },
  {
    "name": "openal",
    "description": "An OpenAL wrapper.",
    "tags": [
      "sound",
      "OpenAL",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/treeform/openal",
    "long_description": "An OpenAL wrapper for nim. OpenAL is a cross platform way to play sounds.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "opencl",
    "description": "Low-level wrapper for OpenCL",
    "tags": [
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/opencl",
    "url": "https://github.com/nim-lang/opencl",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 3,
    "categories": [
      "FFI",
      "System",
      "Hardware"
    ]
  },
  {
    "name": "opencv",
    "description": "OpenCV wrapper",
    "tags": [
      "library",
      "wrapper",
      "opencv",
      "image",
      "processing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/nim-opencv",
    "url": "https://github.com/dom96/nim-opencv",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image",
      "Data science"
    ]
  },
  {
    "name": "openexchangerates",
    "description": "OpenExchangeRates API Client for Nim. Works with/without SSL. Partially works with/without Free API Key.",
    "tags": [
      "money",
      "exchange",
      "openexchangerates",
      "bitcoin",
      "gold",
      "dollar",
      "euro",
      "prices"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-openexchangerates",
    "url": "https://github.com/juancarlospaco/nim-openexchangerates",
    "long_description": "OpenExchangeRates API Client for Nim.\nWorldwide exchange prices + Bitcoin price + Gold price. No dependencies.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Finance"
    ]
  },
  {
    "name": "opengl",
    "description": "High-level and low-level wrapper for OpenGL",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/opengl",
    "url": "https://github.com/nim-lang/opengl",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "openssl_evp",
    "description": "Wrapper for OpenSSL's EVP interface",
    "tags": [
      "library",
      "crypto",
      "openssl"
    ],
    "license": "OpenSSL and SSLeay",
    "method": "git",
    "web": "https://github.com/cowboy-coders/nim-openssl-evp",
    "url": "https://github.com/cowboy-coders/nim-openssl-evp",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "openstreetmap",
    "description": "OpenStreetMap API Lib for Nim",
    "tags": [
      "openstreetmap",
      "multisync",
      "async",
      "geo",
      "map"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-openstreetmap",
    "url": "https://github.com/juancarlospaco/nim-openstreetmap",
    "long_description": "OpenStreetMap API Lib for Nim, Async & Sync",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science"
    ]
  },
  {
    "name": "openweathermap",
    "description": "OpenWeatherMap API Lib for Nim, Free world wide Creative Commons & Open Data Licensed Weather data",
    "tags": [
      "OpenWeatherMap",
      "weather",
      "CreativeCommons",
      "OpenData",
      "multisync"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-openweathermap",
    "url": "https://github.com/juancarlospaco/nim-openweathermap",
    "long_description": "OpenWeatherMap API Lib for Nim, Free world wide Creative Commons & Open Data Licensed Weather data.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science"
    ]
  },
  {
    "name": "optional_t",
    "description": "Basic Option[T] library",
    "tags": [
      "option",
      "functional"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/flaviut/optional_t",
    "url": "https://github.com/flaviut/optional_t",
    "long_description": "A simple library for an Option[T]. The goal is to have clear syntax and be easy to use.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "optionals",
    "description": "Option types",
    "tags": [
      "library",
      "option",
      "optional",
      "maybe"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/MasonMcGill/optionals",
    "url": "https://github.com/MasonMcGill/optionals.git",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "options",
    "description": "Temporary package to fix broken code in 0.11.2 stable.",
    "tags": [
      "library",
      "option",
      "optionals",
      "maybe"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fallingduck/options-nim",
    "url": "https://github.com/fallingduck/options-nim",
    "long_description": "This is a temporary package for the people running the stable version of 0.11.2. Because of the name change from optionals to options, some 0.11.2 code will break.",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "optionsutils",
    "description": "Utility macros for easier handling of options in Nim",
    "tags": [
      "options",
      "library",
      "safety"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/nim-optionsutils",
    "url": "https://github.com/PMunch/nim-optionsutils",
    "long_description": "This module implements conveniences for dealing with the Option type in Nim. It is based on superfuncs maybe library and Toccatas novel boolean approach but also implements features found elsewhere.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "orient",
    "description": "OrientDB driver written in pure Nim, uses the OrientDB 2.0 Binary Protocol with Binary Serialization.",
    "tags": [
      "library",
      "wrapper",
      "database",
      "orientdb",
      "pure"
    ],
    "license": "MPL",
    "method": "git",
    "web": "https://github.com/philip-wernersbach/nim-orient",
    "url": "https://github.com/philip-wernersbach/nim-orient",
    "long_description": "OrientDB driver for the Nim language, uses the OrientDB 2.0 Binary Protocol with Binary Serialization.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "ormin",
    "description": "Prepared SQL statement generator. A lightweight ORM.",
    "tags": [
      "ORM",
      "SQL",
      "db",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/ormin",
    "url": "https://github.com/Araq/ormin",
    "long_description": "Prepared SQL statement generator for Nim. A lightweight ORM.\n* Compile time query checking: Types as well as table and column names are checked, no surprises at runtime!\n* Automatic join generation: Ormin knows the table relations and can compute the \"natural\" join for you!\n* Nim based DSL for queries: No syntax errors at runtime, no SQL injections possible.\n* Generated prepared statements: As fast as low level hand written API calls!\n* First class JSON support: No explicit conversions from rows to JSON objects required.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "os_files",
    "description": "Crossplatform (x11, windows, osx) native file dialogs; sytem file/folder icons in any resolution; open file with default application",
    "tags": [
      "dialogs",
      "file",
      "icon"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/tormund/os_files",
    "url": "https://github.com/tormund/os_files",
    "long_description": "Native file dialogs (x11, windows, osx) with extension filters and predefined path. System file icons in any resolution (x11 with theme support, windows, osx). Open file with system default application (x11, windows, osx).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "GUI"
    ]
  },
  {
    "name": "osinfo",
    "description": "Modules providing information about the OS.",
    "tags": [
      "os",
      "library",
      "info"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/osinfo",
    "url": "https://github.com/nim-lang/osinfo.git",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "osrm",
    "description": "Open Source Routing Machine for OpenStreetMap API Lib and App",
    "tags": [
      "openstreetmap",
      "geo",
      "gis",
      "opendata",
      "routing",
      "async",
      "multisync"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-osrm",
    "url": "https://github.com/juancarlospaco/nim-osrm",
    "long_description": "Finds the best fastest Route between 2 Coordinates (lat,lon) in supplied order using the Open Source Routing Machine for OpenStreetMap API online services.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Science",
      "Tools"
    ]
  },
  {
    "name": "osureplay",
    "description": "osu! replay parser",
    "tags": [
      "library",
      "osu!",
      "parser",
      "osugame",
      "replay"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Yardanico/nim-osureplay",
    "url": "https://github.com/Yardanico/nim-osureplay",
    "long_description": "This is a parser for osu! rhythm game replay files as described by https://osu.ppy.sh/wiki/Osr_(file_format).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "osutil",
    "description": "OS Utils for Nim, simple tiny but useful procs for OS. Turn Display OFF and set Process Name.",
    "tags": [
      "utils",
      "helpers",
      "minimalism",
      "process",
      "mobile",
      "battery"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-osutil",
    "url": "https://github.com/juancarlospaco/nim-osutil",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "otp",
    "description": "One Time Password library for Nim",
    "tags": [
      "otp",
      "hotp",
      "totp",
      "time",
      "password",
      "one",
      "google",
      "authenticator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/otp.nim",
    "url": "https://github.com/OpenSystemsLab/otp.nim",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "overpass",
    "description": "OpenStreetMap Overpass API Lib",
    "tags": [
      "openstreetmap",
      "overpass",
      "multisync",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-overpass",
    "url": "https://github.com/juancarlospaco/nim-overpass",
    "long_description": "OpenStreetMap Overpass API Lib, Async & Sync, with & without SSL, command line App.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Science",
      "Tools"
    ]
  },
  {
    "name": "p4ztag_to_json",
    "description": "Convert Helix Version Control / Perforce (p4) -ztag output to JSON",
    "tags": [
      "perforce",
      "p4",
      "ztag",
      "serialization-format",
      "json"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kaushalmodi/p4ztag_to_json",
    "url": "https://github.com/kaushalmodi/p4ztag_to_json",
    "long_description": "Little utility to convert the Perforce P4 “Ztag” format data to JSON.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "package_visible_types",
    "description": "A hacky helper lib for authoring Nim packages with package-level visiblity",
    "tags": [
      "library",
      "packages",
      "visibility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zah/nim-package-visible-types",
    "url": "https://github.com/zah/nim-package-visible-types",
    "long_description": "A hacky helper lib for authoring Nim packages with package-level visiblity",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language",
      "Development"
    ]
  },
  {
    "name": "packedjson",
    "description": "packedjson is an alternative Nim implementation for JSON. The JSON is essentially kept as a single string in order to save memory over a more traditional tree representation.",
    "tags": [
      "json"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Araq/packedjson",
    "url": "https://github.com/Araq/packedjson",
    "long_description": "packedjson is an alternative Nim implementation for JSON. The JSON is essentially kept as a single string in order to save memory over a more traditional tree representation.\nThe API is mostly compatible with the stdlib's `json.nim` module, some features have been cut though.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "pager",
    "description": "A simple library for paging, similar to less",
    "tags": [
      "pager",
      "paging",
      "less",
      "more"
    ],
    "license": "GPL-3.0",
    "method": "git",
    "web": "https://git.sr.ht/~reesmichael1/nim-pager",
    "url": "https://git.sr.ht/~reesmichael1/nim-pager",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Reporting",
      "Tools"
    ]
  },
  {
    "name": "pari",
    "description": "Pari/GP C library wrapper",
    "tags": [
      "number theory",
      "computer algebra system"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lompik/pari.nim",
    "url": "https://github.com/lompik/pari.nim",
    "long_description": "PARI/GP is a widely used computer algebra system designed for fast computations in number theory (factorizations, algebraic number theory, elliptic curves, modular forms, L functions...), but also contains a large number of other useful functions to compute with mathematical entities such as matrices, polynomials, power series, algebraic numbers etc., and a lot of transcendental functions.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "parseFixed",
    "description": "Parse fixed-width fields within lines of text (complementary to parsecsv)",
    "tags": [
      "parse",
      "fixed",
      "width",
      "parser",
      "text"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jlp765/parsefixed",
    "url": "https://github.com/jlp765/parsefixed",
    "long_description": "Nim module to parse fixed-width fields within lines of text (complementary to parsecsv)",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "parseini",
    "description": "A high-performance ini parse library for nim.",
    "tags": [
      "parseini",
      "nim"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lihf8515/parseini",
    "url": "https://github.com/lihf8515/parseini",
    "long_description": "A high-performance ini parse library for nim. The parseini module implements a high performance configuration file parser, evolved from parsecfg. The configuration file's syntax is similar to the Windows .ini format, but much more powerful, as it is not a line based parser. String literals, raw string literals and triple quoted string literals are supported as in the Nim programming language. The module supports annotation statements, does not delete comment statements and redundant blank characters, leaving the original style and you can specify annotation delimiters.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "parsetoml",
    "description": "Library for parsing TOML files.",
    "tags": [
      "library",
      "parse"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/NimParsers/parsetoml",
    "url": "https://github.com/NimParsers/parsetoml.git",
    "long_description": "Parsetoml is a Nim library to parse TOML files (https://github.com/toml-lang/toml). Currently it supports v0.5.0 of the TOML specification. It passes all of the validation tests in the validation suite, including various 0.5.0 examples.\nTOML aims to be a minimal configuration file format that's easy to read due to obvious semantics. TOML is designed to map unambiguously to a hash table. TOML should be easy to parse into data structures in a wide variety of languages.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "pas2nim",
    "description": "pas2nim is a tool to translate Pascal code to Nim.",
    "tags": [
      "app",
      "binary",
      "tool",
      "Pascal"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/pas2nim",
    "url": "https://github.com/nim-lang/pas2nim",
    "long_description": "pas2nim is a tool to translate Delphi/Pascal wrappers to Nim code.\nIt was used to translate the original Nim compiler that was written in Pascal. Only what maps easily to Nim is supported. Delphi's `class` or other \"fancy\" features are not supported.",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "pastebin",
    "description": "Pastebin API wrapper",
    "tags": [
      "library",
      "wrapper",
      "pastebin"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-pastebin",
    "url": "https://github.com/achesak/nim-pastebin",
    "long_description": "nim-pastebin is a Nim wrapper for the Pastebin API.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web",
      "Development"
    ]
  },
  {
    "name": "patty",
    "description": "Algebraic data types and pattern matching",
    "tags": [
      "pattern",
      "adt",
      "variant",
      "pattern matching",
      "algebraic data type"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/andreaferretti/patty",
    "url": "https://github.com/andreaferretti/patty",
    "long_description": "Patty is a library to perform pattern matching in Nim. Make sure to also have a look at Gara, which is a more complete solution. Unlike Patty, Gara misses a macro to generate variant objects, but it is otherwise much more comprehensive.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "*Dead*",
      "Language"
    ]
  },
  {
    "name": "pcap",
    "description": "Tiny pure Nim library to read PCAP files used by TcpDump/WinDump/Wireshark.",
    "tags": [
      "pcap",
      "fileformats"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/nim-pcap",
    "url": "https://github.com/PMunch/nim-pcap",
    "long_description": "Tiny pure Nim library to read PCAP files used by TcpDump/WinDump/Wireshark.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "pdcurses",
    "description": "Nim wrapper for PDCurses",
    "tags": [
      "pdcurses",
      "curses",
      "console",
      "gui"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lcrees/pdcurses",
    "url": "https://github.com/lcrees/pdcurses",
    "long_description": "Deprecated from Nim standard library. Caveat emptor.",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*",
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "perlin",
    "description": "Perlin noise and Simplex noise generation",
    "tags": [
      "perlin",
      "simplex",
      "noise"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Nycto/PerlinNim",
    "url": "https://github.com/Nycto/PerlinNim",
    "long_description": "A noise generation library for Nim, with support for both Perlin noise and Simplex noise.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Image"
    ]
  },
  {
    "name": "persistent_enums",
    "description": "Define enums which values preserve their binary representation upon inserting or reordering",
    "tags": [
      "enum",
      "binary",
      "protocol"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/persistent_enums",
    "url": "https://github.com/yglukhov/persistent_enums",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*",
      "Language"
    ]
  },
  {
    "name": "persvector",
    "description": "This is an implementation of Clojures persistent vectors in Nim.",
    "tags": [
      "datastructures",
      "immutable",
      "persistent"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/nim-persistent-vector",
    "url": "https://github.com/PMunch/nim-persistent-vector",
    "long_description": "This module implements Clojures persistent vectors with tail optimisation. For more information about those please see the blogpost series: http://hypirion.com/musings/understanding-persistent-vector-pt-1 which was used as a reference for this implementation.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Language"
    ]
  },
  {
    "name": "pfring",
    "description": "PF_RING wrapper for Nim",
    "tags": [
      "pf_ring",
      "packet",
      "sniff",
      "pcap",
      "pfring",
      "network",
      "capture",
      "socket"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/pfring.nim",
    "url": "https://github.com/ba0f3/pfring.nim",
    "long_description": "PF_RING is a high speed packet capture library that turns a commodity PC into an efficient and cheap network measurement box suitable for both packet and active traffic analysis and manipulation. Moreover, PF_RING opens totally new markets as it enables the creation of efficient application such as traffic balancers or packet filters in a matter of lines of codes.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "pg",
    "description": "Very simple PostgreSQL async api for nim.",
    "tags": [
      "postgresql",
      "db"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/pg",
    "url": "https://github.com/treeform/pg",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "physfs",
    "description": "A library to provide abstract access to various archives.",
    "tags": [
      "wrapper",
      "filesystem",
      "archives"
    ],
    "license": "WTFPL",
    "method": "git",
    "web": "https://github.com/fowlmouth/physfs",
    "url": "https://github.com/fowlmouth/physfs",
    "long_description": "PhysicsFS; a portable, flexible file i/o abstraction.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "picohttpparser",
    "description": "Bindings for picohttpparser.",
    "tags": [
      "web",
      "http"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/philip-wernersbach/nim-picohttpparser",
    "url": "https://github.com/philip-wernersbach/nim-picohttpparser",
    "long_description": "PicoHTTPParser is a tiny, primitive, fast HTTP request/response parser.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web",
      "Network"
    ]
  },
  {
    "name": "pinggraph",
    "description": "Simple terminal ping graph",
    "tags": [
      "ping",
      "terminal"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/pinggraph",
    "url": "https://github.com/SolitudeSF/pinggraph",
    "long_description": "pinggraph is a nim reimplementation of lagraph, command-line utility that draws a ping graph.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "pipe",
    "description": "Pipe operator for nim.",
    "tags": [
      "pipe",
      "macro",
      "operator",
      "functional"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/5paceToast/pipe",
    "url": "https://github.com/5paceToast/pipe",
    "long_description": "A pipe operator for nim, as seen in functional languages.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "pipelines",
    "description": "A tiny framework & language for crafting massively parallel data pipelines",
    "tags": [
      "python",
      "pipeline",
      "pipelines",
      "data",
      "parallel"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/calebwin/pipelines",
    "url": "https://github.com/calebwin/pipelines",
    "doc": "https://github.com/calebwin/pipelines",
    "long_description": "Pipelines is a language and runtime for crafting massively parallel pipelines. Unlike other languages for defining data flow, the Pipeline language requires implementation of components to be defined separately in the Python scripting language. This allows the details of implementations to be separated from the structure of the pipeline, while providing access to thousands of active libraries for machine learning, data analysis and processing.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Data science",
      "FFI"
    ]
  },
  {
    "name": "platformer",
    "description": "Writing a 2D Platform Game in Nim with SDL2",
    "tags": [
      "game",
      "sdl",
      "2d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/nim-platformer",
    "url": "https://github.com/def-/nim-platformer",
    "long_description": "In this article we’re going to write a simple 2D platform game. You can also consider this as a tutorial for game development with SDL2 in Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "playground",
    "description": "Web-based playground for testing Nim code.",
    "tags": [
      "webapp",
      "execution",
      "code",
      "sandbox"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/theduke/nim-playground",
    "url": "https://github.com/theduke/nim-playground",
    "long_description": "Interactive server/website that gives you an editor allowing you to easily play with the Nim language.\nYou can execute Nim code right in your browser, and see the output, or compiler errors. The history of your executed code is saved in browser localStorage.\nYou should run the playground yourself on your local computer. It only takes two commands to install and launch it.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Web"
    ]
  },
  {
    "name": "playlists",
    "description": "Nim library for parsing PLS, M3U, and XSPF playlist files",
    "tags": [
      "library",
      "playlists",
      "M3U",
      "PLS",
      "XSPF"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-playlists",
    "url": "https://github.com/achesak/nim-playlists",
    "long_description": "nim-playlists is a Nim library for working with audio playlists. It supports the following formats: M3U, PLS, XML Shareable Playlist Format (XSPF).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "pledge",
    "description": "OpenBSDs pledge(2) for Nim.",
    "tags": [
      "pledge",
      "openbsd"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/pledge.nim",
    "url": "https://github.com/euantorano/pledge.nim",
    "long_description": "A wrapper for the pledge(2) systemcall, used to restrict system operations.\nOn systems other than OpenBSD where pledge is not yet implemented, the wrapper has no effect.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "plists",
    "description": "Generate and parse Mac OS X .plist files in Nim.",
    "tags": [
      "plist",
      "property",
      "list"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/plists",
    "url": "https://github.com/yglukhov/plists",
    "long_description": "Generate and parse Mac OS X .plist files in Nim. The library uses Nim's JsonNode as a primary data structure.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "plotly",
    "description": "Nim interface to plotly",
    "tags": [
      "plot",
      "graphing",
      "chart",
      "data"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/brentp/nim-plotly",
    "url": "https://github.com/brentp/nim-plotly",
    "long_description": "This is a functioning plotting library. It supports, line (with fill below), scatter (with errors), bar , histogram, heatmap, candlestick and combinations of those plot types.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "JS",
      "Reporting"
    ]
  },
  {
    "name": "pluginmanager",
    "description": "Simple plugin implementation",
    "tags": [
      "plugin",
      "dylib",
      "manager"
    ],
    "license": "BSD 3-Clause",
    "method": "git",
    "web": "https://github.com/samdmarshall/plugin-manager",
    "url": "https://github.com/samdmarshall/plugin-manager",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "System"
    ]
  },
  {
    "name": "plz",
    "description": "PLZ Python PIP alternative",
    "tags": [
      "python",
      "pip",
      "nimpy"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-pypi",
    "url": "https://github.com/juancarlospaco/nim-pypi",
    "long_description": "PLZ Python PIP alternative.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Miscellaneous",
      "Development"
    ]
  },
  {
    "name": "png",
    "description": "Nim wrapper for the libpng library",
    "tags": [
      "png",
      "wrapper",
      "library",
      "libpng",
      "image"
    ],
    "license": "libpng",
    "method": "git",
    "web": "https://github.com/barcharcraz/nimlibpng",
    "url": "https://github.com/barcharcraz/nimlibpng",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "pnm",
    "description": "pnm is library for PNM (Portable AnyMap).",
    "tags": [
      "pnm",
      "image",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/pnm",
    "url": "https://github.com/jiro4989/pnm",
    "long_description": "pnm is parser/generator of PNM (Portable Anymap).",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "polyBool",
    "description": "Polygon Clipper Library (Martinez Algorithm)",
    "tags": [
      "polygon",
      "clipper",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/polyBool",
    "url": "https://github.com/jangko/polyBool",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "polynumeric",
    "description": "Polynomial operations",
    "tags": [
      "polynomial",
      "numeric"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lcrees/polynumeric",
    "url": "https://github.com/lcrees/polynumeric",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "polypbren",
    "description": "Renormalization of colloidal charges of polydipserse dispersions using the Poisson-Boltzmann equation",
    "tags": [
      "science",
      "equation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/guibar64/polypbren",
    "url": "https://github.com/guibar64/polypbren",
    "long_description": "Polypbren is a program that computes the renormalized parameters (renormalized charges and screening length) for dispersions of charged spherical particles with arbitrary size distributions. The surface charge of the colloids can be fixed or regulated by pH. The Poisson-Boltzmann cell model and renormalized jellium model are implemented.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Science"
    ]
  },
  {
    "name": "pop3",
    "description": "POP3 client library",
    "tags": [
      "network",
      "pop3",
      "email"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-pop3",
    "url": "https://github.com/FedericoCeratto/nim-pop3",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "portaudio",
    "description": "Binding to portaudio",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "audio",
      "sound",
      "media",
      "io"
    ],
    "license": "CC0",
    "method": "hg",
    "url": "https://bitbucket.org/BitPuffin/nim-portaudio",
    "long_description": "PortAudio is a free, cross-platform, open-source, audio I/O library.  It lets you write simple audio programs that will compile and run on many platforms including Windows, Macintosh OS X, and Unix (OSS/ALSA). It is intended to promote the exchange of audio software between developers on different platforms.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "porter",
    "description": "Simple extensible implementation of Porter stemmer algorithm",
    "tags": [
      "stemmer",
      "multilanguage",
      "snowball"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/iourinski/porter",
    "url": "https://github.com/iourinski/porter",
    "long_description": "This is a simple implementation of the Porter stemmer algorithm for nim language, using nim's regex implementation.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "primme",
    "description": "Nim interface for PRIMME: PReconditioned Iterative MultiMethod Eigensolver",
    "tags": [
      "library",
      "eigenvalues",
      "high-performance",
      "singular-value-decomposition"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jxy/primme",
    "url": "https://github.com/jxy/primme",
    "long_description": "This is a Nim interface for PRIMME.  \"PRIMME, pronounced as prime, computes a few eigenvalues and their corresponding eigenvectors of a real symmetric or complex Hermitian matrix.  It can also compute singular values and vectors of a square or rectangular matrix.  It can find largest, smallest, or interior singular/eigenvalues and can use preconditioning to accelerate convergence.  It is especially optimized for large, difficult problems, and can be a useful tool for both non-experts and experts.\"",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Maths"
    ]
  },
  {
    "name": "print",
    "description": "Print is a set of pretty print macros, useful for print-debugging.",
    "tags": [
      "pretty"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/print",
    "url": "https://github.com/treeform/print.git",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "JS",
      "Development"
    ]
  },
  {
    "name": "printdebug",
    "description": "Print Debug for Nim, tiny 3 lines Lib, C Target",
    "tags": [
      "debug",
      "print",
      "helper",
      "util"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-printdebug",
    "url": "https://github.com/juancarlospaco/nim-printdebug",
    "long_description": "It can print the variable name, value, source full file path and line number.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Development"
    ]
  },
  {
    "name": "procs",
    "description": "Unix process&system query&formatting library&multi-command CLI in Nim",
    "tags": [
      "library",
      "terminal",
      "cli",
      "binary",
      "linux",
      "unix",
      "bsd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/c-blake/procs",
    "url": "https://github.com/c-blake/procs",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Tools"
    ]
  },
  {
    "name": "progress",
    "description": "A simple progress bar for Nim.",
    "tags": [
      "progress",
      "bar",
      "terminal",
      "ui"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/progress.nim",
    "url": "https://github.com/euantorano/progress.nim",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "prometheus",
    "description": "Library for exposing metrics to Prometheus",
    "tags": [
      "metrics",
      "logging",
      "graphs"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/prometheus",
    "url": "https://github.com/dom96/prometheus",
    "long_description": "* Multiple metric types:\n- Counters\n- Gauges\n- Histograms\n* Nim-specific collectors:\nPrometheus is an open-source systems monitoring and alerting toolkit.\nPrometheus's main features are:\n* a multi-dimensional data model with time series data identified by metric name and key/value pairs\n* PromQL, a flexible query language to leverage this dimensionality\n* no reliance on distributed storage; single server nodes are autonomous\n* time series collection happens via a pull model over HTTP\n* pushing time series is supported via an intermediary gateway\n* targets are discovered via service discovery or static configuration\n* multiple modes of graphing and dashboarding support",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Cloud"
    ]
  },
  {
    "name": "prompt",
    "description": "Feature-rich readline replacement",
    "tags": [
      "command-line",
      "readline",
      "repl"
    ],
    "license": "BSD2",
    "method": "git",
    "web": "https://github.com/surf1nb1rd/nim-prompt",
    "url": "https://github.com/surf1nb1rd/nim-prompt",
    "long_description": "A library for building powerful interactive prompts inspired by python-prompt-toolkit, making it easier to build cross-platform command line tools using Nim.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "protobuf",
    "description": "Protobuf implementation in pure Nim that leverages the power of the macro system to not depend on any external tools",
    "tags": [
      "protobuf",
      "serialization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/protobuf-nim",
    "url": "https://github.com/PMunch/protobuf-nim",
    "long_description": "This is a pure Nim implementation of protobuf, meaning that it doesn't rely on the protoc compiler. The entire implementation is based on a macro that takes in either a string or a file containing the proto3 format.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "proton",
    "description": "Proton template engine for xml and xhtml files",
    "tags": [
      "xml",
      "xhtml",
      "template"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jasonrbriggs/proton-nim",
    "url": "https://github.com/jasonrbriggs/proton-nim",
    "long_description": "Proton is a simple, \"code-less\" engine for xml/xhtml templates. Code-less, because it uses 3 types of ID (attribute) in a template file, rather than snippets of code.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "proxyproto",
    "description": "PROXY Protocol enabler for aged programs",
    "tags": [
      "proxy",
      "protocol",
      "proxy-protocol",
      "haproxy",
      "tcp",
      "ipv6",
      "ipv4",
      "linux",
      "unix",
      "hook",
      "load-balancer",
      "socket",
      "udp",
      "ipv6-support",
      "preload"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/libproxy.nim",
    "url": "https://github.com/ba0f3/libproxy.nim",
    "long_description": "proxyproto is a lightweight library that helps aged programs deal with proxy-protocol. It supports both IPv4 and IPv6.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "psutil",
    "description": "psutil is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network). Since 2018 maintained by Juan Carlos because was abandoned.",
    "tags": [
      "psutil",
      "process",
      "network",
      "system",
      "disk",
      "cpu"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/johnscillieri/psutil-nim",
    "url": "https://github.com/juancarlospaco/psutil-nim",
    "long_description": "psutil (process and system utilities) is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network, sensors).",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "System"
    ]
  },
  {
    "name": "ptrace",
    "description": "ptrace wrapper for Nim",
    "tags": [
      "ptrace",
      "trace",
      "process",
      "syscal",
      "system",
      "call"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/ptrace.nim",
    "url": "https://github.com/ba0f3/ptrace.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "pudge",
    "description": "Pudge Db - it's modern key/value storage with memcached protocol support. Pudge Db implements a high-level cross-platform sockets interface to sophia db.",
    "tags": [
      "wrapper",
      "database",
      "sophia"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/recoilme/pudge",
    "url": "https://github.com/recoilme/pudge.git",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "pwd",
    "description": "Nim port of Python's pwd module for working with the UNIX password file",
    "tags": [
      "library",
      "unix",
      "pwd",
      "password"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-pwd",
    "url": "https://github.com/achesak/nim-pwd",
    "long_description": "nim-pwd is a Nim port of Python's \"pwd\" module for working with the UNIX password file.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "pwned",
    "description": "A client for the Pwned passwords API.",
    "tags": [
      "application",
      "passwords",
      "security",
      "binary"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/pwned",
    "url": "https://github.com/dom96/pwned",
    "long_description": "The best Pwned Passwords client. Pwned let's you check if your password has been compromised.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "pykot",
    "description": "Porting some Python / Kotlin features to Nim",
    "tags": [
      "library",
      "python",
      "kotlin"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jabbalaci/nimpykot",
    "url": "https://github.com/jabbalaci/nimpykot",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "pylib",
    "description": "Nim library with python-like functions and operators",
    "tags": [
      "python",
      "compatibility",
      "library",
      "pure"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Yardanico/nimpylib",
    "url": "https://github.com/Yardanico/nimpylib",
    "long_description": "Nimpylib is a collection of python-like operators and functions (syntax sugar). It can help you to translate your Python program to Nim.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "pymod",
    "description": "Auto-generate a Python module that wraps a Nim module.",
    "tags": [
      "wrapper",
      "python",
      "module",
      "numpy",
      "array",
      "matrix",
      "ndarray",
      "pyobject",
      "pyarrayobject",
      "iterator",
      "iterators",
      "docstring"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jboy/nim-pymod",
    "url": "https://github.com/jboy/nim-pymod",
    "long_description": "Auto-generate a Python module that wraps a Nim programming language module.\nThe Pymod software consists of Nim bindings & Python scripts to automate the generation of Python C-API extension module boilerplate for Nim \"procs\" (procedures). After the Pymod script has been run, there will be an auto-generated, auto-compiled Python module that exposes the Nim procs in Python.\nThere's even a type (`PyArrayObject`) that provides a Nim interface to Numpy arrays, so you can pass Numpy arrays into your Nim procs from Python and access them natively.\nThe auto-generated C-API boilerplate code handles the parsing & type-checking of the function arguments passed from Python, including correct handling of Python ref-counts if a type error occurs or an exception is raised. The boilerplate code also translates Nim exceptions (including back-traces) to Python exceptions. The boilerplate code even includes auto-generated Python docstrings that have been extracted from the Nim procs.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "python",
    "description": "Wrapper to interface with Python interpreter",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/python",
    "url": "https://github.com/nim-lang/python",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "python3",
    "description": "Wrapper to interface with the Python 3 interpreter",
    "tags": [
      "python",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/matkuki/python3",
    "url": "https://github.com/matkuki/python3",
    "long_description": "Nim wrapper for the Python 3 programming language.\nCan be used to link either statically or dynamically to the Python 3 interpreter.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "pythonfile",
    "description": "Wrapper of the file procedures to provide an interface as similar as possible to that of Python",
    "tags": [
      "library",
      "python",
      "files",
      "file"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-pythonfile",
    "url": "https://github.com/achesak/nim-pythonfile",
    "long_description": "nim-pythonfile is a Nim module to wrap the file functions and provide an interface as similar as possible to that of Python.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "pythonize",
    "description": "A higher-level wrapper for the Python Programing Language",
    "tags": [
      "python",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/marcoapintoo/nim-pythonize",
    "url": "https://github.com/marcoapintoo/nim-pythonize.git",
    "long_description": "Pythonize is a high-level wrapper to interface the Nim and Python programming languages. It is focused on making the interaction more easy using the pythonify/depythonify functions.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "pythonmath",
    "description": "Module to provide an interface as similar as possible to Python's math libary",
    "tags": [
      "library",
      "python",
      "math"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-pythonmath",
    "url": "https://github.com/achesak/nim-pythonmath",
    "long_description": "nim-pythonmath is a Nim module meant to provide an interface as similar as possible to Python's math libary.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "pythonpathlib",
    "description": "Module for working with paths that is as similar as possible to Python's pathlib",
    "tags": [
      "path",
      "directory",
      "python",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-pythonpathlib",
    "url": "https://github.com/achesak/nim-pythonpathlib.git",
    "long_description": "nim-pythonpathlib is a Nim module that provides an interface for working with paths that is as similar as possible to Python's pathlib module.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "q",
    "description": "Simple package for query HTML/XML elements using a CSS3 or jQuery-like selector syntax",
    "tags": [
      "css",
      "selector",
      "query",
      "match",
      "find",
      "html",
      "xml",
      "jquery"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/q.nim",
    "url": "https://github.com/OpenSystemsLab/q.nim",
    "long_description": "Simple package for query HTML/XML elements using a CSS3 or jQuery-like selector syntax for Nim.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "qrcode",
    "description": "module for creating and reading QR codes using http://goqr.me/",
    "tags": [
      "qr",
      "qrcode",
      "api"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-qrcode",
    "url": "https://github.com/achesak/nim-qrcode",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "qrcodegen",
    "description": "QR Code Generator",
    "tags": [
      "qr",
      "barcode"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bunkford/qrcodegen",
    "url": "https://github.com/bunkford/qrcodegen",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Reporting"
    ]
  },
  {
    "name": "qt5_qtsql",
    "description": "Binding for Qt 5's Qt SQL library that integrates with the features of the Nim language. Uses one API for multiple database engines.",
    "tags": [
      "library",
      "wrapper",
      "database",
      "qt",
      "qt5",
      "qtsql",
      "sqlite",
      "postgres",
      "mysql"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/philip-wernersbach/nim-qt5_qtsql",
    "url": "https://github.com/philip-wernersbach/nim-qt5_qtsql.git",
    "long_description": "Nim binding for Qt 5's Qt SQL library that integrates with the features of the Nim language.\n* Production-ready\n* All of the features that you would expect from Qt SQL\n- Such as a single API for multiple database engines\n- And support for prepared statements\n* Utilizes features of the Nim language for easier usage\n* Avoids complexity by utilizing C++'s type system\n- For instance, instead of providing full bindings for QVariant, this provides a minimal binding and lets C++'s type system take care of converting to and from QVariant objects automatically.\n* Abstracts certain Qt behaviors that are not Nim-like, and presents a Nim-like API.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "quadtree",
    "description": "A Quadtree implementation",
    "tags": [
      "quadtree",
      "algorithm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Nycto/QuadtreeNim",
    "url": "https://github.com/Nycto/QuadtreeNim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Games"
    ]
  },
  {
    "name": "rain",
    "description": "Rain simulation in your terminal",
    "tags": [
      "rain",
      "simulation",
      "terminal",
      "fun"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OHermesJunior/rain.nim",
    "url": "https://github.com/OHermesJunior/rain.nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "random",
    "description": "Pseudo-random number generation library inspired by Python",
    "tags": [
      "library",
      "algorithms",
      "random"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/oprypin/nim-random",
    "url": "https://github.com/oprypin/nim-random",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "random_font_color",
    "description": "Random curated Fonts and pastel Colors for your UI/UX design, design for non-designers.",
    "tags": [
      "fonts",
      "colors",
      "pastel",
      "design",
      "random"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-random-font-color",
    "url": "https://github.com/juancarlospaco/nim-random-font-color",
    "long_description": "Random curated Fonts and pastel Colors for your UI/UX design, design for non-designers, poors man design. Nim package. Works OK with NodeJS.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "ranges",
    "description": "Exploration of various implementations of memory range types",
    "tags": [
      "library",
      "ranges"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-ranges",
    "url": "https://github.com/status-im/nim-ranges",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "rapid",
    "description": "A game engine for rapid development and easy prototyping",
    "tags": [
      "game",
      "engine",
      "2d",
      "graphics",
      "audio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/liquid600pgm/rapid",
    "url": "https://github.com/liquid600pgm/rapid",
    "long_description": "A game engine written in Nim, optimized for rapid game development and easy prototyping. Made for convenience while coding, not striking performance.\n* Be easy to understand, even for beginners,\n* Have an easy-to-use, convenient, yet flexible API,\n* Support as many platforms as possible,\n* Compile all C libraries statically to avoid dependency hell/linker errors,\n* Make game development a fun task for everyone.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "rbac",
    "description": "Simple Role-based Access Control Library",
    "tags": [
      "rbac",
      "acl",
      "role-based-access-control",
      "role-based",
      "access-control"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/rbac.nim",
    "url": "https://github.com/ba0f3/rbac.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System",
      "Miscellaneous"
    ]
  },
  {
    "name": "rbtree",
    "description": "Red/Black Trees",
    "tags": [
      "tree",
      "binary search tree",
      "rbtree",
      "red black tree"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Nycto/RBTreeNim",
    "url": "https://github.com/Nycto/RBTreeNim",
    "long_description": "Red/Black trees are self balancing binary search trees that maintain structure by tracking an extra bit of state about each node. This is then used to examine relationships between parents and children, allowing appropriate rotations to be performed.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "react",
    "description": "React.js bindings for Nim",
    "tags": [
      "js",
      "react",
      "frontend",
      "ui",
      "single page application"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/andreaferretti/react.nim",
    "url": "https://github.com/andreaferretti/react.nim",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "reactor",
    "description": "Asynchronous networking engine for Nim",
    "tags": [
      "async",
      "libuv",
      "http",
      "tcp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://networkos.net/nim/reactor.nim",
    "url": "https://github.com/zielmicha/reactor.nim",
    "long_description": "reactor.nim is an asynchronous networking engine for Nim. It's based on libuv and provides future-based API. reactor.nim doesn't use asynchronous mechanisms from `asyncdispatch` stdlib module and instead provides its own. They are arguably richer and more performant. The API is inspired by Dart and Midori OS",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms",
      "System"
    ]
  },
  {
    "name": "reactorfuse",
    "description": "Filesystem in userspace (FUSE) for Nim (for reactor.nim library)",
    "tags": [
      "filesystem",
      "fuse"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zielmicha/reactorfuse",
    "url": "https://github.com/zielmicha/reactorfuse",
    "long_description": "Filesystem in userspace (FUSE) for Nim. This library uses asynchronous framework reactor.nim for its IO.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "recaptcha",
    "description": "reCAPTCHA support for Nim, supporting rendering a capctcha and verifying a user's response.",
    "tags": [
      "recaptcha",
      "captcha"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/recaptcha.nim",
    "url": "https://github.com/euantorano/recaptcha.nim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "rect",
    "description": "rect is a command to crop/paste rectangle text.",
    "tags": [
      "cli",
      "tool",
      "text",
      "rectangle"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/rect",
    "url": "https://github.com/jiro4989/rect",
    "long_description": "rect is a command to crop/paste rectangle text.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "rect_packer",
    "description": "Pack rects into bigger rect",
    "tags": [
      "library",
      "geometry",
      "packing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/rect_packer",
    "url": "https://github.com/yglukhov/rect_packer",
    "long_description": "Simple algorithm for packing rects into a bigger rect.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "redis",
    "description": "official redis client for Nim",
    "tags": [
      "redis",
      "client",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/redis",
    "url": "https://github.com/nim-lang/redis",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "redisclient",
    "description": "Redis client for Nim",
    "tags": [
      "redis",
      "client",
      "protocol",
      "resp"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/xmonader/nim-redisclient",
    "url": "https://github.com/xmonader/nim-redisclient",
    "long_description": "Provides sync and async clients to communicate with redis servers using nim-redisparser",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "redisparser",
    "description": "RESP(REdis Serialization Protocol) Serialization for Nim",
    "tags": [
      "redis",
      "resp",
      "parser",
      "protocol"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/xmonader/nim-redisparser",
    "url": "https://github.com/xmonader/nim-redisparser",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "redissessions",
    "description": "Redis-backed sessions for jester",
    "tags": [
      "jester",
      "sessions",
      "redis"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ithkuil/redissessions/",
    "url": "https://github.com/ithkuil/redissessions/",
    "long_description": "This module provides Redis-backed session support for Jester applications.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web",
      "Database"
    ]
  },
  {
    "name": "redneck_translator",
    "description": "Redneck Translator for Y'all",
    "tags": [
      "redneck",
      "string",
      "slang"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/redneck-translator",
    "url": "https://github.com/juancarlospaco/redneck-translator",
    "long_description": "Redneck translator for Y'all, no Internet (Offline), Windows/Linux, App/Lib.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "redux",
    "description": "Predictable state container.",
    "tags": [
      "redux"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/redux.nim",
    "url": "https://github.com/pragmagic/redux.nim",
    "long_description": "Redux.nim is a predictable state container for Nim apps. Nim version of Redux.js.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Cloud",
      "System"
    ]
  },
  {
    "name": "redux_nim",
    "description": "Redux Implementation in nim",
    "tags": [
      "redux"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/M4RC3L05/redux-nim",
    "url": "https://github.com/M4RC3L05/redux-nim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Cloud",
      "System"
    ]
  },
  {
    "name": "reframe",
    "description": "Tools for working with re-frame ClojureScript projects",
    "tags": [
      "clojurescript",
      "re-frame"
    ],
    "license": "EPL-2.0",
    "method": "git",
    "web": "https://github.com/rosado/reframe.nim",
    "url": "https://github.com/rosado/reframe.nim",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "regex",
    "description": "Linear time regex matching",
    "tags": [
      "regex"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-regex",
    "url": "https://github.com/nitely/nim-regex",
    "long_description": "A library for parsing, compiling, and executing regular expressions.\n* The match time is linear in the length of the input string\n* Regular expressions are (optionally) compiled at compile-time\n* Captures all group repetitions (not just the last one)\n* Unicode level-1 support\n* Descriptive error messages\n* Supports matching at compile-time (Nim +0.20)",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "remarker_light",
    "description": "remarker_light is a command line tool for building a remark-based slideshow page very easily.",
    "tags": [
      "remark",
      "slideshow",
      "markdown"
    ],
    "license": "GPL-2.0",
    "method": "git",
    "web": "https://github.com/muxueqz/remarker_light",
    "url": "https://github.com/muxueqz/remarker_light",
    "long_description": "remark is a simple, in-browser, markdown-driven slideshow tool.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web",
      "Reporting",
      "Tools"
    ]
  },
  {
    "name": "replim",
    "description": "most quick REPL of nim",
    "tags": [
      "repl",
      "binary",
      "program"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gmshiba/replim",
    "url": "https://github.com/gmshiba/replim",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "result",
    "description": "Friendly, exception-free value-or-error returns, similar to Option[T]",
    "tags": [
      "library",
      "result",
      "errors",
      "functional"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/arnetheduck/nim-result",
    "url": "https://github.com/arnetheduck/nim-result",
    "long_description": "Result type that can hold either a value or an error, but not both",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "rethinkdb",
    "description": "RethinkDB driver for Nim",
    "tags": [
      "rethinkdb",
      "driver",
      "client",
      "json"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/rethinkdb.nim",
    "url": "https://github.com/OpenSystemsLab/rethinkdb.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "rexpaint",
    "description": "REXPaint .xp parser",
    "tags": [
      "rexpaint",
      "roguelike",
      "xp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/irskep/rexpaint_nim",
    "url": "https://github.com/irskep/rexpaint_nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "rfc3339",
    "description": "RFC3339 (dates and times) implementation for Nim.",
    "tags": [
      "rfc3339",
      "datetime"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/Skrylar/rfc3339",
    "url": "https://github.com/Skrylar/rfc3339",
    "long_description": "Lets you store dates and times. Also parse them from strings. Used by a lot of web RFCs.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "ringDeque",
    "description": "deque implementatoin using DoublyLinkedRing",
    "tags": [
      "deque",
      "DoublyLinkedRing",
      "utility",
      "python"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/technicallyagd/ringDeque",
    "url": "https://github.com/technicallyagd/ringDeque",
    "long_description": "This package is trying to mimic some functionalities of Python's `deque` from collections. Since there's already a deques implemented with `seq`, I had to call this RingDeque.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "ris",
    "description": "Module for working with RIS citation files",
    "tags": [
      "RIS",
      "citation",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-ris",
    "url": "https://github.com/achesak/nim-ris",
    "long_description": "nim-ris is a Nim module for parsing Research Information Systems (RIS) citation files.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Science",
      "Tools"
    ]
  },
  {
    "name": "rlp",
    "description": "Deprecated RLP serialization library for Nim (now part of the 'eth' module)",
    "tags": [
      "deprecated"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-rlp",
    "url": "https://github.com/status-im/nim-rlp",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "robotparser",
    "description": "Determine if a useragent can access a URL using robots.txt",
    "tags": [
      "library",
      "useragent",
      "robots",
      "robot.txt"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-robotparser",
    "url": "https://github.com/achesak/nim-robotparser",
    "long_description": "nim-robotparser is a Nim module for using robot.txt files to determine whether or not a particular user agent can fetch a URL on a website. It is a port of Python's robotparser module.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "rocksdb",
    "description": "A wrapper for Facebook's RocksDB, an embeddable, persistent key-value store for fast storage",
    "tags": [
      "library",
      "wrapper",
      "database"
    ],
    "license": "Apache 2.0 or GPLv2",
    "method": "git",
    "web": "https://github.com/status-im/nim-rocksdb",
    "url": "https://github.com/status-im/nim-rocksdb",
    "long_description": "A Nim wrapper for Facebook's RocksDB, a persistent key-value store for Flash and RAM Storage.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "rodcli",
    "description": "making Nim development easier in the command-line",
    "tags": [
      "cli",
      "compile",
      "run",
      "command-line",
      "init",
      "project",
      "skeleton"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jabbalaci/NimCliHelper",
    "url": "https://github.com/jabbalaci/NimCliHelper",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "romans",
    "description": "Conversion between integers and Roman numerals",
    "tags": [
      "roman",
      "numerals"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lcrees/romans",
    "url": "https://github.com/lcrees/romans",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Miscellaneous"
    ]
  },
  {
    "name": "rosencrantz",
    "description": "A web DSL for Nim",
    "tags": [
      "web",
      "server",
      "DSL",
      "combinators"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/andreaferretti/rosencrantz",
    "url": "https://github.com/andreaferretti/rosencrantz",
    "long_description": "Rosencrantz is a DSL to write web servers, inspired by Spray and its successor Akka HTTP.\nIt sits on top of `asynchttpserver` and provides a composable way to write HTTP handlers.",
    "code_quality": 2,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "rss",
    "description": "RSS library",
    "tags": [
      "library",
      "rss",
      "xml",
      "syndication"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-rss",
    "url": "https://github.com/achesak/nim-rss",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "rsvg",
    "description": "Wrapper for librsvg, a Scalable Vector Graphics (SVG) rendering library",
    "tags": [
      "wrapper",
      "library",
      "graphics"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/def-/rsvg",
    "url": "https://github.com/def-/rsvg",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "sam",
    "description": "Fast and just works JSON-Binding for Nim",
    "tags": [
      "json",
      "binding",
      "map",
      "dump",
      "load"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/sam.nim",
    "url": "https://github.com/OpenSystemsLab/sam.nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Web"
    ]
  },
  {
    "name": "samson",
    "description": "Implementation of JSON5.",
    "tags": [
      "json",
      "json5"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/GULPF/samson",
    "url": "https://github.com/GULPF/samson",
    "long_description": "Samson is a library for serializing and deserializing JSON5, a superset of JSON.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sass",
    "description": "A wrapper for the libsass library.",
    "tags": [
      "css",
      "compiler",
      "wrapper",
      "library",
      "scss",
      "web"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/sass",
    "url": "https://github.com/dom96/sass",
    "long_description": "CSS on its own can be fun, but stylesheets are getting larger, more complex, and harder to maintain. This is where a preprocessor can help. Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again.\nOnce you start tinkering with Sass, it will take your preprocessed Sass file and save it as a normal CSS file that you can use in your website.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "scgi",
    "description": "Helper procs for SCGI applications",
    "tags": [
      "graveyard",
      "scgi",
      "cgi"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/scgi",
    "url": "https://github.com/nim-lang/graveyard?subdir=scgi",
    "long_description": "This repo contains non-deprecated modules that have been removed from the Nim stdlib. These modules have been removed because they have been either deemed broken or not popular enough to warrant an inclusion in the stdlib.\nStdlib modules which have been deprecated do not belong here as they should no longer be used in new code. You may note that some packages in this repo depend on deprecated modules, for example scgi, you may wish to not write new code using these packages.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "*Dead*",
      "Miscellaneous"
    ]
  },
  {
    "name": "science",
    "description": "A library for scientific computations in pure Nim",
    "tags": [
      "science",
      "algebra",
      "statistics",
      "math"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/ruivieira/nim-science",
    "url": "https://github.com/ruivieira/nim-science",
    "long_description": "A pure Nim library for scientific computing\nstatistics\n* distributions\n- Normal\n- Poisson\n- Exponential\n- Gamma\nlinear algebra\n* Matrices\n* Vectors\n* Metrics\n- Squared distance",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Science",
      "Maths"
    ]
  },
  {
    "name": "scnim",
    "description": "Develop SuperCollider UGens in Nim",
    "tags": [
      "music",
      "synthesizer",
      "realtime",
      "supercollider",
      "ugen",
      "plugin",
      "binding",
      "audio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/capocasa/scnim",
    "url": "https://github.com/capocasa/scnim",
    "long_description": "Writing SuperCollider UGens using Nim.\nSuperCollider is an audio server, programming language, and IDE for sound synthesis and algorithmic composition. UGens represent calculations with signals. They are the basic building blocks of synth definitions on the server, and are used to generate or process both audio and control signals. The many subclasses of UGen are the client-side representations of unit generators, and are used to specify their parameters when constructing synth definitions",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Audio"
    ]
  },
  {
    "name": "scram",
    "description": "Salted Challenge Response Authentication Mechanism (SCRAM) ",
    "tags": [
      "scram",
      "sasl",
      "authentication",
      "salted",
      "challenge",
      "response"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rgv151/scram",
    "url": "https://github.com/rgv151/scram",
    "long_description": "Salted Challenge Response Authentication Mechanism (SCRAM-SHA-1 SCRAM-SHA-256 SCRAM-SHA-512) https://tools.ietf.org/html/rfc5802",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "scrypt.nim",
    "description": "Binding and utilities for scrypt",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "crypto",
      "cryptography",
      "hash",
      "password",
      "security"
    ],
    "license": "CC0",
    "method": "hg",
    "url": "https://bitbucket.org/BitPuffin/scrypt.nim",
    "long_description": "Where do you go when you want to use nice encryption or properly hash passwords with salts and all the jazz?",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "sctp",
    "description": "Userspace SCTP bindings",
    "tags": [
      "sctp",
      "networking",
      "userspace"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/metacontainer/sctp.nim",
    "url": "https://github.com/metacontainer/sctp.nim",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "sdl1",
    "description": "SDL 1.2 wrapper for Nim.",
    "tags": [
      "graphics",
      "library",
      "multi-media",
      "input",
      "sound",
      "joystick"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/nim-lang/sdl1",
    "url": "https://github.com/nim-lang/sdl1",
    "long_description": "Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio",
      "Hardware"
    ]
  },
  {
    "name": "sdl2",
    "description": "Wrapper for SDL 2.x",
    "tags": [
      "wrapper",
      "media",
      "audio",
      "video"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/sdl2",
    "url": "https://github.com/nim-lang/sdl2",
    "long_description": "Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio",
      "Hardware"
    ]
  },
  {
    "name": "sdl2_nim",
    "description": "Wrapper of the SDL 2 library for the Nim language.",
    "tags": [
      "library",
      "wrapper",
      "sdl2",
      "game",
      "video",
      "image",
      "audio",
      "network",
      "ttf"
    ],
    "license": "zlib",
    "method": "git",
    "web": "https://github.com/Vladar4/sdl2_nim",
    "url": "https://github.com/Vladar4/sdl2_nim",
    "long_description": "Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Video",
      "Image",
      "Audio",
      "Hardware"
    ]
  },
  {
    "name": "sdnotify",
    "description": "Systemd service notification helper",
    "tags": [
      "os",
      "linux",
      "systemd",
      "sdnotify"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-sdnotify",
    "url": "https://github.com/FedericoCeratto/nim-sdnotify",
    "long_description": "Client for the systemd \"sd_notify\" protocol. Sends message to systemd to notify service startup, ping the watchdog and other events.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "seccomp",
    "description": "Linux Seccomp sandbox library",
    "tags": [
      "linux",
      "security",
      "sandbox",
      "seccomp"
    ],
    "license": "LGPLv2.1",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-seccomp",
    "url": "https://github.com/FedericoCeratto/nim-seccomp",
    "long_description": "Nim adapter for the Seccomp sandbox facility\n* Provides a high-level adaptor in `seccomp.nim`\n* Low-level wrapper in `seccomp_lowlevel.nim`",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Cloud"
    ]
  },
  {
    "name": "secp256k1",
    "description": "A wrapper for the libsecp256k1 C library",
    "tags": [
      "library",
      "cryptography",
      "secp256k1"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-secp256k1",
    "url": "https://github.com/status-im/nim-secp256k1",
    "long_description": "This library is a wrapper for Bitcoin's secp256k1 library.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Finance"
    ]
  },
  {
    "name": "sections",
    "description": "`Section` macro with BDD aliases for testing",
    "tags": [
      "BDD",
      "test"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/c0ffeeartc/nim-sections",
    "url": "https://github.com/c0ffeeartc/nim-sections",
    "long_description": "Provides Section macro and its Given, When, Then aliases. Nested Section blocks are converted into separate local branches of execution. Inspired by C++ Catch Test Framework sections",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "semver",
    "description": "Semantic versioning parser for Nim. Allows the parsing of version strings into objects and the comparing of version objects.",
    "tags": [
      "semver",
      "version",
      "parser"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/semver.nim",
    "url": "https://github.com/euantorano/semver.nim",
    "long_description": "Allows the parsing of version strings into objects and the comparing of version objects.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "seqmath",
    "description": "Nim math library for sequences and nested sequences (extends math library)",
    "tags": [
      "math",
      "seq",
      "sequence",
      "array",
      "nested",
      "algebra",
      "statistics",
      "lifted",
      "financial"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jlp765/seqmath",
    "url": "https://github.com/jlp765/seqmath",
    "long_description": "Nim sequence math library for sequences and nested sequences\nThis is aimed at doing simple sequence and nested sequence maths.\nIt is loosely based on the functionality of SciPy.org’s NumPy for the Python language.\nIt is NOT a wiz-bang linear algebra, vector, matrix, statistical, financial, … libray, but hopefully it will save you from re-inventing the wheel, if you are only after the basics.\nIt also lifts all (let me know if not) of the single parameter scalar procs from the Nim math library to work with sequences and nested sequences. Currently it cannot lift procs like arctan2 that take two parameters.\nUse the `liftScalarProc()` template to lift your own scalar procs to work with sequences and nested sequences.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Algorithms"
    ]
  },
  {
    "name": "sequester",
    "description": "Library for converting sequences to strings. Also has PHP-inspired explode and implode procs.",
    "tags": [
      "library",
      "seq",
      "sequence",
      "strings",
      "iterators",
      "php"
    ],
    "license": "ISC",
    "method": "git",
    "web": "https://github.com/fallingduck/sequester",
    "url": "https://github.com/fallingduck/sequester",
    "long_description": "Sequester is a lightweight library for the Nim language that contains procedures to convert between sequences and strings. Additionally, it includes PHP-inspired `explode` and `implode` procedures.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "sequoia",
    "description": "Sequoia PGP wrapper for Nim",
    "tags": [
      "sequoia",
      "pgp",
      "openpgp",
      "wrapper"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/ba0f3/sequoia.nim",
    "url": "https://github.com/ba0f3/sequoia.nim",
    "long_description": "A free implementation of OpenPGP",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "sequtils2",
    "description": "Additional functions for sequences that are not present in sequtils",
    "tags": [
      "library",
      "sequence",
      "string",
      "openArray",
      "functional"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://htmlpreview.github.io/?https://github.com/Michedev/sequtils2/blob/master/sequtils2.html",
    "url": "https://github.com/Michedev/sequtils2",
    "long_description": "nim package that provide additional functions for sequences",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "serial",
    "description": "A library to operate serial ports using pure Nim.",
    "tags": [
      "serial",
      "rs232",
      "io",
      "serialport"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/serial.nim",
    "url": "https://github.com/euantorano/serial.nim",
    "long_description": "Serialport library for Nim that allows the reading from and writing to serial ports connected to the system.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "System",
      "Hardware"
    ]
  },
  {
    "name": "serialization",
    "description": "A modern and extensible serialization framework for Nim",
    "tags": [
      "library",
      "serialization"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-serialization",
    "url": "https://github.com/status-im/nim-serialization",
    "long_description": "The serialization package aims to provide a common generic and efficient interface for marshaling Nim values to and from various serialized formats. Individual formats are implemented in separated packages such as json_serialization while this package provides the common interfaces shared between all of them and the means to customize your Nim types for the purposes of serialization.\nThe internal mechanisms of the library allow for implementing the required marshaling logic in highly efficient way that goes from bytes to Nim values and vice versa without allocating any intermediate structures.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "serializetools",
    "description": "Support for serialization of objects",
    "tags": [
      "serialization",
      "xml"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JeffersonLab/serializetools",
    "url": "https://github.com/JeffersonLab/serializetools",
    "long_description": "Nim support for serialization of objects. Supported formats are XML and binary.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "serialport",
    "description": "Bindings for libserialport, the cross-platform serial communication library.",
    "tags": [
      "binding",
      "libserialport",
      "serial",
      "communication"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/serialport",
    "url": "https://github.com/nimious/serialport.git",
    "long_description": "This package contains bindings to libserialport for the Nim programming language. libserialport is a minimal, cross-platform library for communication with serial ports.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System",
      "Hardware"
    ]
  },
  {
    "name": "seriesdetiempoar",
    "description": "Series de Tiempo de Argentina Government MultiSync API Client for Nim",
    "tags": [
      "async",
      "multisync",
      "gov",
      "opendata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-seriesdetiempoar",
    "url": "https://github.com/juancarlospaco/nim-seriesdetiempoar",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network"
    ]
  },
  {
    "name": "sermon",
    "description": "Monitor the state and memory of processes and URL response.",
    "tags": [
      "monitor",
      "storage",
      "memory",
      "process"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_sermon",
    "url": "https://github.com/ThomasTJdev/nim_sermon",
    "long_description": "This program purpose is to monitor your system health using standard Linux tools. Therefore Linux is required.\nThe idea of the program is to run it on your server and monitor the health. Which is also the reason for the name sermon.\nThe program can run on your local machine or on your server. The best way to run the program is by adding it as a system service.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "System"
    ]
  },
  {
    "name": "sfml",
    "description": "High level OpenGL-based Game Library",
    "tags": [
      "game",
      "library",
      "opengl"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nimrod-sfml",
    "url": "https://github.com/fowlmouth/nimrod-sfml/",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "sha1",
    "description": "SHA-1 produces a 160-bit (20-byte) hash value from arbitrary input",
    "tags": [
      "port",
      "hash",
      "sha1"
    ],
    "license": "BSD",
    "method": "git",
    "url": "https://github.com/onionhammer/sha1",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sha1ext",
    "description": "std / sha1 extension",
    "tags": [
      "sha1",
      "extension"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/CORDEA/sha1ext",
    "url": "https://github.com/CORDEA/sha1ext",
    "long_description": "Extension of std / sha1 mainly for developers using python, ruby etc.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sha3",
    "description": "sha3 - cryptographic hash function",
    "tags": [
      "crypto",
      "cryptography",
      "hash",
      "security"
    ],
    "license": "CC0",
    "method": "git",
    "web": "https://github.com/narimiran/sha3",
    "url": "https://github.com/narimiran/sha3",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "shaname",
    "description": "Rename files to their sha1sums",
    "tags": [
      "sha1",
      "command-line",
      "utilities"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/Torro/nimble-packages/tree/master/shaname",
    "url": "https://github.com/Torro/nimble-packages?subdir=shaname",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "shared",
    "description": "Nim library for shared types",
    "tags": [
      "shared",
      "seq",
      "string",
      "threads"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/shared",
    "url": "https://github.com/genotrance/shared",
    "long_description": "shared is a Nim library for shared types\nNim has a great string and seq implementation but sharing them across thread boundaries is problematic due to the thread local GC. This package attempts to provide basic shared types that can be used across threads.\nThe API attempts to be the same but not as extensive as the standard API. E.g. $ and & work as expected, but not every capability is being duplicated. Further, the implementation aims for safety and performance may not be the priority until later on. Every assignment results in realloc and copy to keep things simple.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "sharedmempool",
    "description": "threadsafe memory pool ",
    "tags": [
      "pool",
      "memory",
      "thread"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mikra01/sharedmempool",
    "url": "https://github.com/mikra01/sharedmempool",
    "long_description": "sharedMemPool is an alloc/dealloc module with an initial system alloc/dealloc call. The given chunk of sharedmem is split into parts of equal sizes according to the parameters given. suitable for zero-copy protocol stacks, custom buffering and memory layout.\nThis implementation is without exceptions; it is threadsafe and no worker thread is spawned. It runs with or without GC. No memory allocation calls are performed within the implementation.\nIt could also be used to synchronise access of memory mapped I/O.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "shell",
    "description": "A Nim mini DSL to execute shell commands",
    "tags": [
      "library",
      "macro",
      "dsl",
      "shell"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Vindaar/shell",
    "url": "https://github.com/Vindaar/shell",
    "long_description": "A mini Nim DSL to execute shell commands more conveniently.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "shimsham",
    "description": "Hashing/Digest collection in pure Nim",
    "tags": [
      "crypto",
      "hash",
      "hashing",
      "digest"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/apense/shimsham",
    "url": "https://github.com/apense/shimsham",
    "long_description": "ShimSham is a Nim module to encompass several different digest/hashing algorithms. So far included are\n* JH\n* SHA-2\n* SHA-3\n* SipHash\n* Tiger\n* Whirlpool",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "shiori",
    "description": "SHIORI Protocol Parser/Builder",
    "tags": [
      "ukagaka",
      "shiori",
      "protocol"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Narazaka/shiori-nim",
    "url": "https://github.com/Narazaka/shiori-nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Games",
      "Network"
    ]
  },
  {
    "name": "shiori_charset_convert",
    "description": "The SHIORI Message charset convert utility",
    "tags": [
      "shiori",
      "ukagaka"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Narazaka/shiori_charset_convert-nim",
    "url": "https://github.com/Narazaka/shiori_charset_convert-nim",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Games"
    ]
  },
  {
    "name": "shioridll",
    "description": "The SHIORI DLL interface",
    "tags": [
      "shiori",
      "ukagaka"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Narazaka/shioridll-nim",
    "url": "https://github.com/Narazaka/shioridll-nim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Games"
    ]
  },
  {
    "name": "shlex",
    "description": "Library for splitting a string into shell words",
    "tags": [
      "shlex",
      "shell",
      "parse",
      "split"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/SolitudeSF/shlex",
    "url": "https://github.com/SolitudeSF/shlex",
    "long_description": "Split a string into words according to POSIX shell syntax\nLibrary provides a function, that return a sequence of words and a boolean, that shows if the input contained errors, and an iterator that just returns words.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "shoco",
    "description": "A fast compressor for short strings",
    "tags": [
      "compression",
      "shoco"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/onionhammer/shoconim",
    "url": "https://github.com/onionhammer/shoconim.git",
    "long_description": "shoco is a C library to compress and decompress short strings. It is very fast and easy to use. The default compression model is optimized for english words, but you can generate your own compression model based on your specific input data.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "shorturl",
    "description": "Nim module for generating URL identifiers for Tiny URL and bit.ly-like URLs",
    "tags": [
      "library",
      "url",
      "uid"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-shorturl",
    "url": "https://github.com/achesak/nim-shorturl",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Web",
      "Algorithms"
    ]
  },
  {
    "name": "signals",
    "description": "Signals/slots library.",
    "tags": [
      "event-based",
      "observer pattern",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/signals.nim",
    "url": "https://github.com/fowlmouth/signals.nim",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "simdX86",
    "description": "Wrappers for X86 SIMD intrinsics",
    "tags": [
      "simd"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimlibs/simdX86",
    "url": "https://github.com/nimlibs/simdX86",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware"
    ]
  },
  {
    "name": "simpleAST",
    "description": "Simple AST in NIM",
    "tags": [
      "ast"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/lguzzon-NIM/simpleAST",
    "url": "https://github.com/lguzzon-NIM/simpleAST",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "simple_graph",
    "description": "Simple Graph Library",
    "tags": [
      "datastructures",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/erhlee-bird/simple_graph",
    "url": "https://github.com/erhlee-bird/simple_graph",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "simple_vector",
    "description": "Simple vector library for nim-lang.",
    "tags": [
      "vector",
      "simple_vector"
    ],
    "license": "GNU Lesser General Public License v2.1",
    "method": "git",
    "web": "https://github.com/Ephiiz/simple_vector",
    "url": "https://github.com/Ephiiz/simple_vector",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Maths"
    ]
  },
  {
    "name": "simpledecimal",
    "description": "A simple decimal library",
    "tags": [
      "decimal",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pigmej/nim-simple-decimal",
    "url": "https://github.com/pigmej/nim-simple-decimal",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "simpleot",
    "description": "Simple OT wrapper",
    "tags": [
      "ot",
      "mpc"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/markspanbroek/simpleot.nim",
    "url": "https://github.com/markspanbroek/simpleot.nim",
    "long_description": "The Simplest Oblivious Transfer Protocol by Chou and Orlandi.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "simplepng",
    "description": "high level simple way to write PNGs",
    "tags": [
      "png",
      "image"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jrenner/nim-simplepng",
    "url": "https://github.com/jrenner/nim-simplepng",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image"
    ]
  },
  {
    "name": "siphash",
    "description": "SipHash, a pseudorandom function optimized for short messages.",
    "tags": [
      "hash",
      "siphash"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/ehmry/nim-siphash",
    "url": "https://github.com/ehmry/nim-siphash",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sitmo",
    "description": "Sitmo parallel random number generator in Nim",
    "tags": [
      "RNG",
      "Sitmo",
      "high-performance",
      "random"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jxy/sitmo",
    "url": "https://github.com/jxy/sitmo",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sixense",
    "description": "Bindings for the Sixense Core API.",
    "tags": [
      "binding",
      "sixense",
      "razer hydra",
      "stem system",
      "vr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/sixense",
    "url": "https://github.com/nimious/sixense.git",
    "long_description": "The Sixense Core API is a cross-platform interface for getting data and sending commands to and from Sixense-powered devices, such as the Razer Hydra and STEM System.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games",
      "Hardware"
    ]
  },
  {
    "name": "skEasing",
    "description": "A collection of easing curves for animation purposes.",
    "tags": [
      "math",
      "curves",
      "animation"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/Skrylar/skEasing",
    "url": "https://github.com/Skrylar/skEasing",
    "long_description": "Provides a set of standard animation curves, which when paired with a tweening library facilitates smooth and aesthetically pleasing transitions.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Image",
      "Maths"
    ]
  },
  {
    "name": "ski",
    "description": "ski is library for SKI combinator.",
    "tags": [
      "ski",
      "combinator",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jiro4989/ski",
    "url": "https://github.com/jiro4989/ski",
    "long_description": "The SKI combinator calculus is a combinatory logic, a computational system that may be perceived as a reduced version of the untyped lambda calculus. It can be thought of as a computer programming language, though it is not convenient for writing software. Instead, it is important in the mathematical theory of algorithms because it is an extremely simple Turing complete language. It was introduced by Moses Schönfinkel and Haskell Curry.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Algorithms"
    ]
  },
  {
    "name": "skinterpolate",
    "description": "Interpolation routines for data and animation.",
    "tags": [
      "interpolation",
      "animation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Skrylar/skInterpolate",
    "url": "https://github.com/Skrylar/skInterpolate",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Games"
    ]
  },
  {
    "name": "sksbox",
    "description": "A native-nim implementaton of the sBOX generic container format.",
    "tags": [
      "sbox",
      "binary",
      "binaryformat",
      "nothings",
      "container"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Skrylar/sksbox",
    "url": "https://github.com/Skrylar/sksbox",
    "long_description": "A pure-Nim implementation of Sean Barret's sBOX generic file container. http://www.nothings.org/computer/sbox/sbox.html\nDoes not include special tools to manage sBOX files, but allows you to easily read and write binary files based around a key-value concept. sksbox makes heavy assumptions that your streams are seekable; sBOX does not require a file be easily streamable without seeking although certainly supports that kind of behavior.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "skybook",
    "description": "Light weight bookmark manager(delicious alternative)",
    "tags": [
      "bookmark-manager",
      "bookmark"
    ],
    "license": "GPL-2.0",
    "method": "git",
    "web": "https://github.com/muxueqz/skybook",
    "url": "https://github.com/muxueqz/skybook",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "slacklib",
    "description": "Library for working with a slack app or sending messages to a slack channel (slack.com)",
    "tags": [
      "library",
      "wrapper",
      "slack",
      "slackapp",
      "api"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_slacklib",
    "url": "https://github.com/ThomasTJdev/nim_slacklib",
    "long_description": "Nim-lang library for working with a slack app or sending messages to a slack channel",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "slimdown",
    "description": "Nim module that converts Markdown text to HTML using only regular expressions. Based on jbroadway's Slimdown.",
    "tags": [
      "markdown",
      "parser",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ruivieira/nim-slimdown",
    "url": "https://github.com/ruivieira/nim-slimdown",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "sling",
    "description": "Signal and Slot library for Nim.",
    "tags": [
      "signal",
      "slots",
      "eventloop",
      "callback"
    ],
    "license": "unlicense",
    "method": "git",
    "web": "https://github.com/Druage/sling",
    "url": "https://github.com/Druage/sling",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "snail",
    "description": "Simple linear algebra for nim. Js too.",
    "tags": [
      "js",
      "matrix",
      "linear algebra"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://stisa.space/snail/",
    "url": "https://github.com/stisa/snail",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Maths"
    ]
  },
  {
    "name": "snappy",
    "description": "Nim implementation of Snappy compression algorithm",
    "tags": [
      "compression",
      "snappy",
      "lzw"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jangko/snappy",
    "url": "https://github.com/jangko/snappy",
    "long_description": "Nim implementation of Snappy compression algorithm\nCurrently, this implementation only support block compression and no stream compression support at all.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sndfile",
    "description": "A wrapper of libsndfile",
    "tags": [
      "audio",
      "wav",
      "wrapper",
      "libsndfile"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/julienaubert/nim-sndfile",
    "url": "https://github.com/julienaubert/nim-sndfile",
    "long_description": "libsndfile is a C library for reading and writing files containing sampled audio data.. libsndfile is quite small, I have however only wrapped those functions that I have used myself so far.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "sndhdr",
    "description": "Library for detecting the format of a sound file",
    "tags": [
      "library",
      "formats",
      "files",
      "sound",
      "audio"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-sndhdr",
    "url": "https://github.com/achesak/nim-sndhdr",
    "long_description": "nim-sndhdr is a Nim module for determining the type of a sound file from a given file, filename, or sequence of bytes. It can detect many common sound file formats.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Audio",
      "Tools"
    ]
  },
  {
    "name": "snip",
    "description": "Text editor to speed up testing code snippets",
    "tags": [
      "console",
      "editor",
      "text",
      "cli"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/snip",
    "url": "https://github.com/genotrance/snip",
    "long_description": "snip is a text editor to speed up testing code snippets\nsnip is a command line text editor that allows writing and testing short code snippets. It is not intended to be a replacement for traditional text editors or IDEs. Minimal text editing features are included along with options to make it easy to work with online gists and pastes.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "sodium",
    "description": "High-level libsodium bindings",
    "tags": [
      "crypto",
      "security",
      "sodium"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zielmicha/libsodium.nim",
    "url": "https://github.com/zielmicha/libsodium.nim",
    "long_description": "Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing and more.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sol",
    "description": "A SIMD-accelerated vector library written in C99 with Nim bindings.",
    "tags": [
      "c99",
      "c11",
      "c",
      "vector",
      "simd",
      "avx",
      "avx2",
      "neon"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/davidgarland/sol",
    "url": "https://github.com/davidgarland/sol",
    "long_description": "Sol is a fast and portable vector library written in C with first-class Nim bindings.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "sonic",
    "description": "client for sonic search backend",
    "tags": [
      "sonic",
      "search",
      "backend",
      "index",
      "client"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/nim-sonic-client",
    "url": "https://github.com/xmonader/nim-sonic-client",
    "long_description": "nim client for sonic search backend.\nSonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.\nSonic can be used as a simple alternative to super-heavy and full-featured search backends such as Elasticsearch in some use-cases. It is capable of normalizing natural language search queries, auto-completing a search query and providing the most relevant results for a query. Sonic is an identifier index, rather than a document index; when queried, it returns IDs that can then be used to refer to the matched documents in an external database.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database",
      "Cloud"
    ]
  },
  {
    "name": "sophia",
    "description": "Nim wrapper of the Sophia key/value store",
    "tags": [
      "library",
      "wrapper",
      "database"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gokr/nim-sophia",
    "url": "https://github.com/gokr/nim-sophia",
    "long_description": "Sophia is a modern transactional key-value / row storage library.\nHow does it differ from other storages? Sophia is RAM-Disk hybrid storage. It is designed to provide best possible on-disk performance without degradation in time. It has guaranteed O(1) worst case complexity for read, write and range scan operations.\nIt adopts to expected write rate, total storage capacity and cache size. Memory requirements for common HDD and Flash drives can be seen Here.\nWhat is it good for? For server environment, which requires lowest latency write and read, predictable behaviour, optimized storage schema and transaction guarantees. It can efficiently work with large volumes of ordered data, such as a time-series, analytics, events, logs, counters, metrics, full-text search, common key-value, etc.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "sound",
    "description": "Cross-platform sound mixer library",
    "tags": [
      "sound",
      "ogg"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/sound",
    "url": "https://github.com/yglukhov/sound.git",
    "long_description": "Cross-platform sound mixer library\nThe library is using different \"backends\" depending on target platform:\n* Linux, MacOS, iOS: OpenAL. Supported formats: ogg+vorbis\n* Windows: XAudio2. Supported formats: ogg+vorbis\n* Android: SLES. Supported formats: ogg+vorbis\n* JavaScript, Asm.js: WebAudio. Supported formats: mp3 (and ogg+vorbis on some browsers)",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "JS",
      "Audio"
    ]
  },
  {
    "name": "soundio",
    "description": "Bindings for libsoundio",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "audio",
      "sound",
      "media",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/ul/soundio",
    "long_description": "Nim binding to C library providing cross-platform audio input and output. The API is suitable for real-time software such as digital audio workstations as well as consumer software such as music players.\nThis library is an abstraction; however in the delicate balance between performance and power, and API convenience, the scale is tipped closer to the former. Features that only exist in some sound backends are exposed.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "spacenav",
    "description": "Bindings for libspnav, the free 3Dconnexion device driver",
    "tags": [
      "binding",
      "3dx",
      "3dconnexion",
      "libspnav",
      "spacenav",
      "spacemouse",
      "spacepilot",
      "spacenavigator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimious/spacenav",
    "url": "https://github.com/nimious/spacenav.git",
    "long_description": "This package contains bindings to the Spacenav SDK (libspnav) for the Nim programming language. Spacenav provides a free, compatible and open source alternative to 3Dconnexion's popular 3D input device drivers and SDK.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games"
    ]
  },
  {
    "name": "spdk",
    "description": "The Storage Performance Development Kit(SPDK) provides a set of tools and libraries for writing high performance, scalable, user-mode storage applications.",
    "tags": [
      "library",
      "SSD",
      "NVME",
      "io",
      "storage"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimscale/spdk.git",
    "url": "https://github.com/nimscale/spdk.git",
    "long_description": "NIM wrapper to Intel SPDK set of libraries.\nThe Storage Performance Development Kit (SPDK) provides a set of tools and libraries for writing high performance, scalable, user-mode storage applications. It achieves high performance by moving all of the necessary drivers into userspace and operating in a polled mode instead of relying on interrupts, which avoids kernel context switches and eliminates interrupt handling overhead.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware"
    ]
  },
  {
    "name": "spdx_licenses",
    "description": "A library to retrieve the list of commonly used licenses from the SPDX License List.",
    "tags": [
      "spdx",
      "license"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/spdx_licenses.nim",
    "url": "https://github.com/euantorano/spdx_licenses.nim",
    "long_description": "A library to retrieve the list of commonly used licenses from the SPDX License List.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "sph",
    "description": "Large number of cryptographic hashes for Nim",
    "tags": [
      "crypto",
      "hashes",
      "md5",
      "sha"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/aidansteele/sph",
    "url": "https://github.com/aidansteele/sph",
    "long_description": "sph is a Nim library for dealing with cryptographic hashes. It is a fairly thin wrapper of sphlib.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "sphincs",
    "description": "SPHINCS⁺ stateless hash-based signature scheme",
    "tags": [
      "crypto",
      "pqcrypto",
      "signing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ehmry/nim-sphincs",
    "url": "https://github.com/ehmry/nim-sphincs",
    "long_description": "SPHINCS⁺ is a stateless hash-based signature scheme that has been submitted to the NIST post-quantum crypto project.\nThis library contains Nim implementations for the six SHAKE256 variants of SPHINCS⁺. Performance will be abysmal until the Keccak implementation is optimized.\nEach signature scheme is implemented as a seperate module. Multiple scheme modules may be imported at once, the correct procedures will be deduced from the keypair type.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "sphinx",
    "description": "Sphinx wrapper for Nim",
    "tags": [
      "sphinx",
      "wrapper",
      "search",
      "engine"
    ],
    "license": "LGPL",
    "method": "git",
    "web": "https://github.com/Araq/sphinx",
    "url": "https://github.com/Araq/sphinx",
    "long_description": "Sphinx is an open source full text search server, designed from the ground up with performance, relevance (aka search quality), and integration simplicity in mind. It's written in C++ and works on Linux (RedHat, Ubuntu, etc), Windows, MacOS, Solaris, FreeBSD, and a few other systems.\nSphinx lets you either batch index and search data stored in an SQL database, NoSQL storage, or just files quickly and easily — or index and search data on the fly, working with Sphinx pretty much as with a database server.\nA variety of text processing features enable fine-tuning Sphinx for your particular application requirements, and a number of relevance functions ensures you can tweak search quality as well.",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database",
      "Miscellaneous"
    ]
  },
  {
    "name": "spills",
    "description": "Disk-based sequences",
    "tags": [
      "disk-based",
      "sequence",
      "memory-mapping"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/andreaferretti/spills",
    "url": "https://github.com/andreaferretti/spills",
    "long_description": "Spills are sequences that spill to disk when they do not fit in memory. They are simply represented by a memory-mapped file, hence they are to be used with type that are flat - that is, they are obtained by combining primitive types, objects and arrays, but do not involve seqs, strings or references to heap memory. In short, you should be able to compute their size statically.\nSpills work in two modes:\n* writable spills wrap a stream, and one can add to them, which just amounts to writing to the stream;\n* normal spills are fixed-size. You can read and write their elements, iterate over them and so on, but cannot grow.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "spinny",
    "description": "Spinny is a tiny terminal spinner package for the Nim Programming Language.",
    "tags": [
      "terminal",
      "spinner",
      "spinny",
      "load"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/molnarmark/spinny",
    "url": "https://github.com/molnarmark/spinny",
    "long_description": "Spinny is a tiny terminal spinner package.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "spotify",
    "description": "A Nim wrapper for the Spotify Web API",
    "tags": [
      "spotify"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/CORDEA/spotify",
    "url": "https://github.com/CORDEA/spotify",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "spry",
    "description": "A Smalltalk and Rebol inspired language implemented as an AST interpreter",
    "tags": [
      "language",
      "library",
      "scripting"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gokr/spry",
    "url": "https://github.com/gokr/spry",
    "long_description": "This is the Spry language, inspired by Rebol/Smalltalk/Self/Forth and Nim. Characteristics:\n* A dynamically typed minimalistic language with a free form syntax similar to Rebol/Forth\n* Parser produces an AST which in turn is interpreted by the interpreter\n* Functional in nature and has closures and non local return\n* Homoiconic which means code and data has the same form\n* Meant to be 100% live and support interactive development",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Language"
    ]
  },
  {
    "name": "sprymicro",
    "description": "Small demo Spry interpreters",
    "tags": [
      "spry",
      "demo"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gokr/sprymicro",
    "url": "https://github.com/gokr/sprymicro",
    "long_description": "This is a demonstration of compiling minimal Spry interpreters.\n* sprymin.nim - A minimal core Spry interpreter that can still read a file\n* sprymicro.nim - As small as it can get, source is embedded instead of accessed as file",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Language"
    ]
  },
  {
    "name": "spryvm",
    "description": "Homoiconic dynamic language interpreter in Nim",
    "tags": [
      "interpreter",
      "language",
      "spry"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/gokr/spryvm",
    "url": "https://github.com/gokr/spryvm",
    "long_description": "This is the VM for the Spry language, packaged as a Nim library.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Language"
    ]
  },
  {
    "name": "spurdify",
    "description": "Spurdification library and CLI",
    "tags": [
      "funny",
      "meme",
      "spurdo",
      "text-manipulation",
      "mangle"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/paradox460/spurdify",
    "url": "https://github.com/paradox460/spurdify",
    "long_description": "Spurdification! For when you want to make text sound like Spurdo Sparde wrote it.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Miscellaneous"
    ]
  },
  {
    "name": "spwd",
    "description": "Nim port of Python's spwd module for working with the UNIX shadow password file",
    "tags": [
      "library",
      "unix",
      "spwd",
      "password",
      "shadow"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-spwd",
    "url": "https://github.com/achesak/nim-spwd",
    "long_description": "nim-spwd is a Nim port of Python's \"spwd\" module for working with the UNIX shadow password file.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "sqlbuilder",
    "description": "A SQLbuilder with support for NULL values",
    "tags": [
      "sql",
      "sqlbuilder"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_sqlbuilder",
    "url": "https://github.com/ThomasTJdev/nim_sqlbuilder",
    "long_description": "SQL builder for `INSERT`, `UPDATE`, `SELECT` and `DELETE` queries. The builder will check for `NULL values and build a query with them.\nAfter Nim's update to 0.19.0, the check for `` NULL` values has been removed due to the removal of nil. This library's main goal is to allow the user, to insert `NULL` values into the database again.\nThis packages uses Nim's standard packages, e.g. db_postgres, proc to escape quotes.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "srt",
    "description": "Nim module for parsing SRT (SubRip) subtitle files",
    "tags": [
      "srt",
      "subrip",
      "subtitle"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-srt",
    "url": "https://github.com/achesak/nim-srt",
    "long_description": "nim-srt is a Nim module for parsing SRT (SubRip) subtitle files.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Video",
      "Audio",
      "Miscellaneous"
    ]
  },
  {
    "name": "statsd_client",
    "description": "A simple, stateless StatsD client library",
    "tags": [
      "library",
      "statsd",
      "client",
      "statistics",
      "metrics"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-statsd-client",
    "url": "https://github.com/FedericoCeratto/nim-statsd-client",
    "long_description": "A simple, stateless StatsD client.\nStatsD is a front-end proxy for the Graphite/Carbon metrics server, originally written by Etsy's Erik Kastner. It is based on ideas from Flickr and this post by Cal Henderson: Counting and Timing. The server was written in Node, though there have been implementations in other languages since then.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network",
      "Database",
      "Reporting"
    ]
  },
  {
    "name": "stb_image",
    "description": "A wrapper for stb_image and stb_image_write.",
    "tags": [
      "stb",
      "image",
      "graphics",
      "io",
      "wrapper"
    ],
    "license": "Unlicense",
    "method": "git",
    "web": "https://gitlab.com/define-private-public/stb_image-Nim",
    "url": "https://gitlab.com/define-private-public/stb_image-Nim",
    "long_description": "This is a Nim wrapper of the stb_image single header file libraries\n(`stb_image.h` and `stb_image_write.h`).",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "std_shims",
    "description": "APIs available in the latests version of Nim, backported to older stable releases",
    "tags": [
      "library",
      "backports",
      "shims"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-std-shims",
    "url": "https://github.com/status-im/nim-std-shims",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "steam",
    "description": "Steam API Client for Nim",
    "tags": [
      "steam",
      "game",
      "gaming",
      "async",
      "multisync"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-steam",
    "url": "https://github.com/juancarlospaco/nim-steam",
    "code_quality": 3,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "stew",
    "description": "stew is collection of utilities, std library extensions and budding libraries that are frequently used at Status, but are too small to deserve their own git repository.",
    "tags": [
      "library",
      "backports",
      "shims",
      "ranges",
      "bitwise",
      "bitops",
      "endianness",
      "bytes",
      "blobs",
      "pointer-arithmetic"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-stew",
    "url": "https://github.com/status-im/nim-stew",
    "long_description": "stew is collection of utilities, std library extensions and budding libraries that are frequently used at Status, but are too small to deserve their own git repository.\n* bitops2 - an updated version of bitops.nim, filling in gaps in original code\n* byteutils - utilities that make working with the Nim byte type convenient\n* endians2 - utilities for converting to and from little / big endian integers\n* ranges - utility functions for working with parts and blobs of memory\n* shims - backports of nim devel code to the stable version that Status is using",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "System",
      "Miscellaneous"
    ]
  },
  {
    "name": "stint",
    "description": "Stack-based arbitrary-precision integers - Fast and portable with natural syntax for resource-restricted devices",
    "tags": [
      "library",
      "math",
      "numbers"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-stint",
    "url": "https://github.com/status-im/nim-stint",
    "long_description": "A fast and portable stack-based multi-precision integer library in pure Nim\nMain focus:\n* Portability\n- 32 and 64 bit arch\n- ARM for usage on mobile phones\n- Additionally RISC-V and MIPS for open hardware and low power IoT devices.\n* Speed, library is carefully tuned to produce the best assembly given the current compilers. However, the library itself does not resort to assembly for portability.\n* No heap/dynamic allocation\n* Ethereum applications\n- Uint256/Int256 for Ethereum Virtual Machine usage.\n- Uint2048 for Ethereum Bloom filters\n* Ease of use:\n- Use traditional +, -, +=, etc operators like on native types\n- Representation of numbers in memory is the exact same as native types and endianness aware.\n- In practice that means that interfacing with binary blobs representing numbers from cryptographic libraries can be done with a cast if it represents a Uint256, Uint512, Uint1024, Uint2048.\n- converting to and from Hex\n- converting to and from decimal strings",
    "code_quality": 4,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "Algorithms",
      "Hardware"
    ]
  },
  {
    "name": "stomp",
    "description": "A pure-nim implementation of the STOMP protocol for machine messaging.",
    "tags": [
      "stomp",
      "library",
      "messaging",
      "events"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "http://bitbucket.org/mahlon/nim-stomp",
    "url": "https://bitbucket.org/mahlon/nim-stomp",
    "long_description": "This is a pure-nim client library for interacting with Stomp compliant messaging brokers.\nStomp is a simple protocol for message passing between clients, using a central broker. It is a subset of other more elaborate protocols (like AMQP), supporting only the most used features of common brokers.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "stopwatch",
    "description": "A simple timing library for benchmarking code and other things.",
    "tags": [
      "timer",
      "timing",
      "benchmarking",
      "watch",
      "clock"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://gitlab.com/define-private-public/stopwatch",
    "url": "https://gitlab.com/define-private-public/stopwatch",
    "long_description": "This is a fork of rbmz's stopwatch. It adds features such as multiple starting & stopping, lapping, and handy time\nmeasurement conversion utility functions.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Miscellaneous"
    ]
  },
  {
    "name": "stor",
    "description": "Efficient object storage system",
    "tags": [
      "storage",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nimscale/stor",
    "url": "https://github.com/nimscale/stor",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "storage",
    "description": "Storage, localStorage, and sessionStorage bindigs for Nim's JavaScript backend.",
    "tags": [
      "JavaScript",
      "Storage",
      "localStorage",
      "sessionStorage"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "https://bitbucket.org/moigagoo/storage/",
    "url": "https://bitbucket.org/moigagoo/storage/",
    "long_description": "Storage, localStorage, and sessionStorage bindigs for Nim's JavaScript backend.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Database"
    ]
  },
  {
    "name": "strfmt",
    "description": "A string formatting library inspired by Python's `format`.",
    "tags": [
      "library"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "https://lyro.bitbucket.org/strfmt",
    "url": "https://bitbucket.org/lyro/strfmt",
    "long_description": "This module implements some basic helpers for formatting values as strings in a configurable way. It is inspired by and similar to Python's format function",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "stringinterpolation",
    "description": "String interpolation with printf syntax",
    "tags": [
      "string formatting",
      "string interpolation"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bluenote10/nim-stringinterpolation",
    "url": "https://github.com/bluenote10/nim-stringinterpolation",
    "long_description": "This is a small string interpolation library for Nim providing a prinftf-like syntax. The library was inspired by Scala's string interpolation and provides a similar interface.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "strslice",
    "description": "Simple implementation of string slices with some of the strutils ported or wrapped to work on them. String slices offer a performance enhancement when working with large amounts of slices from one base string",
    "tags": [
      "optimization",
      "strings",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/strslice",
    "url": "https://github.com/PMunch/strslice",
    "long_description": "This is an implementation of string slices that works on a common underlying string shared through a reference instead of copying parts of the string. This has the benefit of not requiring the time and memory of copying parts of the string over and over. The only thing that get's copied is the reference of the underlying string, and two new indices for the start and stop of the string slice. This means that by changing the original string, any string slice that was created from it will be updated as well. The benefit of using string slices comes when copying parts of the string to pass on, for example in a combinatorial parser.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "struct",
    "description": "Python-like 'struct' for Nim",
    "tags": [
      "struct",
      "library",
      "python",
      "pack",
      "unpack"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/struct.nim",
    "url": "https://github.com/OpenSystemsLab/struct.nim",
    "long_description": "Python-like 'struct' for Nim.\nThis module performs conversions between Nim values and C structs represented as Nim strings. This can be used in handling binary data stored in files or from network connections, among other sources. It uses Format Strings as compact descriptions of the layout of the C structs and the intended conversion to/from Nim values.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "strunicode",
    "description": "Swift-like unicode string handling",
    "tags": [
      "string",
      "unicode",
      "grapheme"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-strunicode",
    "url": "https://github.com/nitely/nim-strunicode",
    "long_description": "Swift-like unicode string handling. Most (all?) API operations take linear time, but in exchange they take constant space. Be aware, storing a sequence of grapheme clusters may take 10 times as much space as a utf-8 string. This is why linear time operations are prefered in this case.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "subexes",
    "description": "Nim support for substitution expressions",
    "tags": [
      "graveyard",
      "subexes",
      "substitution expression"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/subexes",
    "url": "https://github.com/nim-lang/graveyard?subdir=subexes",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 1,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "subfield",
    "description": "Override the dot operator to access nested subfields of a Nim object.",
    "tags": [
      "subfield",
      "macros"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jyapayne/subfield",
    "url": "https://github.com/jyapayne/subfield",
    "long_description": "A sub-field accessor macro for the Nim programming language. This lets you access nested fields within a Nim object or ref object.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "subhook",
    "description": "subhook wrapper",
    "tags": [
      "hook",
      "hooking",
      "subhook",
      "x86",
      "windows",
      "linux",
      "unix"
    ],
    "license": "BSD2",
    "method": "git",
    "web": "https://github.com/ba0f3/subhook.nim",
    "url": "https://github.com/ba0f3/subhook.nim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "System"
    ]
  },
  {
    "name": "subviewer",
    "description": "Nim module for parsing SubViewer subtitle files",
    "tags": [
      "subviewer",
      "subtitle"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-subviewer",
    "url": "https://github.com/achesak/nim-subviewer",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Video",
      "Audio",
      "Miscellaneous"
    ]
  },
  {
    "name": "suffer",
    "description": "a nim library for drawing 2d shapes, text, and images to 32bit software pixel buffers",
    "tags": [
      "graphics",
      "font",
      "software"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/emekoi/suffer",
    "url": "https://github.com/emekoi/suffer",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "sugerror",
    "description": "Terse and composable error handling.",
    "tags": [
      "errors",
      "expr"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/quelklef/nim-sugerror",
    "url": "https://github.com/quelklef/nim-sugerror",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "suggest",
    "description": "mmap-persistent SymSpell spell checking algorithm",
    "tags": [
      "library",
      "spell-check",
      "edit-distance"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/c-blake/suggest.git",
    "url": "https://github.com/c-blake/suggest.git",
    "long_description": "This is a from-scratch implementation in Nim of Wolf Garbe's Symmetric Delete Algorithm for correct spelling suggestions. The basic idea is simple: corpus words within edit distance N of a query can only be at most N units longer or N units shorter and the shorter must be derived from deletes of longer strings. So, build a map from all shortenings to all corpus words which generate them. When queried with a string, we can then lookup all possible edits lengthening the query into a corpus word. We also on-the-fly compute all shortenings of a query (& shortenings of lengthenings). From both sets, we filter \"maybe within N edits of a corpus word\" to \"actually within N edits\". The filter can be any \"distance\" successfully bounded by N-indels. This idea is like Monte Carlo numerical integration of shapes within easy bounding boxes (but this is deterministic & points which pass are reported, not just counted).",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "svdpi",
    "description": "Small wrapper for SystemVerilog DPI-C header svdpi.h",
    "tags": [
      "dpi-c",
      "systemverilog",
      "foreign-function",
      "interface"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kaushalmodi/nim-svdpi",
    "url": "https://github.com/kaushalmodi/nim-svdpi",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware"
    ]
  },
  {
    "name": "sweetanitify",
    "description": "Sweet_Anita Translator, help spread awareness about Tourettes",
    "tags": [
      "sweet_anita",
      "tourette",
      "string"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/sweetanitify",
    "url": "https://github.com/juancarlospaco/sweetanitify",
    "long_description": "Sweet_Anita Translator, bitch.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "JS",
      "Miscellaneous",
      "Tools"
    ]
  },
  {
    "name": "switch_build",
    "description": "An easy way to build homebrew files for the Nintendo Switch",
    "tags": [
      "switch",
      "nintendo",
      "build",
      "builder"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jyapayne/switch-build",
    "url": "https://github.com/jyapayne/switch-build",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Games",
      "Hardware"
    ]
  },
  {
    "name": "syphus",
    "description": "An implementation of the tabu search heuristic in Nim.",
    "tags": [
      "optimization",
      "tabu"
    ],
    "license": "BSD-3",
    "method": "git",
    "web": "https://github.com/makingspace/syphus-nim",
    "url": "https://github.com/makingspace/syphus",
    "long_description": "Implementation of the Tabu Search heuristic.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Data science"
    ]
  },
  {
    "name": "syscall",
    "description": "Raw system calls for Nim",
    "tags": [
      "library"
    ],
    "license": "MPL",
    "method": "git",
    "web": "https://github.com/def-/nim-syscall",
    "url": "https://github.com/def-/nim-syscall",
    "long_description": "Low level system calls, currently Linux x86 & x86_64 only, but meant to be extended on demand.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "syslog",
    "description": "Syslog module.",
    "tags": [
      "library",
      "pure"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-syslog",
    "url": "https://github.com/FedericoCeratto/nim-syslog",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "sysrandom",
    "description": "A simple library to generate random data, using the system's PRNG.",
    "tags": [
      "random",
      "RNG",
      "PRNG"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/sysrandom.nim",
    "url": "https://github.com/euantorano/sysrandom.nim",
    "long_description": "A simple library to generate random data, using the system's PRNG.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "systimes",
    "description": "An alternative DateTime implementation",
    "tags": [
      "time",
      "timezone",
      "datetime"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/GULPF/systimes",
    "url": "https://github.com/GULPF/systimes",
    "long_description": "The systimes module implements an alternative way to represent a timestamp + timezone. Nim's standard library uses the DateTime type to represent the same thing. There are two important differences between DateTime and SysTime:\n* SysTime is immutable.\n* SysTime onyl stores a times.Time and a times.Timezone, meaning that individual caledar fields like year, month and so on are never stored.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "System",
      "Algorithms"
    ]
  },
  {
    "name": "taglib",
    "description": "TagLib Audio Meta-Data Library wrapper",
    "tags": [
      "audio",
      "metadata",
      "tags",
      "library",
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/alex-laskin/nim-taglib",
    "url": "https://github.com/alex-laskin/nim-taglib",
    "long_description": "TagLib is a library for reading and editing the meta-data of several popular audio formats. Currently it supports both ID3v1 and ID3v2 for MP3 files, Ogg Vorbis comments and ID3 tags and Vorbis comments in FLAC, MPC, Speex, WavPack, TrueAudio, WAV, AIFF, MP4 and ASF files.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "tcl",
    "description": "Wrapper for the TCL programming language",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/tcl",
    "url": "https://github.com/nim-lang/tcl",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 1,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "teafiles",
    "description": "TeaFiles provide fast read/write access to time series data",
    "tags": [
      "teafiles",
      "mmap",
      "timeseries"
    ],
    "license": "Apache2",
    "method": "git",
    "web": "https://github.com/unicredit/nim-teafiles",
    "url": "git@github.com:unicredit/nim-teafiles.git",
    "long_description": "This is a Nim library to read and write TeaFiles.\nTeaFiles provide fast read/write access to time series data from any software package on any platform. Time Series are considered homogeneous collections of items, ordered by their timestamp. Items are stored in raw binary format, such that data can be memory mapped for fast read/write access. In order to ensure correct data interpretation when data is exchanged between multiple applications, TeaFiles optionally embedd a description of the data layout in the file header, along with other optional description of the file's contents.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Data science"
    ]
  },
  {
    "name": "telebot",
    "description": "Async Telegram Bot API Client",
    "tags": [
      "telebot",
      "telegram",
      "bot",
      "api",
      "client",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/telebot.nim",
    "url": "https://github.com/ba0f3/telebot.nim",
    "long_description": "Async client for Telegram Bot API in pure Nim [Bot API 4.4]",
    "code_quality": 4,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "Network",
      "Miscellaneous"
    ]
  },
  {
    "name": "tempdir",
    "description": "A Nim library to create and manage temporary directories.",
    "tags": [
      "temp",
      "io",
      "tmp"
    ],
    "license": "BSD3",
    "method": "git",
    "web": "https://github.com/euantorano/tempdir.nim",
    "url": "https://github.com/euantorano/tempdir.nim",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "tempfile",
    "description": "Temporary files and directories",
    "tags": [
      "temp",
      "mktemp",
      "make",
      "mk",
      "mkstemp",
      "mkdtemp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/tempfile.nim",
    "url": "https://github.com/OpenSystemsLab/tempfile.nim",
    "long_description": "This module contains basic procs for creating temporary files and directories\nThis module is impressed by Python's tempfile module",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "System"
    ]
  },
  {
    "name": "templates",
    "description": "A simple string templating library for Nim.",
    "tags": [
      "web",
      "html",
      "template"
    ],
    "license": "BSD",
    "method": "git",
    "web": "https://github.com/onionhammer/nim-templates",
    "url": "https://github.com/onionhammer/nim-templates.git",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting",
      "Miscellaneous"
    ]
  },
  {
    "name": "termbox",
    "description": "Termbox wrapper.",
    "tags": [
      "library",
      "terminal",
      "io"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fowlmouth/nim-termbox",
    "url": "https://github.com/fowlmouth/nim-termbox",
    "long_description": "Termbox is a library that provides minimalistic API which allows the programmer to write text-based user interfaces.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "terminaltables",
    "description": "terminal tables",
    "tags": [
      "terminal",
      "tables",
      "ascii",
      "unicode"
    ],
    "license": "BSD-3-Clause",
    "method": "git",
    "web": "https://github.com/xmonader/nim-terminaltables",
    "url": "https://github.com/xmonader/nim-terminaltables",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Reporting"
    ]
  },
  {
    "name": "termstyle",
    "description": "Easy to use styles for terminal output",
    "tags": [
      "terminal",
      "colour",
      "style"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/termstyle",
    "url": "https://github.com/PMunch/termstyle",
    "long_description": "This module is created to bring extremely easy to use terminal colours and styles. The official terminal module also does this but requires you to use calls like setStyle which clutters your input. This module on the other hand just defines simple, single-word procedures that applies styles to everything that follows.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "testrunner",
    "description": "Test runner with file monitoring and desktop notification capabilities",
    "tags": [
      "test",
      "tests",
      "unittest",
      "utility",
      "tdd"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-testrunner",
    "url": "https://github.com/FedericoCeratto/nim-testrunner",
    "long_description": "This tool runs the Nim compiler against a set of source files. It’s meant to compile and run unittest files but it can also be used to compile other source files.\nIt supports globbing and can run tests automatically when source files are changed.\nGenerates reports in JUnit format.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development",
      "Tools"
    ]
  },
  {
    "name": "texttospeech",
    "description": "A client for the Google Cloud Text to Speech API.",
    "tags": [
      "tts",
      "text-to-speech",
      "google-cloud",
      "gcloud",
      "api"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/texttospeech",
    "url": "https://github.com/dom96/texttospeech",
    "long_description": "texttospeech implements a Google Cloud Text to Speech API client.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous",
      "Audio"
    ]
  },
  {
    "name": "tf2plug",
    "description": "A mod manager for TF2",
    "tags": [
      "app",
      "binary",
      "tool",
      "tf2"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://gitlab.com/waylon531/tf2plug",
    "url": "https://gitlab.com/waylon531/tf2plug",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "tiger",
    "description": "Tiger hash function",
    "tags": [
      "hash"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ehmry/tiger",
    "url": "https://github.com/ehmry/tiger",
    "long_description": "Tiger is a fast new hash function, designed to be very fast on modern computers.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "timecop",
    "description": "Time travelling for Nim",
    "tags": [
      "time",
      "travel",
      "timecop"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/timecop.nim",
    "url": "https://github.com/ba0f3/timecop.nim",
    "long_description": "timecop provides two helpers `freezeAt` and `travelTo` template, that will helps you do unittest on specified time.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "timerpool",
    "description": "threadsafe timerpool implementation for event purpose",
    "tags": [
      "timer",
      "pool",
      "events",
      "thread"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mikra01/timerpool",
    "url": "https://github.com/mikra01/timerpool/",
    "long_description": "Thread-safe software timerpool implementation in Nim.\nThis library simplifies handling and running very much timers (constrained by memory). The timers itself are not designed for critical time-measuring purposes. It´s for event purpose only.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "timespec_get",
    "description": "Nanosecond-percision time using timespec_get",
    "tags": [
      "time",
      "timespec_get"
    ],
    "license": "0BSD",
    "method": "git",
    "web": "https://github.com/Matceporial/nim-timespec_get",
    "url": "https://github.com/Matceporial/nim-timespec_get",
    "long_description": "Nanosecond-percision time using `timespec_get` of C11",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "timezones",
    "description": "Timezone library compatible with the standard library. ",
    "tags": [
      "timezone",
      "time",
      "tzdata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/GULPF/timezones",
    "url": "https://github.com/GULPF/timezones",
    "long_description": "A library for working with timezones. It uses the IANA timezone database as a source for the timezone definitions. Both the C based backends and the JS backend is supported.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "JS",
      "Miscellaneous"
    ]
  },
  {
    "name": "tinamou",
    "description": "Game Library in Nim with SDL2",
    "tags": [
      "game",
      "sdl2"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Double-oxygeN/tinamou",
    "url": "https://github.com/Double-oxygeN/tinamou",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Games"
    ]
  },
  {
    "name": "tiny_sqlite",
    "description": "A thin SQLite wrapper with proper type safety",
    "tags": [
      "database",
      "sqlite"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/GULPF/tiny_sqlite",
    "url": "https://github.com/GULPF/tiny_sqlite",
    "long_description": "A thin SQLite wrapper for Nim. Compared to the `std/db_sqlite` module it has several advantages:\n* Proper type safety (`std/db_sqlite` treats everything as strings)\n* Support for SQLite NULL values using `Option[T]`\nAdditional features\nA major difference in design is that std/db_sqlite implements a generic database interface that can be implemented by other databases (for example `std/db_mysql` and `std/postgres`), meaning that the database can be switched out more easily. The `tiny_sqlite` module however is only concerned with supporting SQLite. This has the advantage that functionality that might not exist in other databases can be supported.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Database"
    ]
  },
  {
    "name": "tinyfiledialogs",
    "description": "TinyFileDialogs for Nim.",
    "tags": [
      "gui",
      "wrapper",
      "gtk",
      "qt",
      "linux",
      "windows",
      "mac",
      "osx"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-tinyfiledialogs",
    "url": "https://github.com/juancarlospaco/nim-tinyfiledialogs",
    "long_description": "TinyFileDialogs wrapper for Nim.\nCross-platform InputBox, PasswordBox, MessageBox, OpenFileDialog, SaveFileDialog, SelectFolderDialog.\nNative dialogs for Windows, Mac, OSX, GTK+, Qt, Console.\nSSH supported via automatic switch to console mode or X11 forwarding.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "tissue",
    "description": "Test failing snippets from Nim's issues",
    "tags": [
      "github",
      "issue",
      "debug",
      "test",
      "testament"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/tissue",
    "url": "https://github.com/genotrance/tissue",
    "long_description": "Tissue is an automation tool to help debug Nim issues. It can test snippets posted in Nim issues and comments on Github and speed up the fixing process.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Development"
    ]
  },
  {
    "name": "tnetstring",
    "description": "Parsing and serializing for the TNetstring format.",
    "tags": [
      "tnetstring",
      "library",
      "serialization"
    ],
    "license": "MIT",
    "method": "hg",
    "web": "http://bitbucket.org/mahlon/nim-tnetstring",
    "url": "https://mahlon@bitbucket.org/mahlon/nim-tnetstring",
    "long_description": "This module implements a simple TNetstring parser and serializer. TNetString stands for \"tagged netstring\" and is a modification of Dan Bernstein's netstrings specification. TNetstrings allow for the same data structures as JSON but in a format that is resistant to buffer overflows and backward compatible with original netstrings. They make no assumptions about string contents, allowing for easy transmission of ascii and binary data mixed with strongly typed values.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Miscellaneous"
    ]
  },
  {
    "name": "tnim",
    "description": "tnim is a Nim REPL - an interactive sandbox for testing Nim code",
    "tags": [
      "REPL",
      "sandbox",
      "interactive",
      "compiler",
      "code",
      "language"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jlp765/tnim",
    "url": "https://github.com/jlp765/tnim",
    "long_description": "This is an interactive sandbox for testing Nim code\nnim secret also provides an interactive NIM experience (note: nim secret uses the VM in Nim, so it only allows the import of a subset of modules)\ntnim is SLOW!!. It is a quick and dirty interactive tool, not a sleek and shiny speed demon.\ntnim is assumed to not work with multitasking (async library, et. al.)\nTry Nim Playground (https://play.nim-lang.org/) for an online experience",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools"
    ]
  },
  {
    "name": "tor",
    "description": "Tor helper library",
    "tags": [
      "library",
      "security",
      "crypto",
      "tor",
      "onion"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/nim-tor",
    "url": "https://github.com/FedericoCeratto/nim-tor",
    "long_description": "Tor helper for Nim\n* Wrap sockets to use the SOCKS proxy provided by Tor\n* Wrap sockets to connect to Onion Services\n* Authenticates against a local Tor daemon to create / list / delete traditional and ephemeral Onion Services\n* Tested on Linux\n* Basic functional tests",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "torch",
    "description": "A nim flavor of pytorch",
    "tags": [
      "machine-learning",
      "nn",
      "neural",
      "networks",
      "cuda",
      "wasm",
      "pytorch",
      "torch"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/fragcolor-xyz/nimtorch",
    "url": "https://github.com/fragcolor-xyz/nimtorch",
    "long_description": "Pytorch - Py + Nim\nA Nim frontend for pytorch, aiming to be mostly auto-generated and internally using ATen.\nBecause Nim compiles to C++, this is not a wrapper or binding library. It generates 1-to-1 native ATen code.\nThe only requirement from pytorch is ATen's core tensor library. Because of this, nimtorch is extremely versatile and can compile on any kind of device.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Data science"
    ]
  },
  {
    "name": "toxcore",
    "description": "C Tox core wrapper",
    "tags": [
      "tox",
      "chat",
      "wrapper"
    ],
    "license": "GPL-3.0",
    "method": "git",
    "web": "https://github.com/ehmry/nim_tox",
    "url": "https://github.com/ehmry/nim_tox",
    "long_description": "Tox is a peer to peer (serverless) instant messenger aimed at making security and privacy easy to obtain for regular users. It uses NaCl for its encryption and authentication.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network",
      "Web"
    ]
  },
  {
    "name": "translation",
    "description": "Text string translation from free online crowdsourced API. Tinyslation a tiny translation.",
    "tags": [
      "translation",
      "tinyslation",
      "api",
      "strings",
      "minimalism"
    ],
    "license": "LGPLv3",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-tinyslation",
    "url": "https://github.com/juancarlospaco/nim-tinyslation",
    "long_description": "Text string translation from free online crowdsourced API. Tinyslation a tiny translation. Sync and Async support (MultiSync). No API Key required. Works with and without SSL -d:ssl. No Auth required.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Miscellaneous"
    ]
  },
  {
    "name": "treesitter",
    "description": "Nim wrapper of the tree-sitter incremental parsing library",
    "tags": [
      "tree-sitter",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_agda",
    "description": "Nim wrapper for Agda language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "agda",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_agda",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_bash",
    "description": "Nim wrapper for Bash language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "bash",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_bash",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_c",
    "description": "Nim wrapper for C language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "c",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_c",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_c_sharp",
    "description": "Nim wrapper for C# language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "C#",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_c_sharp",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_cpp",
    "description": "Nim wrapper for C++ language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "cpp",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_cpp",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_css",
    "description": "Nim wrapper for CSS language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "css",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_css",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_go",
    "description": "Nim wrapper for Go language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "go",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_go",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_haskell",
    "description": "Nim wrapper for Haskell language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "haskell",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_haskell",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_html",
    "description": "Nim wrapper for HTML language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "html",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_html",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_java",
    "description": "Nim wrapper for Java language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "java",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_java",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_javascript",
    "description": "Nim wrapper for Javascript language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "javascript",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_javascript",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_ocaml",
    "description": "Nim wrapper for OCaml language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "ocaml",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_ocaml",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_php",
    "description": "Nim wrapper for PHP language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "php",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_php",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_python",
    "description": "Nim wrapper for Python language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "python",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_python",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_ruby",
    "description": "Nim wrapper for Ruby language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "ruby",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_ruby",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_rust",
    "description": "Nim wrapper for Rust language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "rust",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_rust",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_scala",
    "description": "Nim wrapper for Scala language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "scala",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_scala",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "treesitter_typescript",
    "description": "Nim wrapper for Typescript language support within tree-sitter",
    "tags": [
      "tree-sitter",
      "typescript",
      "parser",
      "language",
      "code"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/genotrance/nimtreesitter",
    "url": "https://github.com/genotrance/nimtreesitter?subdir=treesitter_typescript",
    "long_description": "Tree-sitter is a parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. Tree-sitter aims to be:\n* General enough to parse any programming language\n* Fast enough to parse on every keystroke in a text editor\n* Robust enough to provide useful results even in the presence of syntax errors\n* Dependency-free so that the runtime library (which is written in pure C) can be embedded in any application",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "tsundoku",
    "description": "Simple and lightweight OPDS ebook server",
    "tags": [
      "OPDS",
      "ebook",
      "server"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/FedericoCeratto/tsundoku",
    "url": "https://github.com/FedericoCeratto/tsundoku",
    "long_description": "\"Tsundoku\": 積ん読 - the habit of piling up books and never getting around to read them.\nTsundoku is simple and lightweight OPDS ebook server.\nIt’s compatible with FBreader & co. It doesn’t parse the epub contents or use databases. The books are exposed by path.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Tools",
      "Miscellaneous"
    ]
  },
  {
    "name": "ttmath",
    "description": "A Nim wrapper for ttmath: big numbers with fixed size",
    "tags": [
      "library",
      "math",
      "numbers"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-ttmath",
    "url": "https://github.com/status-im/nim-ttmath",
    "long_description": "A Nim wrapper for ttmath library, a c++ template library for operating with big integers and floats with fixed sizes.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "tuples",
    "description": "Tuple manipulation utilities",
    "tags": [
      "library",
      "tuple",
      "metaprogramming"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/MasonMcGill/tuples",
    "url": "https://github.com/MasonMcGill/tuples.git",
    "long_description": "The tuples module defines generic operations for working with tuples. The routines defined in this module allow heterogeneous records to be manipulated as if they were homogeneous collections, while maintaining type safety.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "turn_based_game",
    "description": "Game rules engine for simulating or playing turn-based games",
    "tags": [
      "rules-engine",
      "game",
      "turn-based"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JohnAD/turn_based_game/wiki",
    "url": "https://github.com/JohnAD/turn_based_game",
    "long_description": "This framework encapsulates the critical information (rules) needed for playing or simulating a turn-based game.\nSome common turn-based games: Checkers, Reversi, Chess, Stratego, Connect 4.",
    "code_quality": 4,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Games",
      "Algorithms"
    ]
  },
  {
    "name": "twitter",
    "description": "Low-level twitter API wrapper library for Nim.",
    "tags": [
      "library",
      "wrapper",
      "twitter"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dchem/twitter.nim",
    "url": "https://github.com/dchem/twitter.nim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network",
      "Web"
    ]
  },
  {
    "name": "typelists",
    "description": "Typelists in Nim",
    "tags": [
      "metaprogramming"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/typelists",
    "url": "https://github.com/yglukhov/typelists",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "typography",
    "description": "Fonts, Typesetting and Rasterization.",
    "tags": [
      "font",
      "text",
      "2d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/typography",
    "url": "https://github.com/treeform/typography.git",
    "long_description": "Typography is pure nim implementation for font rasterization (letter drawing) and text typesetting (text layout). It does not relay on any external library such as FreeType, stb_truetype, pango or HarfBuzz.\nIt does relay on `stb_image` for png writing, but if you don't write pngs it would not be included.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "Image",
      "GUI"
    ]
  },
  {
    "name": "ui",
    "description": "A wrapper for libui",
    "tags": [
      "library",
      "GUI",
      "libui",
      "toolkit"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/ui",
    "url": "https://github.com/nim-lang/ui",
    "long_description": "This package wraps the libui C library. It also provides a high-level Nim binding for it.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "uibuilder",
    "description": "UI building with Gnome's Glade",
    "tags": [
      "ui",
      "builder",
      "libui",
      "designer",
      "gtk",
      "gnome",
      "glade",
      "interface",
      "gui",
      "linux",
      "windows",
      "osx",
      "mac",
      "native",
      "generator"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/uibuilder.nim",
    "url": "https://github.com/ba0f3/uibuilder.nim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "ulid",
    "description": "Universally Unique Lexicographically Sortable Identifier",
    "tags": [
      "library",
      "id",
      "ulid",
      "uuid",
      "guid"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/adelq/ulid",
    "url": "https://github.com/adelq/ulid",
    "long_description": "Universally Unique Lexicographically Sortable Identifier in Nim\nUUID can be suboptimal for many uses-cases because:\n* It isn't the most character efficient way of encoding 128 bits of randomness\n* UUID v1/v2 is impractical in many environments, as it requires access to a unique, stable MAC address\n* UUID v3/v5 requires a unique seed and produces randomly distributed IDs, which can cause fragmentation in many data structures\n* UUID v4 provides no other information than randomness which can cause fragmentation in many data structures\nInstead, herein is proposed ULID:\n* 128-bit compatibility with UUID\n* 1.21e+24 unique ULIDs per millisecond\n* Lexicographically sortable!\n* Canonically encoded as a 26 character string, as opposed to the 36 character UUID\n* Uses Crockford's base32 for better efficiency and readability (5 bits per character)\n* Case insensitive\n* No special characters (URL safe)",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "unicode_numbers",
    "description": "Converts a number into a specially formatted Unicode string",
    "tags": [
      "library",
      "string",
      "format",
      "unicode"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Aearnus/unicode_numbers",
    "url": "https://github.com/Aearnus/unicode_numbers",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "unicodedb",
    "description": "Unicode Character Database (UCD) access for Nim",
    "tags": [
      "unicode",
      "UCD",
      "unicodedata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-unicodedb",
    "url": "https://github.com/nitely/nim-unicodedb",
    "long_description": "This library aims to bring the unicode database to Nim. Main goal is having O(1) access for every API and be lightweight in size.",
    "code_quality": 4,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Algorithms"
    ]
  },
  {
    "name": "unicodeplus",
    "description": "Common unicode operations",
    "tags": [
      "unicode",
      "isdigit",
      "isalpha"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nitely/nim-unicodeplus",
    "url": "https://github.com/nitely/nim-unicodeplus",
    "long_description": "A replacement for Nim's unicode module. It closely follows Python's API behavior for each operation.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous",
      "Algorithms"
    ]
  },
  {
    "name": "units",
    "description": " Statically-typed quantity units.",
    "tags": [
      "library",
      "pure",
      "units",
      "physics",
      "science",
      "documentation",
      "safety"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Udiknedormin/NimUnits",
    "url": "https://github.com/Udiknedormin/NimUnits",
    "long_description": "This module provides statically-typed units of measure. Given a unit system, any basic floating-point operations compatible with their units can be done, e.x. addition, substraction, multiplication, division, natural power. Roots can be incompatible, depending on units' powers.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "unpack",
    "description": "Array/Sequence/Object destructuring/unpacking macro",
    "tags": [
      "unpack",
      "seq",
      "array",
      "object",
      "destructuring",
      "destructure",
      "unpacking"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/technicallyagd/unpack",
    "url": "https://github.com/technicallyagd/unpack",
    "long_description": "Array/Sequence/Object destructuring/unpacking macros attempt to quench the thirst of (Python, ES6, et al.)-spoiled people.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms",
      "Language"
    ]
  },
  {
    "name": "unsplash",
    "description": "Unsplash API Client for Nim",
    "tags": [
      "unsplash",
      "photos",
      "images",
      "async",
      "multisync",
      "photography"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-unsplash",
    "url": "https://github.com/juancarlospaco/nim-unsplash",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image",
      "Tools"
    ]
  },
  {
    "name": "untar",
    "description": "Library for decompressing tar.gz files.",
    "tags": [
      "library",
      "tar",
      "gz",
      "compression",
      "archive",
      "decompression"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/untar",
    "url": "https://github.com/dom96/untar",
    "long_description": "This library does one and only one thing very well, it decompresses and extracts .tar.gz archives.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 3,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "ur",
    "description": "A Universal Result macro/object that normalizes the information returned from a procedure",
    "tags": [
      "library",
      "universal",
      "result",
      "return"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JohnAD/ur",
    "url": "https://github.com/JohnAD/ur",
    "doc": "https://github.com/JohnAD/ur/blob/master/docs/ur.rst",
    "long_description": "A Universal Result (UR) is an object that allows the programmer to return either a value or a sequence of messages (or both) from a procedure. This could, of course, be done by hand using tuple or other options, but the goal of this package is two-fold:\n* Make it easy (and predictable) to create such \"dynamic\" results.\n* Make it possible to integrate such a system with other libraries.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "urand",
    "description": "Simple method of obtaining secure random numbers from the OS",
    "tags": [
      "random",
      "urandom",
      "crypto"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Matceporial/nim-urand",
    "url": "https://github.com/Matceporial/nim-urand",
    "long_description": "Cryptographic-quality random bytes from your operating system Extracted and adapted from urandom.nim from nim-random by Oleh Prypin",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "uri2",
    "description": "Nim module for better URI handling",
    "tags": [
      "uri",
      "url",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-uri2",
    "url": "https://github.com/achesak/nim-uri2",
    "long_description": "nim-uri2 is a Nim module that provides improved way for working with URIs. It is based on the \"uri\" module in the Nim standard library and the \"purl\" Python module.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "urlshortener",
    "description": "A URL shortener cli app. using bit.ly",
    "tags": [
      "url",
      "shorten",
      "shortener",
      "bitly",
      "cli",
      "shrink",
      "shrinker"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/jabbalaci/UrlShortener",
    "url": "https://github.com/jabbalaci/UrlShortener",
    "long_description": "A URL shortener cli app. using bit.ly.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web",
      "Tools"
    ]
  },
  {
    "name": "usagov",
    "description": "USA Code.Gov MultiSync API Client for Nim",
    "tags": [
      "gov",
      "opendata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-usagov",
    "url": "https://github.com/juancarlospaco/nim-usagov",
    "long_description": "Code.gov is on a mission to become the primary platform where America shares code.\nCode.gov API is a public API. Data from the API will be delivered in JSON.\nThis Client is Async & Sync at the same time. CrossPlatform. CrossArchitecture. 0 Dependency. 1 File. ~250Kilobytes Compiled. Can run itself for an example. Proxy, IPv6, SSL & Timeout Support. Tiny RAM use. Self Rate Limited at 5000 Calls/Day. Self-Documented.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "useragents",
    "description": "User Agent parser for nim.",
    "tags": [
      "library",
      "useragent"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/useragents",
    "url": "https://github.com/treeform/useragents",
    "long_description": "Module provides just one function to parse a user agent.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "usha",
    "description": "untitled shell history application",
    "tags": [
      "shell",
      "utility"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/subsetpark/untitled-shell-history-application",
    "url": "https://github.com/subsetpark/untitled-shell-history-application",
    "long_description": "usha was inspired by Denis Gladkikh's DBHist post and shell script. It has few innovations over that script; mostly, it seemed like a fun project and I wanted to make my own. But I also don't use bash and wanted a shell-agnostic equivalent to Denis's program.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Tools",
      "System"
    ]
  },
  {
    "name": "usigar",
    "description": "USIG Argentina Government MultiSync API Client for Nim",
    "tags": [
      "geo",
      "opendata",
      "openstreemap",
      "multisync",
      "async"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-usigar",
    "url": "https://github.com/juancarlospaco/nim-usigar",
    "long_description": "USIG Argentina MultiSync API Lib for Nim (All Docs on Spanish because its for Argentina)\nEste Cliente es Async y Sync al mismo tiempo, es MultiPlataforma, MultiArquitectura, 0 Dependencias, 1 Archivo solo, ~250 Kilobytes Compilado, muy poco uso de RAM. Soporta Proxy, IPv6, SSL y Timeout. Auto-Documentado.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "ustring",
    "description": "utf-8 string",
    "tags": [
      "string",
      "text",
      "unicode",
      "uft8",
      "utf-8"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rokups/nim-ustring",
    "url": "https://github.com/rokups/nim-ustring",
    "long_description": "This is utf-8 string implementation for Nim. It is based on excellent battle-tested utf8rewind library In order to use this library project must link to utf8rewind.\n* Common string manipulation functions\n* Converters to and from `string`, `cstring`, `char`\n* Nim string slicing with roof (`^`) operator\n* String manipulation functions using inclusive ranges",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "utils",
    "description": "Collection of string, parsing, pointer, ... utilities.",
    "tags": [
      "library",
      "utilities"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-appkit/utils",
    "url": "https://github.com/nim-appkit/utils",
    "long_description": "A collection of useful extensions for Nim.\n* string utilities: save version of format, camelCase, kebapCase converters, ...\n* `Parser`: a string parser object that makes parsing text very convenient.\n* `Ptr`: a pointer object that makes working with binary data more convenient.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "uuid",
    "description": "UUID wrapper",
    "tags": [
      "library",
      "wrapper",
      "uuid"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/idlewan/nim-uuid",
    "url": "https://github.com/idlewan/nim-uuid",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "uuids",
    "description": "UUID library for Nim",
    "tags": [
      "library",
      "uuid",
      "id"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/pragmagic/uuids/",
    "url": "https://github.com/pragmagic/uuids/",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "validateip",
    "description": "Checks if a provided string is actually a correct IP address. Supports detection of Class A to D of IPv4 addresses.",
    "tags": [
      "ip",
      "ipaddress",
      "ipv4",
      "ip4",
      "checker",
      "check"
    ],
    "license": "GPLv3+",
    "method": "git",
    "url": "https://github.com/Akito13/nim-validateip",
    "long_description": "Nim module for checking if a provided string is actually a correct IP address. Supports detection of Class A to D of IPv4 addresses. IPv6 support planned.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "validation",
    "description": "Nim object validation using type field pragmas",
    "tags": [
      "validation",
      "library"
    ],
    "license": "GPLv3",
    "method": "git",
    "web": "https://github.com/captainbland/nim-validation",
    "url": "https://github.com/captainbland/nim-validation",
    "long_description": "Nim validation is a simple to use validation library that performs validations against nim objects using their field pragmas. This approach is inspired by libraries like Hibernate validators and Rust's validation library.\nThe aim of this library is to provide a simple, flexible mechanism for adding validations to your object fields - it does this without using RTTI and is type safe. It is easy to create custom validations, and currently has a small number of validations to demonstrate that it works. Nim Validation also works recursively with nested objects and supports cross field references in validations.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database",
      "Miscellaneous"
    ]
  },
  {
    "name": "values",
    "description": "Library for working with arbitrary values + a map data structure.",
    "tags": [
      "library",
      "values",
      "datastructures"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-appkit/values",
    "url": "https://github.com/nim-appkit/values",
    "long_description": "A Nim library for working with arbitrary variables/values. Includes a map data structure for easily storing and working with nested, flexible data.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Miscellaneous"
    ]
  },
  {
    "name": "variant",
    "description": "Variant type and type matching",
    "tags": [
      "variant"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/yglukhov/variant",
    "url": "https://github.com/yglukhov/variant.git",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "variantkey",
    "description": "encode/decode variants to/from uint64",
    "tags": [
      "vcf",
      "variant",
      "genomics"
    ],
    "license": "MIT",
    "method": "git",
    "url": "https://github.com/brentp/variantkey-nim",
    "long_description": "Numerical Encoding for Human Genetic Variants\nHuman genetic variants are usually represented by four values with variable length: chromosome, position, reference and alternate alleles. There is no guarantee that these components are represented in a consistent way across different data sources, and processing variant-based data can be inefficient because four different comparison operations are needed for each variant, three of which are string comparisons. Working with strings, in contrast to numbers, poses extra challenges on computer memory allocation and data-representation. Existing variant identifiers do not typically represent every possible variant we may be interested in, nor they are directly reversible.\nVariantKey, a novel reversible numerical encoding schema for human genetic variants, overcomes these limitations by allowing to process variants as a single 64 bit numeric entities while preserving the ability to be searched and sorted per chromosome and position.\nThe individual components of short variants (up to 11 bases between `REF` and `ALT` alleles) can be directly read back from the VariantKey, while long variants requires a lookup table to retrieve the reference and alternate allele strings.\nThe VariantKey Format doesn't represent universal codes, it only encodes `CHROM`, `POS`, `REF` and `ALT`, so each code is unique for a given reference genome. The direct comparisons of two VariantKeys makes sense only if they both refer to the same genome reference.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Science"
    ]
  },
  {
    "name": "vec",
    "description": "A very simple vector library",
    "tags": [
      "vector",
      "library",
      "simple"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/vec",
    "url": "https://github.com/dom96/vec",
    "code_quality": 1,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "vecio",
    "description": "vectored io for nim",
    "tags": [
      "writev",
      "readv",
      "scatter",
      "gather",
      "vectored",
      "vector",
      "io",
      "networking"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/emekoi/vecio.nim",
    "url": "https://github.com/emekoi/vecio.nim",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Network"
    ]
  },
  {
    "name": "vecmath",
    "description": "various vector maths utils for nimrod",
    "tags": [
      "library",
      "math",
      "vector"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/barcharcraz/vecmath",
    "url": "https://github.com/barcharcraz/vecmath",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "vectors",
    "description": "Simple multidimensional vector math",
    "tags": [
      "math",
      "vectors",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/blamestross/nimrod-vectors",
    "url": "https://github.com/blamestross/nimrod-vectors",
    "long_description": "This is a minimal library for basic vector math. Because `static[int]` does not work in generics yet, dimension matching is checked at run-time.\nVectors can be declared with any number of dimensions : `dim >= 2`",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths"
    ]
  },
  {
    "name": "vidhdr",
    "description": "Library for detecting the format of an video file",
    "tags": [
      "video",
      "formats",
      "file"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-vidhdr",
    "url": "https://github.com/achesak/nim-vidhdr",
    "long_description": "nim-vidhdr is a Nim module for determining the type of an video from a given file, filename, or sequence of bytes. It can detect many common video formats.",
    "code_quality": 1,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Video",
      "Tools"
    ]
  },
  {
    "name": "vkapi",
    "description": "A wrapper for the vk.com API (russian social network)",
    "tags": [
      "wrapper",
      "vkontakte",
      "vk",
      "library",
      "api"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/Yardanico/nimvkapi",
    "url": "https://github.com/Yardanico/nimvkapi",
    "long_description": "This is the wrapper for vk.com API written in nim It gives you the ability to call vk.com API methods using synchronous and asynchronous approach.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "vla",
    "description": "Variable length arrays for Nim",
    "tags": [
      "vla",
      "alloca"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/bpr/vla",
    "url": "https://github.com/bpr/vla",
    "long_description": "Implementation of C99 style variable length arrays for Nim programming language.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "vmath",
    "description": "Collection of math routines for 2d and 3d graphics.",
    "tags": [
      "math",
      "graphics",
      "2d",
      "3d"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/vmath",
    "url": "https://github.com/treeform/vmath.git",
    "long_description": "Collection of math routines for 2d and 3d graphics.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Maths",
      "Image",
      "Games"
    ]
  },
  {
    "name": "vmvc",
    "description": "a skeleton/structure for a variation on the mvc pattern, similar to dci. For command line and gui programs. it's a middle ground between rapid application development and handling software complexity.",
    "tags": [
      "vmvc",
      "dci"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/kobi2187/vmvc",
    "url": "https://github.com/kobi2187/vmvc",
    "long_description": "a skeleton/structure for a variation on the mvc pattern, similar to dci. For command line and gui programs. it's a middle ground between rapid application development and handling software complexity. Attempting to achieve that by having simple control flow and a focal point on the controller side, to handle user interactions, with the benefit that we can add actions before or after the user request has been applied. user requests are text commands. The domain objects are all \"dumb\" structs, and the views only know how to draw themselves. Once you have these two parts, and the gui is created, you can advance with unit tests and controller area code, though you should separate all functionality to roles, aka managers. instantiate them and use them in the controller. The last part is basically a large switch-case (the controller is mostly a router here). the views can be any gui you want, command line, or a text user interface. the switch case operates on a parsed command.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Development"
    ]
  },
  {
    "name": "vorbis",
    "description": "Binding to libvorbis",
    "tags": [
      "library",
      "wrapper",
      "binding",
      "audio",
      "sound",
      "metadata",
      "media"
    ],
    "license": "CC0",
    "method": "hg",
    "url": "https://bitbucket.org/BitPuffin/nim-vorbis",
    "long_description": "Nimrod binding to the vorbis/vorbisfile header.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Audio"
    ]
  },
  {
    "name": "wNim",
    "description": "Nim's Windows GUI Framework.",
    "tags": [
      "library",
      "windows",
      "gui",
      "ui"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/khchen/wNim",
    "url": "https://github.com/khchen/wNim",
    "doc": "https://khchen.github.io/wNim/wNim.html",
    "long_description": "wNim is Nim's Windows GUI Framework, based on winim. Layout DSL is powered by Yuriy Glukhov's Kiwi constraint solving library.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "web3",
    "description": "Ethereum Web3 API",
    "tags": [
      "web3",
      "ethereum",
      "rpc"
    ],
    "license": "Apache License 2.0",
    "method": "git",
    "web": "https://github.com/status-im/nim-web3",
    "url": "https://github.com/status-im/nim-web3",
    "long_description": "The humble beginnings of a Nim library similar to web3.[js|py]",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "Network",
      "Algorithms",
      "Finance"
    ]
  },
  {
    "name": "webaudio",
    "description": "API for Web Audio (JS)",
    "tags": [
      "javascript",
      "js",
      "web",
      "audio",
      "sound",
      "music"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ftsf/nim-webaudio",
    "url": "https://github.com/ftsf/nim-webaudio",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "JS",
      "Audio",
      "Web"
    ]
  },
  {
    "name": "webdriver",
    "description": "Implementation of the WebDriver w3c spec.",
    "tags": [
      "webdriver",
      "selenium",
      "library",
      "firefox"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/dom96/webdriver",
    "url": "https://github.com/dom96/webdriver",
    "long_description": "WebDriver is a remote control interface that enables introspection and control of user agents. It provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "JS",
      "Web"
    ]
  },
  {
    "name": "webp",
    "description": "WebP Tools wrapper for Nim",
    "tags": [
      "webp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-webp",
    "url": "https://github.com/juancarlospaco/nim-webp",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Image"
    ]
  },
  {
    "name": "websocket",
    "description": "websockets for nim",
    "tags": [
      "http",
      "websockets",
      "async",
      "client",
      "server"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/niv/websocket.nim",
    "url": "https://github.com/niv/websocket.nim",
    "long_description": "A websocket library for nim, providing both client and server support.",
    "code_quality": 3,
    "doc_quality": 2,
    "project_quality": 3,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "webterminal",
    "description": "Very simple browser Javascript TTY web terminal",
    "tags": [
      "javascript",
      "terminal",
      "tty"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/JohnAD/webterminal",
    "url": "https://github.com/JohnAD/webterminal",
    "long_description": "Very simple browser Javascript TTY web terminal for usage by Nim",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "webview",
    "description": "Nim bindings for https://github.com/zserge/webview, a cross platform single header webview library",
    "tags": [
      "gui",
      "ui",
      "webview",
      "cross",
      "web",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/oskca/webview",
    "url": "https://github.com/oskca/webview",
    "long_description": "Nim bindings for zserge's Webview which is an excellent cross-platform single header webview library for C/C++ using Gtk, Cocoa or MSHTML repectively.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "whip",
    "description": "Whip is high performance web application server based on httpbeast a nest for redix tree based routing with some extra opmtizations.",
    "tags": [
      "http",
      "rest",
      "server",
      "httpbeast",
      "nest",
      "fast"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/mattaylor/whip",
    "url": "https://github.com/mattaylor/whip",
    "long_description": "WHIP is a high performance web application server based on the excellent https://github.com/dom96/httpbeast and routing provided by https://github.com/kedean/nest with some additonal optimizations.",
    "code_quality": 1,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Web"
    ]
  },
  {
    "name": "wiki2text",
    "description": "Quickly extracts natural-language text from a MediaWiki XML file.",
    "tags": [
      "nlp",
      "wiki",
      "xml",
      "text"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/rspeer/wiki2text",
    "url": "https://github.com/rspeer/wiki2text.git",
    "long_description": "wiki2text is a fast pipeline that takes a MediaWiki XML dump -- such as the exports of Wikipedia that you can download from dumps.wikimedia.org -- and extract just the natural-language text from them, skipping the Wiki formatting characters and the HTML tags.\nThis is particularly useful as a way to get free corpora, in many languages, for natural language processing.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 1,
    "categories": [
      "*Dead*",
      "Miscellaneous"
    ]
  },
  {
    "name": "wings",
    "description": "A simple cross language struct and enum file generator.",
    "tags": [
      "library",
      "binary",
      "codegen",
      "struct",
      "enum"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/binhonglee/wings",
    "url": "https://github.com/binhonglee/wings",
    "long_description": "A simple cross language struct and enum file generator.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Development",
      "Miscellaneous"
    ]
  },
  {
    "name": "winim",
    "description": "Nim's Windows API and COM Library",
    "tags": [
      "library",
      "windows",
      "api",
      "com"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/khchen/winim",
    "url": "https://github.com/khchen/winim",
    "long_description": "Winim contains Windows API, struct, and constant definitions for Nim. The definitions are translated from MinGW's Windows headers.\nThe module also include some Windows string type utilities and Windows COM support.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "winregistry",
    "description": "Deal with Windows Registry from Nim.",
    "tags": [
      "registry",
      "windows",
      "library"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/miere43/nim-registry",
    "url": "https://github.com/miere43/nim-registry",
    "long_description": "This module contains procedures that provide access to Windows Registry.\nPlease do not use this module to save your applications settings, use it to interact with older programs which make use of registry, because it is slow (implemented as file system inside a file rather than database), not cross-platform, has unoblivious stuff like registry virtualization, virtual storages, different behavior across 32/64-bit systems. As alternative you can supply some kind of INI or XML file with your application or store it into platform-specific settings folder (take a look at appdirs module).",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "wiringPiNim",
    "description": "Wrapper that implements some of wiringPi's function for controlling a Raspberry Pi",
    "tags": [
      "wrapper",
      "raspberry",
      "rpi",
      "wiringpi",
      "pi"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_wiringPiNim",
    "url": "https://github.com/ThomasTJdev/nim_wiringPiNim",
    "long_description": "Nim-lang wrapper for the C library wiringPi. This wrapper implements some of the wiringPi functions for quick access in Nim for controlling a Raspberry Pi.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Hardware"
    ]
  },
  {
    "name": "witai",
    "description": "wit.ai client",
    "tags": [
      "witai",
      "wit.ai",
      "client",
      "speech",
      "freetext",
      "voice"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xmonader/witai-nim",
    "url": "https://github.com/xmonader/witai-nim",
    "long_description": "Nim client for wit.ai to easily create text or voice based bots that humans can chat with on their preferred messaging platform.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Web"
    ]
  },
  {
    "name": "with",
    "description": "Simple 'with' macro for Nim",
    "tags": [
      "with",
      "macro"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zevv/with",
    "url": "https://github.com/zevv/with",
    "long_description": "`with` is a simple macro to replace the deprecated `{.with.}` pragma in Nim. This macro looks up all identifiers in a code block to see if they are known field names for the given object or tuple. If a match is found, the identifier is replaced by a dot expression `obj.field.`",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "wox",
    "description": "Helper library for writing Wox plugins in Nim",
    "tags": [
      "wox",
      "plugins"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/roose/nim-wox",
    "url": "https://github.com/roose/nim-wox",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "GUI"
    ]
  },
  {
    "name": "wren",
    "description": "A nim wrapper for Wren, an embedded scripting language",
    "tags": [
      "wren",
      "scripting",
      "interpreter"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/geotre/wren",
    "url": "https://github.com/geotre/wren",
    "long_description": "A Nim wrapper for Wren, an embedded scripting language.\nWren is a small, fast, class-based concurrent scripting language",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "ws",
    "description": "Simple WebSocket library for nim.",
    "tags": [
      "websocket"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/treeform/ws",
    "url": "https://github.com/treeform/ws",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Web",
      "Network"
    ]
  },
  {
    "name": "wstp",
    "description": "Nim bindings for WSTP",
    "tags": [
      "wolfram",
      "mathematica",
      "bindings",
      "wstp"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/oskca/nim-wstp",
    "url": "https://github.com/oskca/nim-wstp",
    "long_description": "Nim bindings for working with Mathematica or the Wolfram language.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "x11",
    "description": "Wrapper for X11",
    "tags": [
      "wrapper"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/x11",
    "url": "https://github.com/nim-lang/x11",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 3,
    "categories": [
      "FFI",
      "GUI"
    ]
  },
  {
    "name": "xdo",
    "description": "Nim GUI Automation Linux, simulate user interaction, mouse and keyboard.",
    "tags": [
      "automation",
      "linux",
      "gui",
      "keyboard",
      "mouse",
      "typing",
      "clicker"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/juancarlospaco/nim-xdo",
    "url": "https://github.com/juancarlospaco/nim-xdo",
    "long_description": "Nim XDO is a GUI Automation Wrapper for Linux to simulate user interaction, mouse and keyboard control from Nim code, procs for common actions.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "GUI",
      "Tools"
    ]
  },
  {
    "name": "xiaomi",
    "description": "Read and write to Xiaomi IOT devices.",
    "tags": [
      "xiaomi",
      "iot"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ThomasTJdev/nim_xiaomi",
    "url": "https://github.com/ThomasTJdev/nim_xiaomi.git",
    "long_description": "Library for working with Xiaomi IOT devices.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Hardware"
    ]
  },
  {
    "name": "xml",
    "description": "Pure Nim XML parser",
    "tags": [
      "xml",
      "parser",
      "compile",
      "tokenizer",
      "html",
      "cdata"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/ba0f3/xml.nim",
    "url": "https://github.com/ba0f3/xml.nim",
    "long_description": "Simple XML parser in pure Nim\nThis module written for compile time XML parsing purpose, it supports only some features:\n* Nodes\n* Attributes\n* CDATA and Text\nThe parser is simple and small, no error checking/correcting.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "xmldom",
    "description": "Implementation of XML DOM Level 2 Core specification (http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html)",
    "tags": [
      "graveyard",
      "xml",
      "dom"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/xmldom",
    "url": "https://github.com/nim-lang/graveyard?subdir=xmldom",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "xmldomparser",
    "description": "Parses an XML Document into a XML DOM Document representation.",
    "tags": [
      "graveyard",
      "xml",
      "dom",
      "parser"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/graveyard/tree/master/xmldomparser",
    "url": "https://github.com/nim-lang/graveyard?subdir=xmldomparser",
    "code_quality": 0,
    "doc_quality": 0,
    "project_quality": 0,
    "categories": [
      "*Dead*"
    ]
  },
  {
    "name": "xmltools",
    "description": "High level xml library for Nim",
    "tags": [
      "xml",
      "functional",
      "library",
      "parsing"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/vegansk/xmltools",
    "url": "https://github.com/vegansk/xmltools",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "xxhash",
    "description": "xxhash wrapper for Nim",
    "tags": [
      "fast",
      "hash",
      "algorithm"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/OpenSystemsLab/xxhash.nim",
    "url": "https://github.com/OpenSystemsLab/xxhash.nim",
    "long_description": "Extremely fast non-cryptographic hash algorithm",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "xxtea",
    "description": "XXTEA encryption algorithm library written in pure Nim.",
    "tags": [
      "xxtea",
      "encrypt",
      "decrypt",
      "crypto"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/xxtea/xxtea-nim",
    "url": "https://github.com/xxtea/xxtea-nim",
    "long_description": "XXTEA is a fast and secure encryption algorithm. This is a XXTEA library for Nim.\nIt is different from the original XXTEA encryption algorithm. It encrypts and decrypts raw binary data instead of 32bit integer array, and the key is also the raw binary data.",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "yahooweather",
    "description": "Yahoo! Weather API wrapper",
    "tags": [
      "library",
      "wrapper",
      "weather"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/achesak/nim-yahooweather",
    "url": "https://github.com/achesak/nim-yahooweather",
    "long_description": "nim-yahooweather is a wrapper of the Yahoo! Weather API for the Nim programming language.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Miscellaneous"
    ]
  },
  {
    "name": "yaml",
    "description": "YAML 1.2 implementation for Nim",
    "tags": [
      "serialization",
      "parsing",
      "library",
      "yaml"
    ],
    "license": "MIT",
    "method": "git",
    "web": "http://flyx.github.io/NimYAML/",
    "url": "https://github.com/flyx/NimYAML",
    "long_description": "NimYAML is a pure Nim YAML implementation without any dependencies other than Nim's standard library. It enables you to serialize Nim objects to a YAML stream and back. It also provides a low-level event-based API, and a document object model which you do not want to use because serializing to native types is much more awesome.",
    "code_quality": 3,
    "doc_quality": 4,
    "project_quality": 3,
    "categories": [
      "Database"
    ]
  },
  {
    "name": "z3",
    "description": "Nim Z3 theorem prover bindings",
    "tags": [
      "Z3",
      "sat",
      "smt",
      "theorem",
      "prover",
      "solver",
      "optimization"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zevv/nimz3",
    "url": "https://github.com/zevv/nimz3",
    "long_description": "NimZ3 is an early stage Nim binding for the Z3 theorem prover",
    "code_quality": 3,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Maths"
    ]
  },
  {
    "name": "zero_functional",
    "description": "A library providing zero-cost chaining for functional abstractions in Nim",
    "tags": [
      "functional",
      "dsl",
      "chaining",
      "seq"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/zero-functional/zero-functional",
    "url": "https://github.com/zero-functional/zero-functional",
    "long_description": "A library providing (almost) zero-cost chaining for functional abstractions in Nim.",
    "code_quality": 2,
    "doc_quality": 3,
    "project_quality": 2,
    "categories": [
      "Language"
    ]
  },
  {
    "name": "zhsh",
    "description": "This module is a port of the Java implementation of the Zhang-Shasha algorithm for tree edit distance",
    "tags": [
      "algorithm",
      "edit-distance"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/PMunch/zhangshasha",
    "url": "https://github.com/PMunch/zhangshasha",
    "long_description": "This module is a port of the Java implementation of the Zhang-Shasha algorithm for tree edit distance (found here: https://github.com/ijkilchenko/ZhangShasha). It supports the simple string based language for creating trees that the original supports and allows the user to create their own trees for comparisson.",
    "code_quality": 2,
    "doc_quality": 2,
    "project_quality": 2,
    "categories": [
      "Algorithms"
    ]
  },
  {
    "name": "zip",
    "description": "A wrapper for the zip library",
    "tags": [
      "wrapper",
      "zip"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/zip",
    "url": "https://github.com/nim-lang/zip",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Algorithms"
    ]
  },
  {
    "name": "zmq",
    "description": "ZeroMQ 4 wrapper",
    "tags": [
      "library",
      "wrapper",
      "zeromq",
      "messaging",
      "queue"
    ],
    "license": "MIT",
    "method": "git",
    "web": "https://github.com/nim-lang/nim-zmq",
    "url": "https://github.com/nim-lang/nim-zmq",
    "long_description": "ZeroMQ (also known as ØMQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems.",
    "code_quality": 2,
    "doc_quality": 1,
    "project_quality": 2,
    "categories": [
      "FFI",
      "Network",
      "System"
    ]
  },
  {
    "name": "asyncdispatch2",
    "alias": "chronos"
  },
  {
    "name": "chipmunk",
    "alias": "chipmunk6"
  },
  {
    "name": "closure_methods",
    "alias": "oop_utils"
  },
  {
    "name": "ec_events",
    "alias": "mc_events"
  },
  {
    "name": "libserialport",
    "alias": "serial"
  },
  {
    "name": "monad",
    "alias": "maybe"
  },
  {
    "name": "nim-ao",
    "alias": "ao"
  },
  {
    "name": "nim-geocoding",
    "alias": "geocoding"
  },
  {
    "name": "nim-glfw",
    "alias": "glfw"
  },
  {
    "name": "nim-libclang",
    "alias": "libclang"
  },
  {
    "name": "nim-locale",
    "alias": "locale"
  },
  {
    "name": "nim-ogg",
    "alias": "ogg"
  },
  {
    "name": "nim-portaudio",
    "alias": "portaudio"
  },
  {
    "name": "nim-sndfile",
    "alias": "sndfile"
  },
  {
    "name": "nim-vorbis",
    "alias": "vorbis"
  },
  {
    "name": "nimlibpng",
    "alias": "png"
  },
  {
    "name": "nimtorch",
    "alias": "torch"
  },
  {
    "name": "nimyaml",
    "alias": "yaml"
  },
  {
    "name": "websitecreator",
    "alias": "nimwc"
  }
]
